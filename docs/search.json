[{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"about-travelsurveytools","dir":"Articles","previous_headings":"","what":"About TravelSurveyTools","title":"Getting Started","text":"travelSurveyTools package provides tools R users aid use data household travel surveys. possible uses include creating custom cross tabs, labeling data, calculating trip rates.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"data-assumptions","dir":"Articles","previous_headings":"","what":"Data Assumptions","title":"Getting Started","text":"travelSurveyTools assumes data structure shown . reflect structure data","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"hts_data","dir":"Articles","previous_headings":"Data Assumptions","what":"hts_data","title":"Getting Started","text":"hts_data list five core tables:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"hh","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"hh","title":"Getting Started","text":"Household dataset hh_id: 8 digit household ID survey variables asked household level hh_weight: household weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"person","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"person","title":"Getting Started","text":"Person dataset hh_id: 8 digit household ID person_id: 10 digit person ID survey variables asked person level person_weight: person weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"day","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"day","title":"Getting Started","text":"Day dataset hh_id: 8 digit household ID person_id: 10 digit person ID day_id: 12 digit day ID survey variable asked day level day_weight: day weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"trip","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"trip","title":"Getting Started","text":"Trip dataset hh_id: 8 digit household ID person_id: 10 digit person ID day_id: 12 digit day ID trip_id: 13 digit trip ID survey variables asked trip level trip_weight: trip weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"vehicle","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"vehicle","title":"Getting Started","text":"Vehicle dataset hh_id: 8 digit household ID vehicle_id: 10 digit vehicle ID survey responses asked vehicle level hh_weight: household weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"codebook","dir":"Articles","previous_headings":"Data Assumptions","what":"Codebook","title":"Getting Started","text":"addition data household travel survey. codebook also required. codebook assumed two parts:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"variable_list","dir":"Articles","previous_headings":"Data Assumptions > Codebook","what":"variable_list","title":"Getting Started","text":"dataset containing information variables existing hh, person, day, trip, vehicle tables. variables follows: variable: Name variable is_checkbox: variable ‘Select Apply’ question hh: variable exists hh table person: variable exists person table day: variable exists day table trip: variable exists trip table vehicle: variable exists vehicle table location: variable exists location table data_type: Data type variable description: description variable logic: Conditions variable value shared_name: shared name checkbox variable variable name non-checkbox variables","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"value_labels","dir":"Articles","previous_headings":"Data Assumptions > Codebook","what":"value_labels","title":"Getting Started","text":"dataset containing values variables found variable_list variables follows: variable: Name variable value: numeric value variable label: numeric value variable represents label_value: value concatenated label (e.g., 11 85 older) val_order: order variable label appear ","code":""},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"prepping-the-data","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Prepping the Data","title":"Getting Started","text":"order create summaries data first need prepare data. can using hts_prep_data. return categorical (cat) numeric (num) (applicable) prepped data table can used create summaries. Numeric variables automatically binned hts_prep_data create categorical summaries. can make categorical summary numeric variable using hts_summary. Additionally, numeric variables can create numeric summaries.","code":"library(travelSurveyTools) library(data.table) ## Warning: package 'data.table' was built under R version 4.3.2 library(srvyr) ## Warning: package 'srvyr' was built under R version 4.3.2 # Load data data(\"test_data\") data(\"variable_list\") data(\"value_labels\")  DT = hts_prep_data(summarize_var = 'speed_mph',                    variables_dt = variable_list,                    data = test_data) speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = FALSE)  speed_cat_summary$summary ## $unwtd ## Key: <speed_mph> ##     speed_mph count       prop ##        <fctr> <int>      <num> ## 1:  1 or less   720 0.04902962 ## 2:        1-9  6825 0.46475996 ## 3:       9-17  3494 0.23792986 ## 4:      17-25  1995 0.13585291 ## 5:      25-33   868 0.05910793 ## 6:      33-41   414 0.02819203 ## 7: 41 or more   369 0.02512768 speed_num_summary = hts_summary(prepped_dt = DT$num,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'numeric',                                 weighted = FALSE)  speed_num_summary$summary ## $unwtd ##    count   min      max     mean  median ##    <int> <num>    <num>    <num>   <num> ## 1: 14685     0 112.9918 11.83172 8.63421"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"using-weighted-data","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Using Weighted Data","title":"Getting Started","text":"Additionally, can use weighted data setting weighted = TRUE specifying name weight used (wtname).","code":"speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = TRUE,                                 wtname = 'trip_weight')  speed_cat_summary$summary ## $unwtd ## Key: <speed_mph> ##     speed_mph count       prop ##        <fctr> <int>      <num> ## 1:  1 or less   720 0.04902962 ## 2:        1-9  6825 0.46475996 ## 3:       9-17  3494 0.23792986 ## 4:      17-25  1995 0.13585291 ## 5:      25-33   868 0.05910793 ## 6:      33-41   414 0.02819203 ## 7: 41 or more   369 0.02512768 ##  ## $wtd ##     speed_mph count       prop     est ##        <fctr> <int>      <num>   <int> ## 1:  1 or less   720 0.05017047  370818 ## 2:        1-9  6825 0.46380595 3428064 ## 3:       9-17  3494 0.23966211 1771381 ## 4:      17-25  1995 0.13432492  992817 ## 5:      25-33   868 0.05766713  426227 ## 6:      33-41   414 0.02801374  207054 ## 7: 41 or more   369 0.02635567  194799 ##  ## $weight_name ## [1] \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"calculating-standard-errors","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Calculating Standard Errors","title":"Getting Started","text":"Additionally, specifying se = TRUE can calculate standard errors.","code":"speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = TRUE,                                 wtname = 'trip_weight',                                 se = TRUE)  speed_cat_summary$summary ## $unwtd ## Key: <speed_mph> ##     speed_mph count       prop ##        <fctr> <int>      <num> ## 1:  1 or less   720 0.04902962 ## 2:        1-9  6825 0.46475996 ## 3:       9-17  3494 0.23792986 ## 4:      17-25  1995 0.13585291 ## 5:      25-33   868 0.05910793 ## 6:      33-41   414 0.02819203 ## 7: 41 or more   369 0.02512768 ##  ## $wtd ##     speed_mph count       prop     prop_se     est   est_se ##        <fctr> <int>      <num>       <num>   <num>    <num> ## 1:  1 or less   720 0.05017047 0.002079083  370818 15469.78 ## 2:        1-9  6825 0.46380595 0.004737688 3428064 38508.63 ## 3:       9-17  3494 0.23966211 0.004069031 1771381 31295.73 ## 4:      17-25  1995 0.13432492 0.003228756  992817 24287.87 ## 5:      25-33   868 0.05766713 0.002192303  426227 16305.76 ## 6:      33-41   414 0.02801374 0.001560836  207054 11574.44 ## 7: 41 or more   369 0.02635567 0.001548421  194799 11492.05 ##  ## $weight_name ## [1] \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"summarizing-two-variables","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Summarizing Two Variables","title":"Getting Started","text":"want summarize variable another variable (e.g., mode type person’s race, mode_type person’s ethnicity, age study year) can use summarize_by argument. test dataset include study_year section run, provided example. want summarize select apply variable, can set summarize_vartype checkbox. summarize_by can used unlimited amount variables. use one summarize_by variable pass list argument.","code":"DT = hts_prep_data(summarize_var = 'mode_type',                    summarize_by = 'race',                    variables_dt = variable_list,                    data = test_data)  mode_by_race_summary = hts_summary(prepped_dt = DT$cat,                                     summarize_var = 'mode_type',                                    summarize_by = 'race',                                    summarize_vartype = 'categorical',                                    weighted = TRUE,                                    wtname = 'trip_weight',                                    se = TRUE)   mode_by_race_summary$summary ## $unwtd ## Key: <race> ##                                          race mode_type count         prop ##                                        <fctr>     <int> <int>        <num> ##  1:                 African American or Black         1   146 0.3753213368 ##  2:                 African American or Black         3     4 0.0102827763 ##  3:                 African American or Black         4     1 0.0025706941 ##  4:                 African American or Black         6     1 0.0025706941 ##  5:                 African American or Black         7     1 0.0025706941 ##  6:                 African American or Black         8   180 0.4627249357 ##  7:                 African American or Black        11     3 0.0077120823 ##  8:                 African American or Black        13    53 0.1362467866 ##  9:          American Indian or Alaska Native         1     7 0.1521739130 ## 10:          American Indian or Alaska Native         8    36 0.7826086957 ## 11:          American Indian or Alaska Native        13     3 0.0652173913 ## 12:                                     Asian         1   689 0.3123300091 ## 13:                                     Asian         2    32 0.0145058930 ## 14:                                     Asian         4     2 0.0009066183 ## 15:                                     Asian         5     2 0.0009066183 ## 16:                                     Asian         6    12 0.0054397099 ## 17:                                     Asian         7    41 0.0185856754 ## 18:                                     Asian         8  1249 0.5661831369 ## 19:                                     Asian        11    30 0.0135992747 ## 20:                                     Asian        12     1 0.0004533092 ## 21:                                     Asian        13   141 0.0639165911 ## 22:                                     Asian        14     7 0.0031731641 ## 23: Native Hawaiian or other Pacific Islander         1    29 0.4531250000 ## 24: Native Hawaiian or other Pacific Islander         6     1 0.0156250000 ## 25: Native Hawaiian or other Pacific Islander         8    34 0.5312500000 ## 26:                                     White         1  2934 0.3034753827 ## 27:                                     White         2   242 0.0250310302 ## 28:                                     White         3     3 0.0003103020 ## 29:                                     White         4    26 0.0026892842 ## 30:                                     White         5     3 0.0003103020 ## 31:                                     White         6    36 0.0037236243 ## 32:                                     White         7    59 0.0061026065 ## 33:                                     White         8  5765 0.5962970625 ## 34:                                     White        10    14 0.0014480761 ## 35:                                     White        11    37 0.0038270583 ## 36:                                     White        12     8 0.0008274721 ## 37:                                     White        13   516 0.0533719487 ## 38:                                     White        14    25 0.0025858502 ## 39:                               Two or more         1   243 0.4111675127 ## 40:                               Two or more         2    10 0.0169204738 ## 41:                               Two or more         6     6 0.0101522843 ## 42:                               Two or more         8   270 0.4568527919 ## 43:                               Two or more        11     2 0.0033840948 ## 44:                               Two or more        13    60 0.1015228426 ## 45:                                Other race         1    51 0.2931034483 ## 46:                                Other race         5     1 0.0057471264 ## 47:                                Other race         6     1 0.0057471264 ## 48:                                Other race         8   104 0.5977011494 ## 49:                                Other race        11     3 0.0172413793 ## 50:                                Other race        13    13 0.0747126437 ## 51:                                Other race        14     1 0.0057471264 ## 52:                      Prefer not to answer         1   358 0.3455598456 ## 53:                      Prefer not to answer         2    39 0.0376447876 ## 54:                      Prefer not to answer         3     3 0.0028957529 ## 55:                      Prefer not to answer         4     5 0.0048262548 ## 56:                      Prefer not to answer         5     1 0.0009652510 ## 57:                      Prefer not to answer         6     6 0.0057915058 ## 58:                      Prefer not to answer         7     2 0.0019305019 ## 59:                      Prefer not to answer         8   548 0.5289575290 ## 60:                      Prefer not to answer        11     4 0.0038610039 ## 61:                      Prefer not to answer        13    69 0.0666023166 ## 62:                      Prefer not to answer        14     1 0.0009652510 ##                                          race mode_type count         prop ##  ## $wtd ##                                          race mode_type count         prop ##                                        <fctr>     <int> <int>        <num> ##  1:                 African American or Black         1   146 0.3905712667 ##  2:                 African American or Black         3     4 0.0126026621 ##  3:                 African American or Black         4     1 0.0023516203 ##  4:                 African American or Black         6     1 0.0043795768 ##  5:                 African American or Black         7     1 0.0023566776 ##  6:                 African American or Black         8   180 0.4284500546 ##  7:                 African American or Black        11     3 0.0044149775 ##  8:                 African American or Black        13    53 0.1548731642 ##  9:          American Indian or Alaska Native         1     7 0.1450820029 ## 10:          American Indian or Alaska Native         8    36 0.7467699134 ## 11:          American Indian or Alaska Native        13     3 0.1081480837 ## 12:                                     Asian         1   689 0.3051702848 ## 13:                                     Asian         2    32 0.0166409377 ## 14:                                     Asian         4     2 0.0007410683 ## 15:                                     Asian         5     2 0.0009939142 ## 16:                                     Asian         6    12 0.0064949215 ## 17:                                     Asian         7    41 0.0190691777 ## 18:                                     Asian         8  1249 0.5658590003 ## 19:                                     Asian        11    30 0.0161453597 ## 20:                                     Asian        12     1 0.0002583625 ## 21:                                     Asian        13   141 0.0651487332 ## 22:                                     Asian        14     7 0.0034782401 ## 23: Native Hawaiian or other Pacific Islander         1    29 0.4204865855 ## 24: Native Hawaiian or other Pacific Islander         6     1 0.0239513996 ## 25: Native Hawaiian or other Pacific Islander         8    34 0.5555620149 ## 26:                                     White         1  2934 0.3041972747 ## 27:                                     White         2   242 0.0243721513 ## 28:                                     White         3     3 0.0002999808 ## 29:                                     White         4    26 0.0023771364 ## 30:                                     White         5     3 0.0003299170 ## 31:                                     White         6    36 0.0037343793 ## 32:                                     White         7    59 0.0062000853 ## 33:                                     White         8  5765 0.5978921238 ## 34:                                     White        10    14 0.0020777749 ## 35:                                     White        11    37 0.0035603367 ## 36:                                     White        12     8 0.0007298226 ## 37:                                     White        13   516 0.0518479582 ## 38:                                     White        14    25 0.0023810590 ## 39:                               Two or more         1   243 0.4165906782 ## 40:                               Two or more         2    10 0.0142847408 ## 41:                               Two or more         6     6 0.0099882853 ## 42:                               Two or more         8   270 0.4517833211 ## 43:                               Two or more        11     2 0.0033521438 ## 44:                               Two or more        13    60 0.1040008307 ## 45:                                Other race         1    51 0.2979641649 ## 46:                                Other race         5     1 0.0100404948 ## 47:                                Other race         6     1 0.0073445387 ## 48:                                Other race         8   104 0.5797193099 ## 49:                                Other race        11     3 0.0183946303 ## 50:                                Other race        13    13 0.0852055250 ## 51:                                Other race        14     1 0.0013313363 ## 52:                      Prefer not to answer         1   358 0.3525751627 ## 53:                      Prefer not to answer         2    39 0.0415813644 ## 54:                      Prefer not to answer         3     3 0.0038718201 ## 55:                      Prefer not to answer         4     5 0.0039204752 ## 56:                      Prefer not to answer         5     1 0.0004790652 ## 57:                      Prefer not to answer         6     6 0.0046241022 ## 58:                      Prefer not to answer         7     2 0.0011302945 ## 59:                      Prefer not to answer         8   548 0.5225422644 ## 60:                      Prefer not to answer        11     4 0.0023429284 ## 61:                      Prefer not to answer        13    69 0.0657105323 ## 62:                      Prefer not to answer        14     1 0.0012219906 ##                                          race mode_type count         prop ##          prop_se     est     est_se ##            <num>   <num>      <num> ##  1: 0.0282906311   77230  7202.7558 ##  2: 0.0066885378    2492  1331.4537 ##  3: 0.0023500849     465   465.0000 ##  4: 0.0043678202     866   866.0000 ##  5: 0.0023551269     466   466.0000 ##  6: 0.0284115856   84720  7290.3594 ##  7: 0.0026365365     873   521.1549 ##  8: 0.0211938329   30624  4566.8926 ##  9: 0.0583277190    3335  1444.1155 ## 10: 0.0758001371   17166  3291.4253 ## 11: 0.0588410966    2486  1452.3590 ## 12: 0.0112751847  331909 14406.1991 ## 13: 0.0031684441   18099  3472.2550 ## 14: 0.0005374246     806   584.5719 ## 15: 0.0007866950    1081   856.0153 ## 16: 0.0020499103    7064  2236.5492 ## 17: 0.0033706757   20740  3697.6048 ## 18: 0.0121719999  615439 19446.9203 ## 19: 0.0031535242   17560  3455.7525 ## 20: 0.0002583829     281   281.0000 ## 21: 0.0060809393   70857  6815.9100 ## 22: 0.0015826609    3783  1724.5385 ## 23: 0.0704335805   14466  3130.6398 ## 24: 0.0236229664     824   824.0000 ## 25: 0.0710921620   19113  3722.8271 ## 26: 0.0054007054 1473423 28836.5035 ## 27: 0.0017956576  118050  8747.8272 ## 28: 0.0002038448    1453   987.4254 ## 29: 0.0005430718   11514  2631.4671 ## 30: 0.0002123764    1598  1028.7568 ## 31: 0.0007110315   18088  3447.0041 ## 32: 0.0009039482   30031  4384.2723 ## 33: 0.0057494999 2895976 36610.7988 ## 34: 0.0005799747   10064  2811.2886 ## 35: 0.0006760499   17245  3276.7898 ## 36: 0.0003057402    3535  1481.0996 ## 37: 0.0025833876  251133 12671.2132 ## 38: 0.0005582162   11533  2705.1327 ## 39: 0.0231395983  128377  9252.3454 ## 40: 0.0057348621    4402  1780.3574 ## 41: 0.0043327331    3078  1340.5366 ## 42: 0.0233781385  139222  9656.1625 ## 43: 0.0023683811    1033   730.6294 ## 44: 0.0146015906   32049  4757.0427 ## 45: 0.0401920453   26857  4365.3044 ## 46: 0.0099774410     905   905.0000 ## 47: 0.0073183153     662   662.0000 ## 48: 0.0429156650   52253  5852.2429 ## 49: 0.0107967923    1658   980.6406 ## 50: 0.0239410741    7680  2253.0918 ## 51: 0.0013345935     120   120.0000 ## 52: 0.0170273904  188407 11212.9544 ## 53: 0.0072538913   22220  3958.7011 ## 54: 0.0022959360    2069  1229.3224 ## 55: 0.0019000907    2095  1016.4577 ## 56: 0.0004791561     256   256.0000 ## 57: 0.0023053628    2471  1234.3289 ## 58: 0.0010238556     604   547.2946 ## 59: 0.0177823597  279233 13535.4928 ## 60: 0.0016165519    1252   864.6572 ## 61: 0.0087882893   35114  4848.2740 ## 62: 0.0012213144     653   653.0000 ##          prop_se     est     est_se ##  ## $weight_name ## [1] \"trip_weight\" if(FALSE){      DT = hts_prep_data(summarize_var = 'age',                    summarize_by = 'study_year',                    variables_dt = variable_list,                    data = test_data)    mode_by_race_summary = hts_summary(prepped_dt = DT$cat,                                     summarize_var = 'age',                                    summarize_by = 'study_year',                                    summarize_vartype = 'categorical',                                    weighted = TRUE,                                    wtname = 'trip_weight',                                    se = TRUE)    } DT = hts_prep_data(summarize_var = 'race',                    summarize_by = 'mode_type',                    variables_dt = variable_list,                    data = test_data)  mode_by_race_summary = hts_summary(prepped_dt = DT$cat,                                     summarize_var = 'race',                                    summarize_by = 'mode_type',                                    summarize_vartype = 'checkbox',                                    weighted = TRUE,                                    wtname = 'trip_weight',                                    se = TRUE)   mode_by_race_summary$summary ## $unwtd ## Key: <mode_type> ##     mode_type                                      race count        prop ##         <int>                                    <fctr> <int>       <num> ##  1:         1                 African American or Black   190 0.042629571 ##  2:         1          American Indian or Alaska Native   100 0.022436617 ##  3:         1                                     Asian   808 0.181287862 ##  4:         1 Native Hawaiian or other Pacific Islander    34 0.007628450 ##  5:         1                                     White  3174 0.712138210 ##  6:         1                                Other race   105 0.023558447 ##  7:         1                      Prefer not to answer   358 0.080323087 ##  8:         2                                     Asian    38 0.117647059 ##  9:         2                                     White   252 0.780185759 ## 10:         2                                Other race     4 0.012383901 ## 11:         2                      Prefer not to answer    39 0.120743034 ## 12:         3                 African American or Black     4 0.400000000 ## 13:         3                                     White     3 0.300000000 ## 14:         3                      Prefer not to answer     3 0.300000000 ## 15:         4                 African American or Black     1 0.029411765 ## 16:         4                                     Asian     2 0.058823529 ## 17:         4                                     White    26 0.764705882 ## 18:         4                      Prefer not to answer     5 0.147058824 ## 19:         5                                     Asian     2 0.285714286 ## 20:         5                                     White     3 0.428571429 ## 21:         5                                Other race     1 0.142857143 ## 22:         5                      Prefer not to answer     1 0.142857143 ## 23:         6                 African American or Black     1 0.015873016 ## 24:         6          American Indian or Alaska Native     1 0.015873016 ## 25:         6                                     Asian    15 0.238095238 ## 26:         6 Native Hawaiian or other Pacific Islander     1 0.015873016 ## 27:         6                                     White    42 0.666666667 ## 28:         6                                Other race     3 0.047619048 ## 29:         6                      Prefer not to answer     6 0.095238095 ## 30:         7                 African American or Black     1 0.009708738 ## 31:         7                                     Asian    41 0.398058252 ## 32:         7                                     White    59 0.572815534 ## 33:         7                      Prefer not to answer     2 0.019417476 ## 34:         8                 African American or Black   202 0.024676277 ## 35:         8          American Indian or Alaska Native    92 0.011238700 ## 36:         8                                     Asian  1405 0.171634498 ## 37:         8 Native Hawaiian or other Pacific Islander    76 0.009284144 ## 38:         8                                     White  5991 0.731859272 ## 39:         8                                Other race   144 0.017591009 ## 40:         8                      Prefer not to answer   548 0.066943562 ## 41:        10                                     White    14 1.000000000 ## 42:        11                 African American or Black     5 0.063291139 ## 43:        11          American Indian or Alaska Native     2 0.025316456 ## 44:        11                                     Asian    30 0.379746835 ## 45:        11                                     White    39 0.493670886 ## 46:        11                                Other race     3 0.037974684 ## 47:        11                      Prefer not to answer     4 0.050632911 ## 48:        12                                     Asian     1 0.111111111 ## 49:        12                                     White     8 0.888888889 ## 50:        13                 African American or Black    70 0.081871345 ## 51:        13          American Indian or Alaska Native    40 0.046783626 ## 52:        13                                     Asian   153 0.178947368 ## 53:        13                                     White   576 0.673684211 ## 54:        13                                Other race    29 0.033918129 ## 55:        13                      Prefer not to answer    69 0.080701754 ## 56:        14                                     Asian     7 0.205882353 ## 57:        14                                     White    25 0.735294118 ## 58:        14                                Other race     1 0.029411765 ## 59:        14                      Prefer not to answer     1 0.029411765 ##     mode_type                                      race count        prop ##  ## $wtd ## Key: <mode_type> ##     mode_type                                      race count        prop ##         <int>                                    <fctr> <int>       <num> ##  1:         1                 African American or Black   190 0.042830138 ##  2:         1          American Indian or Alaska Native   100 0.022560566 ##  3:         1                                     Asian   808 0.178194870 ##  4:         1 Native Hawaiian or other Pacific Islander    34 0.007312376 ##  5:         1                                     White  3174 0.713499174 ##  6:         1                                Other race   105 0.022035166 ##  7:         1                      Prefer not to answer   358 0.083960189 ##  8:         2                                     Asian    38 0.129482525 ##  9:         2                                     White   252 0.752296171 ## 10:         2                                Other race     4 0.008754631 ## 11:         2                      Prefer not to answer    39 0.136510804 ## 12:         3                 African American or Black     4 0.414366478 ## 13:         3                                     White     3 0.241602927 ## 14:         3                      Prefer not to answer     3 0.344030595 ## 15:         4                 African American or Black     1 0.031250000 ## 16:         4                                     Asian     2 0.054166667 ## 17:         4                                     White    26 0.773790323 ## 18:         4                      Prefer not to answer     5 0.140793011 ## 19:         5                                     Asian     2 0.281510417 ## 20:         5                                     White     3 0.416145833 ## 21:         5                                Other race     1 0.235677083 ## 22:         5                      Prefer not to answer     1 0.066666667 ## 23:         6                 African American or Black     1 0.026200345 ## 24:         6          American Indian or Alaska Native     1 0.014854930 ## 25:         6                                     Asian    15 0.268689680 ## 26:         6 Native Hawaiian or other Pacific Islander     1 0.024929658 ## 27:         6                                     White    42 0.640365474 ## 28:         6                                Other race     3 0.043324358 ## 29:         6                      Prefer not to answer     6 0.074758721 ## 30:         7                 African American or Black     1 0.008989024 ## 31:         7                                     Asian    41 0.400069443 ## 32:         7                                     White    59 0.579290523 ## 33:         7                      Prefer not to answer     2 0.011651010 ## 34:         8                 African American or Black   202 0.023215006 ## 35:         8          American Indian or Alaska Native    92 0.011707183 ## 36:         8                                     Asian  1405 0.169542119 ## 37:         8 Native Hawaiian or other Pacific Islander    76 0.009741607 ## 38:         8                                     White  5991 0.734048854 ## 39:         8                                Other race   144 0.017647294 ## 40:         8                      Prefer not to answer   548 0.068053789 ## 41:        10                                     White    14 1.000000000 ## 42:        11                 African American or Black     5 0.048105802 ## 43:        11          American Indian or Alaska Native     2 0.026072033 ## 44:        11                                     Asian    30 0.443199313 ## 45:        11                                     White    39 0.461321017 ## 46:        11                                Other race     3 0.041846496 ## 47:        11                      Prefer not to answer     4 0.031599404 ## 48:        12                                     Asian     1 0.073637317 ## 49:        12                                     White     8 0.926362683 ## 50:        13                 African American or Black    70 0.087972127 ## 51:        13          American Indian or Alaska Native    40 0.049955459 ## 52:        13                                     Asian   153 0.177400260 ## 53:        13                                     White   576 0.658650100 ## 54:        13                                Other race    29 0.036053616 ## 55:        13                      Prefer not to answer    69 0.081671291 ## 56:        14                                     Asian     7 0.235129592 ## 57:        14                                     White    25 0.716825160 ## 58:        14                                Other race     1 0.007458512 ## 59:        14                      Prefer not to answer     1 0.040586736 ##     mode_type                                      race count        prop ##         prop_se     est     est_se wtd_group_n ##           <num>   <num>      <num>       <int> ##  1: 0.003480119   96111  7975.0422     2244004 ##  2: 0.002542819   50626  5768.3288     2244004 ##  3: 0.006568278  399870 16186.7733     2244004 ##  4: 0.001479919   16409  3332.9169     2244004 ##  5: 0.007787283 1601095 32330.8859     2244004 ##  6: 0.002488825   49447  5643.0323     2244004 ##  7: 0.004825536  188407 11307.9346     2244004 ##  8: 0.021673410   21076  3786.3301      162771 ##  9: 0.027934367  122452  8973.4484      162771 ## 10: 0.005832891    1425   953.4106      162771 ## 11: 0.022521537   22220  3962.3508      162771 ## 12: 0.169167822    2492  1331.5545        6014 ## 13: 0.144247992    1453   987.4602        6014 ## 14: 0.164240660    2069  1229.3905        6014 ## 15: 0.030872908     465   465.0000       14880 ## 16: 0.038590666     806   584.5878       14880 ## 17: 0.076849954   11514  2632.9105       14880 ## 18: 0.064158837    2095  1016.5575       14880 ## 19: 0.189992252    1081   856.0307        3840 ## 20: 0.208480521    1598  1028.8007        3840 ## 21: 0.198601443     905   905.0000        3840 ## 22: 0.068252522     256   256.0000        3840 ## 23: 0.025775549     866   866.0000       33053 ## 24: 0.014784403     491   491.0000       33053 ## 25: 0.063926195    8881  2490.2346       33053 ## 26: 0.024557643     824   824.0000       33053 ## 27: 0.069091983   21166  3700.9843       33053 ## 28: 0.026555002    1432   893.3361       33053 ## 29: 0.036046741    2471  1234.4411       33053 ## 30: 0.008964261     466   466.0000       51841 ## 31: 0.054902198   20740  3701.0089       51841 ## 32: 0.055185761   30031  4390.3553       51841 ## 33: 0.010514366     604   547.2982       51841 ## 34: 0.001873969   95254  7769.5082     4103122 ## 35: 0.001398626   48036  5771.9859     4103122 ## 36: 0.004762250  695652 21306.4777     4103122 ## 37: 0.001276091   39971  5261.1217     4103122 ## 38: 0.005617560 3011892 43812.4684     4103122 ## 39: 0.001666708   72409  6895.2034     4103122 ## 40: 0.003230268  279233 13708.1607     4103122 ## 41: 0.000000000   10064  2812.2928       10064 ## 42: 0.022381920    1906   897.4773       39621 ## 43: 0.018255748    1033   730.6515       39621 ## 44: 0.063430268   17560  3458.3451       39621 ## 45: 0.063068208   18278  3359.7885       39621 ## 46: 0.024280629    1658   980.6957       39621 ## 47: 0.021499876    1252   864.6859       39621 ## 48: 0.073962514     281   281.0000        3816 ## 49: 0.073962514    3535  1481.3100        3816 ## 50: 0.011247084   37823  5066.8771      429943 ## 51: 0.008727320   21478  3852.7941      429943 ## 52: 0.015009542   76272  7108.1562      429943 ## 53: 0.018695102  283182 13670.8385      429943 ## 54: 0.007444624   15501  3261.5427      429943 ## 55: 0.010821499   35114  4855.8112      429943 ## 56: 0.091554896    3783  1724.7373       16089 ## 57: 0.095130908   11533  2706.5373       16089 ## 58: 0.007557031     120   120.0000       16089 ## 59: 0.039773659     653   653.0000       16089 ##         prop_se     est     est_se wtd_group_n ##  ## $weight_name ## [1] \"trip_weight\" DT = hts_prep_data(summarize_var = 'mode_type',                    summarize_by = c('race', 'ethnicity'),                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))  mode_by_race_ethnicity_summary = hts_summary(prepped_dt = DT$cat,                                               summarize_var = 'mode_type',                                              summarize_by = c('race', 'ethnicity'),                                              summarize_vartype = 'categorical',                                              weighted = TRUE,                                              wtname = 'trip_weight',                                              se = TRUE)   head(mode_by_race_ethnicity_summary$summary$wtd, 10) ##                          race                                   ethnicity ##                        <fctr>                                      <fctr> ##  1: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  2: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  3: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  4: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  5: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  6: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  7: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  8: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  9: African American or Black Another Hispanic, Latino, or Spanish origin ## 10: African American or Black Another Hispanic, Latino, or Spanish origin ##     mode_type count        prop     prop_se   est    est_se ##         <int> <int>       <num>       <num> <num>     <num> ##  1:         1   143 0.395021634 0.028786577 75777 7152.8334 ##  2:         3     4 0.012990669 0.006892942  2492 1331.4537 ##  3:         4     1 0.002424021 0.002422381   465  465.0000 ##  4:         6     1 0.004514414 0.004501905   866  866.0000 ##  5:         7     1 0.002429234 0.002427578   466  466.0000 ##  6:         8   173 0.418427775 0.028683214 80267 7061.2787 ##  7:        11     3 0.004550904 0.002717711   873  521.1549 ##  8:        13    53 0.159641349 0.021778953 30624 4566.8926 ##  9:         1     2 0.270056497 0.179646281   956  696.6059 ## 10:         8     4 0.729943503 0.179646281  2584 1413.9469"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"calculating-trip-rates","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Calculating trip rates","title":"Getting Started","text":"hts_summary can also used calculate trip rates.","code":"DT = hts_prep_triprate(summarize_by = 'employment',                        variables_dt = variable_list,                        trip_name = 'trip',                        day_name = 'day',                        hts_data = list('hh' = hh,                                        'person' = person,                                        'day' = day,                                        'trip' = trip,                                        'vehicle' = vehicle))  trip_rate_by_employment_summary = hts_summary(prepped_dt = DT$num,                                                summarize_var = 'num_trips_wtd',                                               summarize_by = 'employment',                                               summarize_vartype = 'numeric',                                               weighted = TRUE,                                               wtname = 'day_weight',                                               se = TRUE)  head(trip_rate_by_employment_summary$summary$wtd, 10) ##    employment count   min      max     mean    mean_se   median ##         <int> <int> <num>    <num>    <num>      <num>    <num> ## 1:          1  1858     0 62.56075 3.770511 0.08744228 2.562929 ## 2:          2   333     0 49.51000 4.518665 0.26799833 3.027821 ## 3:          3   251     0 63.59574 3.750584 0.25813849 2.478788 ## 4:          5  1000     0 59.23973 3.394865 0.12525765 2.021469 ## 5:          6   164     0 45.62069 3.144907 0.26774656 2.197662 ## 6:          7    52     0 32.36364 4.070054 0.56907009 2.720099 ## 7:          8    14     0 21.92248 2.728166 0.92991111 0.904000 ## 8:        995   513     0 58.78947 2.098985 0.10435428 1.272311"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"labeling-values","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Labeling Values","title":"Getting Started","text":"label values can use factorize_column.","code":"trip_rate_by_employment_summary$summary$wtd$employment =  factorize_column(   trip_rate_by_employment_summary$summary$wtd$employment,   'employment',   value_labels,   variable_colname = 'variable',   value_colname = 'value',   value_label_colname = 'label',   value_order_colname = 'val_order' )   trip_rate_by_employment_summary$summary$wtd ##                                                                             employment ##                                                                                  <ord> ## 1:                                           Employed full-time (35+ hours/week, paid) ## 2:                                 Employed part-time (fewer than 35 hours/week, paid) ## 3:                                                                       Self-employed ## 4: Not employed and not looking for work (e.g., retired, stay-at-home parent, student) ## 5:                                                     Unemployed and looking for work ## 6:                                                          Unpaid volunteer or intern ## 7:               Employed, but not currently working (e.g., on leave, furloughed 100%) ## 8:                                                                    Missing Response ##    count   min      max     mean    mean_se   median ##    <int> <num>    <num>    <num>      <num>    <num> ## 1:  1858     0 62.56075 3.770511 0.08744228 2.562929 ## 2:   333     0 49.51000 4.518665 0.26799833 3.027821 ## 3:   251     0 63.59574 3.750584 0.25813849 2.478788 ## 4:  1000     0 59.23973 3.394865 0.12525765 2.021469 ## 5:   164     0 45.62069 3.144907 0.26774656 2.197662 ## 6:    52     0 32.36364 4.070054 0.56907009 2.720099 ## 7:    14     0 21.92248 2.728166 0.92991111 0.904000 ## 8:   513     0 58.78947 2.098985 0.10435428 1.272311"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"creating-visuals-using-hts_summary-output","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Creating Visuals using hts_summary output","title":"Getting Started","text":"hts_summary creates outputs can easily used create visuals.","code":"library(ggplot2) ## Warning: package 'ggplot2' was built under R version 4.3.2 p = ggplot(   trip_rate_by_employment_summary$summary$wtd,    aes(x = mean, y = employment)) +   geom_bar(stat = 'identity') +    geom_errorbar(     aes(xmin = (mean - mean_se),          xmax = (mean + mean_se),         width = .2)   ) +    labs(x = 'Mean Trip Rate',        y = 'Employment')  +   scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 50),                    limits = rev)      print(p)"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a01_getting_started.html","id":"summarizing-a-new-variable","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Summarizing a new variable","title":"Getting Started","text":"summarize new variable hts_summary must first added variable_list value_labels. example creating new variable called hh_size want summarize.","code":"test_data$hh[, hh_size := ifelse(num_people < 4, 0, 1)]  variable_list = rbind(variable_list,                       data.table(variable = 'hh_size',                                  is_checkbox = 0,                                  hh = 1,                                  person = 0,                                  day = 0,                                  trip = 0,                                  vehicle = 0,                                  description = 'Household size',                                  data_type = 'integer/categorical',                                  shared_name = 'hh_size')                       )  value_labels = rbind(value_labels,                      data.table(variable = rep('hh_size', 2),                                 value = c(0,1),                                 label = c('Small household', 'Large household'),                                 val_order = c(214:215))                       )  DT = hts_prep_data(summarize_var = 'hh_size',                    variables_dt = variable_list,                    data = test_data)  hh_size_summary = hts_summary(prepped_dt = DT$cat,                                summarize_var = 'hh_size',                               summarize_vartype = 'categorical',                               weighted = TRUE,                               wtname = 'hh_weight')  factorize_df(df = hh_size_summary$summary$wtd, value_labels, value_label_colname = 'label') ##            hh_size count      prop    est ##              <ord> <int>     <num>  <int> ## 1: Small household   881 0.8786678 448161 ## 2: Large household   119 0.1213322  61885"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a02_geographic_summaries.html","id":"creating-summaries-by-geographic-variables-using-hts_summary","dir":"Articles","previous_headings":"","what":"Creating summaries by geographic variables using hts_summary","title":"Creating user-specified geographic summaries","text":"hts_summary can summarize geographic variables.","code":"DT = hts_prep_data(summarize_var = 'income_detailed', summarize_by = 'home_county', data = test_data)  output = hts_summary(prepped_dt = DT$cat, summarize_var = 'income_detailed', summarize_by = 'home_county')  factorize_df(output$summary$unwtd, vals_df = value_labels, value_label_colname = 'label') ##      home_county      income_detailed count       prop ##            <ord>                <ord> <int>      <num> ##  1: Arike County        Under $10,000    14 0.04166667 ##  2: Arike County      $10,000-$24,999    33 0.09821429 ##  3: Arike County      $25,000-$34,999    15 0.04464286 ##  4: Arike County      $35,000-$49,999    15 0.04464286 ##  5: Arike County      $50,000-$74,999    35 0.10416667 ##  6: Arike County      $75,000-$99,999    38 0.11309524 ##  7: Arike County    $100,000-$149,999    62 0.18452381 ##  8: Arike County    $150,000-$199,999    26 0.07738095 ##  9: Arike County    $200,000-$249,999    18 0.05357143 ## 10: Arike County     $250,000 or more    38 0.11309524 ## 11: Arike County Prefer not to answer    42 0.12500000 ## 12: Clark County        Under $10,000    16 0.04878049 ## 13: Clark County      $10,000-$24,999    20 0.06097561 ## 14: Clark County      $25,000-$34,999    14 0.04268293 ## 15: Clark County      $35,000-$49,999    25 0.07621951 ## 16: Clark County      $50,000-$74,999    36 0.10975610 ## 17: Clark County      $75,000-$99,999    35 0.10670732 ## 18: Clark County    $100,000-$149,999    53 0.16158537 ## 19: Clark County    $150,000-$199,999    43 0.13109756 ## 20: Clark County    $200,000-$249,999    21 0.06402439 ## 21: Clark County     $250,000 or more    26 0.07926829 ## 22: Clark County Prefer not to answer    39 0.11890244 ## 23: Moore County        Under $10,000    11 0.03273810 ## 24: Moore County      $10,000-$24,999    22 0.06547619 ## 25: Moore County      $25,000-$34,999     9 0.02678571 ## 26: Moore County      $35,000-$49,999    24 0.07142857 ## 27: Moore County      $50,000-$74,999    31 0.09226190 ## 28: Moore County      $75,000-$99,999    36 0.10714286 ## 29: Moore County    $100,000-$149,999    68 0.20238095 ## 30: Moore County    $150,000-$199,999    30 0.08928571 ## 31: Moore County    $200,000-$249,999    14 0.04166667 ## 32: Moore County     $250,000 or more    41 0.12202381 ## 33: Moore County Prefer not to answer    50 0.14880952 ##      home_county      income_detailed count       prop"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/a02_geographic_summaries.html","id":"using-spatial_join-to-join-together-separate-shapefiles","dir":"Articles","previous_headings":"","what":"Using spatial_join to join together separate shapefiles","title":"Creating user-specified geographic summaries","text":"spatial_join can link together multiple geographies.","code":"hh = join_spatial(     hh,     dplyr::select(states, home_state = NAME),     id_col = 'hh_id',     lon_col = 'home_lon',     lat_col = 'home_lat',     largest = TRUE)  hh[, .N, home_state] ##         home_state     N ##             <char> <int> ##  1:         Kansas   112 ##  2:       Arkansas    89 ##  3:      Tennessee    92 ##  4:       Illinois    51 ##  5: South Carolina    37 ##  6:        Indiana    36 ##  7:           Ohio    34 ##  8:        Georgia    36 ##  9:       Missouri   123 ## 10:       Oklahoma   120 ## 11:       Kentucky    48 ## 12:        Alabama    38 ## 13:          Texas    58 ## 14:    Mississippi    29 ## 15:  West Virginia    42 ## 16: North Carolina    39 ## 17:       Virginia    15 ## 18:   Pennsylvania     1"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"about-travelsurveytools","dir":"Articles","previous_headings":"","what":"About TravelSurveyTools","title":"Getting Started","text":"travelSurveyTools package provides tools R users aid use data household travel surveys. possible uses include creating custom cross tabs, labeling data, calculating trip rates.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"data-assumptions","dir":"Articles","previous_headings":"","what":"Data Assumptions","title":"Getting Started","text":"travelSurveyTools assumes data structure shown . reflect structure data","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"hts_data","dir":"Articles","previous_headings":"Data Assumptions","what":"hts_data","title":"Getting Started","text":"hts_data list five core tables:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"hh","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"hh","title":"Getting Started","text":"Household dataset hh_id: 8 digit household ID survey variables asked household level hh_weight: household weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"person","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"person","title":"Getting Started","text":"Person dataset hh_id: 8 digit household ID person_id: 10 digit person ID survey variables asked person level person_weight: person weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"day","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"day","title":"Getting Started","text":"Day dataset hh_id: 8 digit household ID person_id: 10 digit person ID day_id: 12 digit day ID survey variable asked day level day_weight: day weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"trip","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"trip","title":"Getting Started","text":"Trip dataset hh_id: 8 digit household ID person_id: 10 digit person ID day_id: 12 digit day ID trip_id: 13 digit trip ID survey variables asked trip level trip_weight: trip weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"vehicle","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"vehicle","title":"Getting Started","text":"Vehicle dataset hh_id: 8 digit household ID vehicle_id: 10 digit vehicle ID survey responses asked vehicle level hh_weight: household weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"codebook","dir":"Articles","previous_headings":"Data Assumptions","what":"Codebook","title":"Getting Started","text":"addition data household travel survey. codebook also required. codebook assumed two parts:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"variable_list","dir":"Articles","previous_headings":"Data Assumptions > Codebook","what":"variable_list","title":"Getting Started","text":"dataset containing information variables existing hh, person, day, trip, vehicle tables. variables follows: variable: Name variable is_checkbox: variable ‘Select Apply’ question hh: variable exists hh table person: variable exists person table day: variable exists day table trip: variable exists trip table vehicle: variable exists vehicle table location: variable exists location table data_type: Data type variable description: description variable logic: Conditions variable value shared_name: shared name checkbox variable variable name non-checkbox variables","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"value_labels","dir":"Articles","previous_headings":"Data Assumptions > Codebook","what":"value_labels","title":"Getting Started","text":"dataset containing values variables found variable_list variables follows: variable: Name variable value: numeric value variable label: numeric value variable represents label_value: value concatenated label (e.g., 11 85 older) val_order: order variable label appear ","code":""},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"prepping-the-data","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Prepping the Data","title":"Getting Started","text":"order create summaries data first need prepare data. can using hts_prep_data. return categorical (cat) numeric (num) (applicable) prepped data table can used create summaries. Numeric variables automatically binned hts_prep_data create categorical summaries. can make categorical summary numeric variable using hts_summary. Additionally, numeric variables can create numeric summaries.","code":"library(travelSurveyTools) library(data.table) ## Warning: package 'data.table' was built under R version 4.3.2 library(srvyr) ## Warning: package 'srvyr' was built under R version 4.3.2 # Load data data(\"test_data\") data(\"variable_list\") data(\"value_labels\")  DT = hts_prep_data(summarize_var = 'speed_mph',                    variables_dt = variable_list,                    data = test_data) speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = FALSE)  speed_cat_summary$summary ## $unwtd ## Key: <speed_mph> ##     speed_mph count       prop ##        <fctr> <int>      <num> ## 1:  1 or less   720 0.04902962 ## 2:        1-9  6825 0.46475996 ## 3:       9-17  3494 0.23792986 ## 4:      17-25  1995 0.13585291 ## 5:      25-33   868 0.05910793 ## 6:      33-41   414 0.02819203 ## 7: 41 or more   369 0.02512768 speed_num_summary = hts_summary(prepped_dt = DT$num,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'numeric',                                 weighted = FALSE)  speed_num_summary$summary ## $unwtd ##    count   min      max     mean  median ##    <int> <num>    <num>    <num>   <num> ## 1: 14685     0 112.9918 11.83172 8.63421"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"using-weighted-data","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Using Weighted Data","title":"Getting Started","text":"Additionally, can use weighted data setting weighted = TRUE specifying name weight used (wtname).","code":"speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = TRUE,                                 wtname = 'trip_weight')  speed_cat_summary$summary ## $unwtd ## Key: <speed_mph> ##     speed_mph count       prop ##        <fctr> <int>      <num> ## 1:  1 or less   720 0.04902962 ## 2:        1-9  6825 0.46475996 ## 3:       9-17  3494 0.23792986 ## 4:      17-25  1995 0.13585291 ## 5:      25-33   868 0.05910793 ## 6:      33-41   414 0.02819203 ## 7: 41 or more   369 0.02512768 ##  ## $wtd ##     speed_mph count       prop     est ##        <fctr> <int>      <num>   <int> ## 1:  1 or less   720 0.05017047  370818 ## 2:        1-9  6825 0.46380595 3428064 ## 3:       9-17  3494 0.23966211 1771381 ## 4:      17-25  1995 0.13432492  992817 ## 5:      25-33   868 0.05766713  426227 ## 6:      33-41   414 0.02801374  207054 ## 7: 41 or more   369 0.02635567  194799 ##  ## $weight_name ## [1] \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"calculating-standard-errors","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Calculating Standard Errors","title":"Getting Started","text":"Additionally, specifying se = TRUE can calculate standard errors.","code":"speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = TRUE,                                 wtname = 'trip_weight',                                 se = TRUE)  speed_cat_summary$summary ## $unwtd ## Key: <speed_mph> ##     speed_mph count       prop ##        <fctr> <int>      <num> ## 1:  1 or less   720 0.04902962 ## 2:        1-9  6825 0.46475996 ## 3:       9-17  3494 0.23792986 ## 4:      17-25  1995 0.13585291 ## 5:      25-33   868 0.05910793 ## 6:      33-41   414 0.02819203 ## 7: 41 or more   369 0.02512768 ##  ## $wtd ##     speed_mph count       prop     prop_se     est   est_se ##        <fctr> <int>      <num>       <num>   <num>    <num> ## 1:  1 or less   720 0.05017047 0.002079083  370818 15469.78 ## 2:        1-9  6825 0.46380595 0.004737688 3428064 38508.63 ## 3:       9-17  3494 0.23966211 0.004069031 1771381 31295.73 ## 4:      17-25  1995 0.13432492 0.003228756  992817 24287.87 ## 5:      25-33   868 0.05766713 0.002192303  426227 16305.76 ## 6:      33-41   414 0.02801374 0.001560836  207054 11574.44 ## 7: 41 or more   369 0.02635567 0.001548421  194799 11492.05 ##  ## $weight_name ## [1] \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"summarizing-two-variables","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Summarizing Two Variables","title":"Getting Started","text":"want summarize variable another variable (e.g., mode type person’s race, mode_type person’s ethnicity, income study year) can use summarize_by argument. want summarize select apply variable, can set summarize_vartype checkbox. summarize_by can used unlimited amount variables. use one summarize_by variable pass list argument.","code":"DT = hts_prep_data(summarize_var = 'mode_type',                    summarize_by = 'race',                    variables_dt = variable_list,                    data = test_data)  mode_by_race_summary = hts_summary(prepped_dt = DT$cat,                                     summarize_var = 'mode_type',                                    summarize_by = 'race',                                    summarize_vartype = 'categorical',                                    weighted = TRUE,                                    wtname = 'trip_weight',                                    se = TRUE)   mode_by_race_summary$summary ## $unwtd ## Key: <race> ##                                          race mode_type count         prop ##                                        <fctr>     <int> <int>        <num> ##  1:                 African American or Black         1   146 0.3753213368 ##  2:                 African American or Black         3     4 0.0102827763 ##  3:                 African American or Black         4     1 0.0025706941 ##  4:                 African American or Black         6     1 0.0025706941 ##  5:                 African American or Black         7     1 0.0025706941 ##  6:                 African American or Black         8   180 0.4627249357 ##  7:                 African American or Black        11     3 0.0077120823 ##  8:                 African American or Black        13    53 0.1362467866 ##  9:          American Indian or Alaska Native         1     7 0.1521739130 ## 10:          American Indian or Alaska Native         8    36 0.7826086957 ## 11:          American Indian or Alaska Native        13     3 0.0652173913 ## 12:                                     Asian         1   689 0.3123300091 ## 13:                                     Asian         2    32 0.0145058930 ## 14:                                     Asian         4     2 0.0009066183 ## 15:                                     Asian         5     2 0.0009066183 ## 16:                                     Asian         6    12 0.0054397099 ## 17:                                     Asian         7    41 0.0185856754 ## 18:                                     Asian         8  1249 0.5661831369 ## 19:                                     Asian        11    30 0.0135992747 ## 20:                                     Asian        12     1 0.0004533092 ## 21:                                     Asian        13   141 0.0639165911 ## 22:                                     Asian        14     7 0.0031731641 ## 23: Native Hawaiian or other Pacific Islander         1    29 0.4531250000 ## 24: Native Hawaiian or other Pacific Islander         6     1 0.0156250000 ## 25: Native Hawaiian or other Pacific Islander         8    34 0.5312500000 ## 26:                                     White         1  2934 0.3034753827 ## 27:                                     White         2   242 0.0250310302 ## 28:                                     White         3     3 0.0003103020 ## 29:                                     White         4    26 0.0026892842 ## 30:                                     White         5     3 0.0003103020 ## 31:                                     White         6    36 0.0037236243 ## 32:                                     White         7    59 0.0061026065 ## 33:                                     White         8  5765 0.5962970625 ## 34:                                     White        10    14 0.0014480761 ## 35:                                     White        11    37 0.0038270583 ## 36:                                     White        12     8 0.0008274721 ## 37:                                     White        13   516 0.0533719487 ## 38:                                     White        14    25 0.0025858502 ## 39:                               Two or more         1   243 0.4111675127 ## 40:                               Two or more         2    10 0.0169204738 ## 41:                               Two or more         6     6 0.0101522843 ## 42:                               Two or more         8   270 0.4568527919 ## 43:                               Two or more        11     2 0.0033840948 ## 44:                               Two or more        13    60 0.1015228426 ## 45:                                Other race         1    51 0.2931034483 ## 46:                                Other race         5     1 0.0057471264 ## 47:                                Other race         6     1 0.0057471264 ## 48:                                Other race         8   104 0.5977011494 ## 49:                                Other race        11     3 0.0172413793 ## 50:                                Other race        13    13 0.0747126437 ## 51:                                Other race        14     1 0.0057471264 ## 52:                      Prefer not to answer         1   358 0.3455598456 ## 53:                      Prefer not to answer         2    39 0.0376447876 ## 54:                      Prefer not to answer         3     3 0.0028957529 ## 55:                      Prefer not to answer         4     5 0.0048262548 ## 56:                      Prefer not to answer         5     1 0.0009652510 ## 57:                      Prefer not to answer         6     6 0.0057915058 ## 58:                      Prefer not to answer         7     2 0.0019305019 ## 59:                      Prefer not to answer         8   548 0.5289575290 ## 60:                      Prefer not to answer        11     4 0.0038610039 ## 61:                      Prefer not to answer        13    69 0.0666023166 ## 62:                      Prefer not to answer        14     1 0.0009652510 ##                                          race mode_type count         prop ##  ## $wtd ##                                          race mode_type count         prop ##                                        <fctr>     <int> <int>        <num> ##  1:                 African American or Black         1   146 0.3905712667 ##  2:                 African American or Black         3     4 0.0126026621 ##  3:                 African American or Black         4     1 0.0023516203 ##  4:                 African American or Black         6     1 0.0043795768 ##  5:                 African American or Black         7     1 0.0023566776 ##  6:                 African American or Black         8   180 0.4284500546 ##  7:                 African American or Black        11     3 0.0044149775 ##  8:                 African American or Black        13    53 0.1548731642 ##  9:          American Indian or Alaska Native         1     7 0.1450820029 ## 10:          American Indian or Alaska Native         8    36 0.7467699134 ## 11:          American Indian or Alaska Native        13     3 0.1081480837 ## 12:                                     Asian         1   689 0.3051702848 ## 13:                                     Asian         2    32 0.0166409377 ## 14:                                     Asian         4     2 0.0007410683 ## 15:                                     Asian         5     2 0.0009939142 ## 16:                                     Asian         6    12 0.0064949215 ## 17:                                     Asian         7    41 0.0190691777 ## 18:                                     Asian         8  1249 0.5658590003 ## 19:                                     Asian        11    30 0.0161453597 ## 20:                                     Asian        12     1 0.0002583625 ## 21:                                     Asian        13   141 0.0651487332 ## 22:                                     Asian        14     7 0.0034782401 ## 23: Native Hawaiian or other Pacific Islander         1    29 0.4204865855 ## 24: Native Hawaiian or other Pacific Islander         6     1 0.0239513996 ## 25: Native Hawaiian or other Pacific Islander         8    34 0.5555620149 ## 26:                                     White         1  2934 0.3041972747 ## 27:                                     White         2   242 0.0243721513 ## 28:                                     White         3     3 0.0002999808 ## 29:                                     White         4    26 0.0023771364 ## 30:                                     White         5     3 0.0003299170 ## 31:                                     White         6    36 0.0037343793 ## 32:                                     White         7    59 0.0062000853 ## 33:                                     White         8  5765 0.5978921238 ## 34:                                     White        10    14 0.0020777749 ## 35:                                     White        11    37 0.0035603367 ## 36:                                     White        12     8 0.0007298226 ## 37:                                     White        13   516 0.0518479582 ## 38:                                     White        14    25 0.0023810590 ## 39:                               Two or more         1   243 0.4165906782 ## 40:                               Two or more         2    10 0.0142847408 ## 41:                               Two or more         6     6 0.0099882853 ## 42:                               Two or more         8   270 0.4517833211 ## 43:                               Two or more        11     2 0.0033521438 ## 44:                               Two or more        13    60 0.1040008307 ## 45:                                Other race         1    51 0.2979641649 ## 46:                                Other race         5     1 0.0100404948 ## 47:                                Other race         6     1 0.0073445387 ## 48:                                Other race         8   104 0.5797193099 ## 49:                                Other race        11     3 0.0183946303 ## 50:                                Other race        13    13 0.0852055250 ## 51:                                Other race        14     1 0.0013313363 ## 52:                      Prefer not to answer         1   358 0.3525751627 ## 53:                      Prefer not to answer         2    39 0.0415813644 ## 54:                      Prefer not to answer         3     3 0.0038718201 ## 55:                      Prefer not to answer         4     5 0.0039204752 ## 56:                      Prefer not to answer         5     1 0.0004790652 ## 57:                      Prefer not to answer         6     6 0.0046241022 ## 58:                      Prefer not to answer         7     2 0.0011302945 ## 59:                      Prefer not to answer         8   548 0.5225422644 ## 60:                      Prefer not to answer        11     4 0.0023429284 ## 61:                      Prefer not to answer        13    69 0.0657105323 ## 62:                      Prefer not to answer        14     1 0.0012219906 ##                                          race mode_type count         prop ##          prop_se     est     est_se ##            <num>   <num>      <num> ##  1: 0.0282906311   77230  7202.7558 ##  2: 0.0066885378    2492  1331.4537 ##  3: 0.0023500849     465   465.0000 ##  4: 0.0043678202     866   866.0000 ##  5: 0.0023551269     466   466.0000 ##  6: 0.0284115856   84720  7290.3594 ##  7: 0.0026365365     873   521.1549 ##  8: 0.0211938329   30624  4566.8926 ##  9: 0.0583277190    3335  1444.1155 ## 10: 0.0758001371   17166  3291.4253 ## 11: 0.0588410966    2486  1452.3590 ## 12: 0.0112751847  331909 14406.1991 ## 13: 0.0031684441   18099  3472.2550 ## 14: 0.0005374246     806   584.5719 ## 15: 0.0007866950    1081   856.0153 ## 16: 0.0020499103    7064  2236.5492 ## 17: 0.0033706757   20740  3697.6048 ## 18: 0.0121719999  615439 19446.9203 ## 19: 0.0031535242   17560  3455.7525 ## 20: 0.0002583829     281   281.0000 ## 21: 0.0060809393   70857  6815.9100 ## 22: 0.0015826609    3783  1724.5385 ## 23: 0.0704335805   14466  3130.6398 ## 24: 0.0236229664     824   824.0000 ## 25: 0.0710921620   19113  3722.8271 ## 26: 0.0054007054 1473423 28836.5035 ## 27: 0.0017956576  118050  8747.8272 ## 28: 0.0002038448    1453   987.4254 ## 29: 0.0005430718   11514  2631.4671 ## 30: 0.0002123764    1598  1028.7568 ## 31: 0.0007110315   18088  3447.0041 ## 32: 0.0009039482   30031  4384.2723 ## 33: 0.0057494999 2895976 36610.7988 ## 34: 0.0005799747   10064  2811.2886 ## 35: 0.0006760499   17245  3276.7898 ## 36: 0.0003057402    3535  1481.0996 ## 37: 0.0025833876  251133 12671.2132 ## 38: 0.0005582162   11533  2705.1327 ## 39: 0.0231395983  128377  9252.3454 ## 40: 0.0057348621    4402  1780.3574 ## 41: 0.0043327331    3078  1340.5366 ## 42: 0.0233781385  139222  9656.1625 ## 43: 0.0023683811    1033   730.6294 ## 44: 0.0146015906   32049  4757.0427 ## 45: 0.0401920453   26857  4365.3044 ## 46: 0.0099774410     905   905.0000 ## 47: 0.0073183153     662   662.0000 ## 48: 0.0429156650   52253  5852.2429 ## 49: 0.0107967923    1658   980.6406 ## 50: 0.0239410741    7680  2253.0918 ## 51: 0.0013345935     120   120.0000 ## 52: 0.0170273904  188407 11212.9544 ## 53: 0.0072538913   22220  3958.7011 ## 54: 0.0022959360    2069  1229.3224 ## 55: 0.0019000907    2095  1016.4577 ## 56: 0.0004791561     256   256.0000 ## 57: 0.0023053628    2471  1234.3289 ## 58: 0.0010238556     604   547.2946 ## 59: 0.0177823597  279233 13535.4928 ## 60: 0.0016165519    1252   864.6572 ## 61: 0.0087882893   35114  4848.2740 ## 62: 0.0012213144     653   653.0000 ##          prop_se     est     est_se ##  ## $weight_name ## [1] \"trip_weight\" DT = hts_prep_data(summarize_var = 'race',                    summarize_by = 'mode_type',                    variables_dt = variable_list,                    data = test_data)  mode_by_race_summary = hts_summary(prepped_dt = DT$cat,                                     summarize_var = 'race',                                    summarize_by = 'mode_type',                                    summarize_vartype = 'checkbox',                                    weighted = TRUE,                                    wtname = 'trip_weight',                                    se = TRUE)   mode_by_race_summary$summary ## $unwtd ## Key: <mode_type> ##     mode_type                                      race count        prop ##         <int>                                    <fctr> <int>       <num> ##  1:         1                 African American or Black   190 0.039840637 ##  2:         1          American Indian or Alaska Native   100 0.020968757 ##  3:         1                                     Asian   808 0.169427553 ##  4:         1 Native Hawaiian or other Pacific Islander    34 0.007129377 ##  5:         1                                     White  3174 0.665548333 ##  6:         1                                Other race   105 0.022017194 ##  7:         1                      Prefer not to answer   358 0.075068148 ##  8:         2                                     Asian    38 0.114114114 ##  9:         2                                     White   252 0.756756757 ## 10:         2                                Other race     4 0.012012012 ## 11:         2                      Prefer not to answer    39 0.117117117 ## 12:         3                 African American or Black     4 0.400000000 ## 13:         3                                     White     3 0.300000000 ## 14:         3                      Prefer not to answer     3 0.300000000 ## 15:         4                 African American or Black     1 0.029411765 ## 16:         4                                     Asian     2 0.058823529 ## 17:         4                                     White    26 0.764705882 ## 18:         4                      Prefer not to answer     5 0.147058824 ## 19:         5                                     Asian     2 0.285714286 ## 20:         5                                     White     3 0.428571429 ## 21:         5                                Other race     1 0.142857143 ## 22:         5                      Prefer not to answer     1 0.142857143 ## 23:         6                 African American or Black     1 0.014492754 ## 24:         6          American Indian or Alaska Native     1 0.014492754 ## 25:         6                                     Asian    15 0.217391304 ## 26:         6 Native Hawaiian or other Pacific Islander     1 0.014492754 ## 27:         6                                     White    42 0.608695652 ## 28:         6                                Other race     3 0.043478261 ## 29:         6                      Prefer not to answer     6 0.086956522 ## 30:         7                 African American or Black     1 0.009708738 ## 31:         7                                     Asian    41 0.398058252 ## 32:         7                                     White    59 0.572815534 ## 33:         7                      Prefer not to answer     2 0.019417476 ## 34:         8                 African American or Black   202 0.023882715 ## 35:         8          American Indian or Alaska Native    92 0.010877276 ## 36:         8                                     Asian  1405 0.166114921 ## 37:         8 Native Hawaiian or other Pacific Islander    76 0.008985576 ## 38:         8                                     White  5991 0.708323481 ## 39:         8                                Other race   144 0.017025301 ## 40:         8                      Prefer not to answer   548 0.064790731 ## 41:        10                                     White    14 1.000000000 ## 42:        11                 African American or Black     5 0.060240964 ## 43:        11          American Indian or Alaska Native     2 0.024096386 ## 44:        11                                     Asian    30 0.361445783 ## 45:        11                                     White    39 0.469879518 ## 46:        11                                Other race     3 0.036144578 ## 47:        11                      Prefer not to answer     4 0.048192771 ## 48:        12                                     Asian     1 0.111111111 ## 49:        12                                     White     8 0.888888889 ## 50:        13                 African American or Black    70 0.074706510 ## 51:        13          American Indian or Alaska Native    40 0.042689434 ## 52:        13                                     Asian   153 0.163287086 ## 53:        13                                     White   576 0.614727855 ## 54:        13                                Other race    29 0.030949840 ## 55:        13                      Prefer not to answer    69 0.073639274 ## 56:        14                                     Asian     7 0.205882353 ## 57:        14                                     White    25 0.735294118 ## 58:        14                                Other race     1 0.029411765 ## 59:        14                      Prefer not to answer     1 0.029411765 ##     mode_type                                      race count        prop ##  ## $wtd ##     mode_type                                      race count        prop ##         <int>                                    <fctr> <int>       <num> ##  1:         1                 African American or Black   190 0.040013489 ##  2:         1          American Indian or Alaska Native   100 0.021076910 ##  3:         1                                     Asian   808 0.166476198 ##  4:         1 Native Hawaiian or other Pacific Islander    34 0.006831490 ##  5:         1                                     White  3174 0.666577157 ##  6:         1                                Other race   105 0.020586062 ##  7:         1                      Prefer not to answer   358 0.078438695 ##  8:         2                                     Asian    38 0.126072990 ##  9:         2                                     White   252 0.732486705 ## 10:         2                                Other race     4 0.008524104 ## 11:         2                      Prefer not to answer    39 0.132916201 ## 12:         3                 African American or Black     4 0.414366478 ## 13:         3                                     White     3 0.241602927 ## 14:         3                      Prefer not to answer     3 0.344030595 ## 15:         4                 African American or Black     1 0.031250000 ## 16:         4                                     Asian     2 0.054166667 ## 17:         4                                     White    26 0.773790323 ## 18:         4                      Prefer not to answer     5 0.140793011 ## 19:         5                                     Asian     2 0.281510417 ## 20:         5                                     White     3 0.416145833 ## 21:         5                                Other race     1 0.235677083 ## 22:         5                      Prefer not to answer     1 0.066666667 ## 23:         6                 African American or Black     1 0.023968337 ## 24:         6          American Indian or Alaska Native     1 0.013589438 ## 25:         6                                     Asian    15 0.245800006 ## 26:         6 Native Hawaiian or other Pacific Islander     1 0.022805901 ## 27:         6                                     White    42 0.585812737 ## 28:         6                                Other race     3 0.039633556 ## 29:         6                      Prefer not to answer     6 0.068390025 ## 30:         7                 African American or Black     1 0.008989024 ## 31:         7                                     Asian    41 0.400069443 ## 32:         7                                     White    59 0.579290523 ## 33:         7                      Prefer not to answer     2 0.011651010 ## 34:         8                 African American or Black   202 0.022452608 ## 35:         8          American Indian or Alaska Native    92 0.011322711 ## 36:         8                                     Asian  1405 0.163974235 ## 37:         8 Native Hawaiian or other Pacific Islander    76 0.009421685 ## 38:         8                                     White  5991 0.709942163 ## 39:         8                                Other race   144 0.017067744 ## 40:         8                      Prefer not to answer   548 0.065818854 ## 41:        10                                     White    14 1.000000000 ## 42:        11                 African American or Black     5 0.045721688 ## 43:        11          American Indian or Alaska Native     2 0.024779907 ## 44:        11                                     Asian    30 0.421234438 ## 45:        11                                     White    39 0.438458032 ## 46:        11                                Other race     3 0.039772591 ## 47:        11                      Prefer not to answer     4 0.030033344 ## 48:        12                                     Asian     1 0.073637317 ## 49:        12                                     White     8 0.926362683 ## 50:        13                 African American or Black    70 0.080582483 ## 51:        13          American Indian or Alaska Native    40 0.045759209 ## 52:        13                                     Asian   153 0.162498668 ## 53:        13                                     White   576 0.603323604 ## 54:        13                                Other race    29 0.033025119 ## 55:        13                      Prefer not to answer    69 0.074810917 ## 56:        14                                     Asian     7 0.235129592 ## 57:        14                                     White    25 0.716825160 ## 58:        14                                Other race     1 0.007458512 ## 59:        14                      Prefer not to answer     1 0.040586736 ##     mode_type                                      race count        prop ##         prop_se     est     est_se ##           <num>   <num>      <num> ##  1: 0.003480119   96111  7975.0422 ##  2: 0.002542819   50626  5768.3288 ##  3: 0.006568278  399870 16186.7733 ##  4: 0.001479919   16409  3332.9169 ##  5: 0.007787283 1601095 32330.8859 ##  6: 0.002488825   49447  5643.0323 ##  7: 0.004825536  188407 11307.9346 ##  8: 0.021673410   21076  3786.3301 ##  9: 0.027934367  122452  8973.4484 ## 10: 0.005832891    1425   953.4106 ## 11: 0.022521537   22220  3962.3508 ## 12: 0.169167822    2492  1331.5545 ## 13: 0.144247992    1453   987.4602 ## 14: 0.164240660    2069  1229.3905 ## 15: 0.030872908     465   465.0000 ## 16: 0.038590666     806   584.5878 ## 17: 0.076849954   11514  2632.9105 ## 18: 0.064158837    2095  1016.5575 ## 19: 0.189992252    1081   856.0307 ## 20: 0.208480521    1598  1028.8007 ## 21: 0.198601443     905   905.0000 ## 22: 0.068252522     256   256.0000 ## 23: 0.025775549     866   866.0000 ## 24: 0.014784403     491   491.0000 ## 25: 0.063926195    8881  2490.2346 ## 26: 0.024557643     824   824.0000 ## 27: 0.069091983   21166  3700.9843 ## 28: 0.026555002    1432   893.3361 ## 29: 0.036046741    2471  1234.4411 ## 30: 0.008964261     466   466.0000 ## 31: 0.054902198   20740  3701.0089 ## 32: 0.055185761   30031  4390.3553 ## 33: 0.010514366     604   547.2982 ## 34: 0.001873969   95254  7769.5082 ## 35: 0.001398626   48036  5771.9859 ## 36: 0.004762250  695652 21306.4777 ## 37: 0.001276091   39971  5261.1217 ## 38: 0.005617560 3011892 43812.4684 ## 39: 0.001666708   72409  6895.2034 ## 40: 0.003230268  279233 13708.1607 ## 41: 0.000000000   10064  2812.2928 ## 42: 0.022381920    1906   897.4773 ## 43: 0.018255748    1033   730.6515 ## 44: 0.063430268   17560  3458.3451 ## 45: 0.063068208   18278  3359.7885 ## 46: 0.024280629    1658   980.6957 ## 47: 0.021499876    1252   864.6859 ## 48: 0.073962514     281   281.0000 ## 49: 0.073962514    3535  1481.3100 ## 50: 0.011247084   37823  5066.8771 ## 51: 0.008727320   21478  3852.7941 ## 52: 0.015009542   76272  7108.1562 ## 53: 0.018695102  283182 13670.8385 ## 54: 0.007444624   15501  3261.5427 ## 55: 0.010821499   35114  4855.8112 ## 56: 0.091554896    3783  1724.7373 ## 57: 0.095130908   11533  2706.5373 ## 58: 0.007557031     120   120.0000 ## 59: 0.039773659     653   653.0000 ##         prop_se     est     est_se ##  ## $weight_name ## [1] \"trip_weight\" DT = hts_prep_data(summarize_var = 'mode_type',                    summarize_by = c('race', 'ethnicity'),                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))  mode_by_race_ethnicity_summary = hts_summary(prepped_dt = DT$cat,                                               summarize_var = 'mode_type',                                              summarize_by = c('race', 'ethnicity'),                                              summarize_vartype = 'categorical',                                              weighted = TRUE,                                              wtname = 'trip_weight',                                              se = TRUE)   head(mode_by_race_ethnicity_summary$summary$wtd, 10) ##                          race                                   ethnicity ##                        <fctr>                                      <fctr> ##  1: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  2: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  3: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  4: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  5: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  6: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  7: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  8: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  9: African American or Black Another Hispanic, Latino, or Spanish origin ## 10: African American or Black Another Hispanic, Latino, or Spanish origin ##     mode_type count        prop     prop_se   est    est_se ##         <int> <int>       <num>       <num> <num>     <num> ##  1:         1   143 0.395021634 0.028786577 75777 7152.8334 ##  2:         3     4 0.012990669 0.006892942  2492 1331.4537 ##  3:         4     1 0.002424021 0.002422381   465  465.0000 ##  4:         6     1 0.004514414 0.004501905   866  866.0000 ##  5:         7     1 0.002429234 0.002427578   466  466.0000 ##  6:         8   173 0.418427775 0.028683214 80267 7061.2787 ##  7:        11     3 0.004550904 0.002717711   873  521.1549 ##  8:        13    53 0.159641349 0.021778953 30624 4566.8926 ##  9:         1     2 0.270056497 0.179646281   956  696.6059 ## 10:         8     4 0.729943503 0.179646281  2584 1413.9469"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"calculating-trip-rates","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Calculating trip rates","title":"Getting Started","text":"hts_summary can also used calculate trip rates.","code":"DT = hts_prep_triprate(summarize_by = 'employment',                        variables_dt = variable_list,                        trip_name = 'trip',                        day_name = 'day',                        hts_data = list('hh' = hh,                                        'person' = person,                                        'day' = day,                                        'trip' = trip,                                        'vehicle' = vehicle))  trip_rate_by_employment_summary = hts_summary(prepped_dt = DT$num,                                                summarize_var = 'num_trips_wtd',                                               summarize_by = 'employment',                                               summarize_vartype = 'numeric',                                               weighted = TRUE,                                               wtname = 'day_weight',                                               se = TRUE)  head(trip_rate_by_employment_summary$summary$wtd, 10) ##    employment count   min      max     mean    mean_se   median ##         <int> <int> <num>    <num>    <num>      <num>    <num> ## 1:          1  1858     0 62.56075 3.770511 0.08744228 2.562929 ## 2:          2   333     0 49.51000 4.518665 0.26799833 3.027821 ## 3:          3   251     0 63.59574 3.750584 0.25813849 2.478788 ## 4:          5  1000     0 59.23973 3.394865 0.12525765 2.021469 ## 5:          6   164     0 45.62069 3.144907 0.26774656 2.197662 ## 6:          7    52     0 32.36364 4.070054 0.56907009 2.720099 ## 7:          8    14     0 21.92248 2.728166 0.92991111 0.904000 ## 8:        995   513     0 58.78947 2.098985 0.10435428 1.272311"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"labeling-values","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Labeling Values","title":"Getting Started","text":"label values can use factorize_column.","code":"trip_rate_by_employment_summary$summary$wtd$employment =  factorize_column(   trip_rate_by_employment_summary$summary$wtd$employment,   'employment',   value_labels,   variable_colname = 'variable',   value_colname = 'value',   value_label_colname = 'label',   value_order_colname = 'val_order' )   trip_rate_by_employment_summary$summary$wtd ##                                                                             employment ##                                                                                  <ord> ## 1:                                           Employed full-time (35+ hours/week, paid) ## 2:                                 Employed part-time (fewer than 35 hours/week, paid) ## 3:                                                                       Self-employed ## 4: Not employed and not looking for work (e.g., retired, stay-at-home parent, student) ## 5:                                                     Unemployed and looking for work ## 6:                                                          Unpaid volunteer or intern ## 7:               Employed, but not currently working (e.g., on leave, furloughed 100%) ## 8:                                                                    Missing Response ##    count   min      max     mean    mean_se   median ##    <int> <num>    <num>    <num>      <num>    <num> ## 1:  1858     0 62.56075 3.770511 0.08744228 2.562929 ## 2:   333     0 49.51000 4.518665 0.26799833 3.027821 ## 3:   251     0 63.59574 3.750584 0.25813849 2.478788 ## 4:  1000     0 59.23973 3.394865 0.12525765 2.021469 ## 5:   164     0 45.62069 3.144907 0.26774656 2.197662 ## 6:    52     0 32.36364 4.070054 0.56907009 2.720099 ## 7:    14     0 21.92248 2.728166 0.92991111 0.904000 ## 8:   513     0 58.78947 2.098985 0.10435428 1.272311"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"creating-visuals-using-hts_summary-output","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Creating Visuals using hts_summary output","title":"Getting Started","text":"hts_summary creates outputs can easily used create visuals.","code":"library(ggplot2) ## Warning: package 'ggplot2' was built under R version 4.3.2 p = ggplot(   trip_rate_by_employment_summary$summary$wtd,    aes(x = mean, y = employment)) +   geom_bar(stat = 'identity') +    geom_errorbar(     aes(xmin = (mean - mean_se),          xmax = (mean + mean_se),         width = .2)   ) +    labs(x = 'Mean Trip Rate',        y = 'Employment')  +   scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 50),                    limits = rev)      print(p)"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"summarizing-a-new-variable","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Summarizing a new variable","title":"Getting Started","text":"summarize new variable hts_summary must first added variable_list value_labels. example creating new variable called hh_size want summarize.","code":"test_data$hh[, hh_size := ifelse(num_people < 4, 0, 1)]  variable_list = rbind(variable_list,                       data.table(variable = 'hh_size',                                  is_checkbox = 0,                                  hh = 1,                                  person = 0,                                  day = 0,                                  trip = 0,                                  vehicle = 0,                                  description = 'Household size',                                  data_type = 'integer/categorical',                                  shared_name = 'hh_size')                       )  value_labels = rbind(value_labels,                      data.table(variable = rep('hh_size', 2),                                 value = c(0,1),                                 label = c('Small household', 'Large household'),                                 val_order = c(214:215))                       )  DT = hts_prep_data(summarize_var = 'hh_size',                    variables_dt = variable_list,                    data = test_data)  hh_size_summary = hts_summary(prepped_dt = DT$cat,                                summarize_var = 'hh_size',                               summarize_vartype = 'categorical',                               weighted = TRUE,                               wtname = 'hh_weight')  factorize_df(df = hh_size_summary$summary$wtd, value_labels, value_label_colname = 'label') ##            hh_size count      prop    est ##              <ord> <int>     <num>  <int> ## 1: Small household   881 0.8786678 448161 ## 2: Large household   119 0.1213322  61885"},{"path":"https://rsginc.github.io/travelSurveyTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"RSG Inc.. Author, maintainer. Ashley Asmus. Author. Erika Redding. Author. Jacob Moore. Author. James Clark. Author.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Inc. R, Asmus , Redding E, Moore J, Clark J (2024). travelSurveyTools: travelSurveyTools. R package version 2.3.0, https://github.com/RSGInc/travelSurveyTools.","code":"@Manual{,   title = {travelSurveyTools: travelSurveyTools},   author = {RSG Inc. and Ashley Asmus and Erika Redding and Jacob Moore and James Clark},   year = {2024},   note = {R package version 2.3.0},   url = {https://github.com/RSGInc/travelSurveyTools}, }"},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"NA","text":"project uses feature-branch naming convention workflow. main main branch (master), base work main. Contribute project making changes feature branch issuing pull-requests ’re ready integrate main branch.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"create-a-feature-branch","dir":"","previous_headings":"Contributing","what":"Create a feature branch","title":"NA","text":"Pull main branch; git pull, necessary git checkout main switch main Create feature branch check branch, e.g., git checkout -b crosstab-performance * can use initials prefix feature branch, e.g., aa-crosstab-performance.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"your-feature-branch-should-do-one-thing-only","dir":"","previous_headings":"Contributing","what":"Your feature branch should do one thing only","title":"NA","text":"example: debug error, create new function, generate new part dashboard, integrate new dataset, fix issue - please name branch issue number","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"save-and-share-your-work","dir":"","previous_headings":"Contributing","what":"Save and share your work","title":"NA","text":"Commit changes related feature push GitHub. Push changes feature branch time. Create pull request GitHub ’re ready work reviewed. can submit PR done, want guidance work--progress. Make changes respond comments pull-request reviews. New commits pushed branch update pull-request.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"keep-it-clean","dir":"","previous_headings":"Contributing","what":"Keep it clean","title":"NA","text":"pull request approved approver merge branch main may delete branch GitHub. remove deleted feature branches local copy repository run git remote prune origin. attempt push additional commits merged pull-request. Instead, start new feature branch issue new pull request. Remember update branch main whenever start new feature, e.g., git checkout main; git pull origin main; git checkout -b -new-feature.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"travel-survey-tools","dir":"","previous_headings":"","what":"Travel Survey Tools","title":"travelSurveyTools","text":"travelSurveyTools R package empowers users household travel survey (HTS) data create meaningful summaries data. Currently, travelSurveyTools compatible RSG, Inc. HTS datasets, hope expand travel survey. like collaborate, please contact Suzanne Childress schildress@psrc.org. datasets usually contain six tables: household, person, day, trip, vehicle, location. future, may expand travelSurveyTools work types travel survey data types surveys. travelSurveyTools active development open-source; anyone can contribute 🤝. See CONTRIBUTING page learn .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"cloning-instructions","dir":"","previous_headings":"Travel Survey Tools","what":"Cloning instructions","title":"travelSurveyTools","text":"Set config - usethis::use_git_config(user.name = {“username”}, user.email = {your_email@email.com}) Go github page generate token - usethis::create_github_token() Paste PAT pop-follows - credentials::set_github_pat() Lastly, remotes::install_github() work - remotes::install_github(‘RSGInc/travelSurveyTools’)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"what-can-this-package-do","dir":"","previous_headings":"Travel Survey Tools","what":"What can this package do?","title":"travelSurveyTools","text":"things package enables include: * Cross tabs unlimited number variables * Summarizes numeric, categorical, date, date-time variables * Accepts weighted unweighted data * Numeric summaries return means, medians, summaries binned data * Ability use customized datasets (e.g., filtered, binned, renamed data) * Data labeling helper functions * Returns sample sizes/unweighted counts * Standard errors calculated survey statistics * Ability specify custom weights * Trip rate calculations","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"dependency-tree","dir":"","previous_headings":"Travel Survey Tools","what":"Dependency Tree","title":"travelSurveyTools","text":"","code":"├─dplyr 1.1.4 │ ├─cli 3.6.2 │ ├─generics 0.1.3 │ ├─glue 1.6.2 │ ├─lifecycle 1.0.4 │ │ ├─cli │ │ ├─glue │ │ └─rlang 1.1.2 │ ├─magrittr 2.0.3 │ ├─pillar 1.9.0 │ │ ├─cli │ │ ├─fansi 1.0.6 │ │ ├─glue │ │ ├─lifecycle │ │ ├─rlang │ │ ├─utf8 1.2.4 │ │ └─vctrs 0.6.5 │ │   ├─cli │ │   ├─glue │ │   ├─lifecycle │ │   └─rlang │ ├─R6 2.5.1 │ ├─rlang │ ├─tibble 3.2.1 │ │ ├─fansi │ │ ├─lifecycle │ │ ├─magrittr │ │ ├─pillar │ │ ├─pkgconfig 2.0.3 │ │ ├─rlang │ │ └─vctrs │ ├─tidyselect 1.2.0 │ │ ├─cli │ │ ├─glue │ │ ├─lifecycle │ │ ├─rlang │ │ ├─vctrs │ │ └─withr 2.5.2 │ └─vctrs ├─srvyr 1.2.0 │ ├─dplyr │ ├─magrittr │ ├─rlang │ ├─survey 4.2-1 │ │ ├─Matrix 1.6-1.1 -> 1.6-4 │ │ │ └─lattice 0.21-9 -> 0.22-5 │ │ ├─survival 3.5-7  │ │ │ └─Matrix │ │ ├─lattice │ │ ├─minqa 1.2.6 │ │ │ └─Rcpp 1.0.11 │ │ ├─numDeriv 2016.8-1.1 │ │ └─mitools 2.4 │ │   └─DBI 1.2.0 │ ├─tibble │ ├─tidyr 1.3.0 │ │ ├─cli │ │ ├─dplyr │ │ ├─glue │ │ ├─lifecycle │ │ ├─magrittr │ │ ├─purrr 1.0.2 │ │ │ ├─cli │ │ │ ├─lifecycle │ │ │ ├─magrittr │ │ │ ├─rlang │ │ │ └─vctrs │ │ ├─rlang │ │ ├─stringr 1.5.1 │ │ │ ├─cli │ │ │ ├─glue │ │ │ ├─lifecycle │ │ │ ├─magrittr │ │ │ ├─rlang │ │ │ ├─stringi 1.8.3 │ │ │ └─vctrs │ │ ├─tibble │ │ ├─tidyselect │ │ └─vctrs │ ├─tidyselect │ └─vctrs └─stringr"},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://rsginc.github.io/travelSurveyTools/PULL_REQUEST_TEMPLATE.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"NA","text":"Provide detailed summary changes introduced codebase.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"NA","text":"fixes closes #XXX (Replace github issues ticket#) updated version using usethis::use_version() updated relevant docs News.md reflect changes made run pkgdown::build_site() adding vignettes articles","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":null,"dir":"Reference","previous_headings":"","what":"Test day dataset — day","title":"Test day dataset — day","text":"dataset containing information participant travel days 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test day dataset — day","text":"","code":"day"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":"day","dir":"Reference","previous_headings":"","what":"day","title":"Test day dataset — day","text":"data frame 5,602 rows 13 columns: hh_id 8 digit household ID person_id 10 digit person ID day_id 12 digit day ID delivery_2 Take-/prepared food delivered home, response codes delivery_3 Someone came work home (e.g., babysitter, housecleaning, lawn), response codes delivery_4 Groceries delivered home, response codes delivery_5 Received packages home (e.g., USPS, FedEx, UPS), response codes delivery_6 Received personal packages work, response codes delivery_7 Received packages another location (e.g., Amazon Locker, package pick-point), response codes delivery_8 item delivered home (e.g., appliance), response codes delivery_996 None , response codes begin_day Location beginning day, response codes end_day Location end day, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test day dataset — day","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Factorize a column. — factorize_column","title":"Factorize a column. — factorize_column","text":"Factorize column. function typically called directly, called part factorize_df function.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factorize a column. — factorize_column","text":"","code":"factorize_column(   x,   var_str,   vals_df,   variable_colname = \"variable\",   value_colname = \"value\",   value_label_colname = \"value_label\",   value_order_colname = \"value\",   extra_labels = NULL,   add_na = TRUE )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factorize a column. — factorize_column","text":"x vector (variable) 'factorized' labeled. X often single variable column within dataframe. var_str name vector variable factorized (e.g., \"sample_segment\"). vals_df dataframe variable labels (.e., factor levels labels) format specified . variable_colname name variable column vals_df. Default 'variable'. value_colname name value column vals_df. Default 'value', value_label_colname name value label column vals_df. Default 'value_label' value_order_colname name value order column vals_df (can value column ). Default 'value'. extra_labels Pass vector names variables values dataframe use labeling. Common uses include missing values, universal values (e.g., \"Total\" \"Subtotal\" row), similar variables (e.g., \"mode_1\" reuse mode_1 labels mode_2). Default NULL. add_na TRUE FALSE setting whether add NA explicit level factor. Default setting TRUE.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factorize a column. — factorize_column","text":"'factorized' version vector passed (.e., factor). returned invisibly.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factorize a column. — factorize_column","text":"function expects values dataframe (vals_df) columns variable name, value, value label, value order (can value ) \"factorize\" functions borrowed updated 'tmr.Rite..tester' package Matt Landis.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factorize a column. — factorize_column","text":"","code":"factored = factorize_column(   x = hh$income_detailed,   var_str = \"income_detailed\",   vals_df = value_labels,   extra_labels = \"Missing\",   value_label_colname = 'label' )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Factorize a dataframe — factorize_df","title":"Factorize a dataframe — factorize_df","text":"Factorize dataframe. function loops dataframe (calling factorize_column) labels variable provide labels.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factorize a dataframe — factorize_df","text":"","code":"factorize_df(df, vals_df, verbose = TRUE, ...)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factorize a dataframe — factorize_df","text":"df dataframe label vals_df dataframe variable labels (.e., factor levels labels) format specified . Passed factorize_column function. verbose Prints vars labeled unlabeled ... Additional arguments passed factorize_column","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factorize a dataframe — factorize_df","text":"factorized (.e. labeled) version dataframe passed.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factorize a dataframe — factorize_df","text":"function expects values dataframe (vals_df) following format: variable (character/string names variable), value (integer values variable), val_order (sequential ordering value), label (strings names use levels factor). \"factorize\" functions borrowed updated 'tmr.Rite..tester' package Matt Landis.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factorize a dataframe — factorize_df","text":"","code":"hh_labeled = factorize_df(   df = hh,   vals_df = value_labels,   value_label_colname = 'label',   extra_labels = c(\"Missing\") ) #>  #>  Labeled vars:  #> - home_county #> - income_detailed #> - income_followup #> - num_people #> - residence_type #> - sample_segment #> Unlabeled vars:  #> - hh_id #> - hh_weight #> - home_lat #> - home_lon #> - num_trips"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get distance between points — get_distance_meters","title":"Get distance between points — get_distance_meters","text":"Function get haversine distance meters two points Based calculation geosphere package","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get distance between points — get_distance_meters","text":"","code":"get_distance_meters(location_1, location_2, radius = 6378137)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get distance between points — get_distance_meters","text":"location_1 matrix vector longitudes latitudes location_2 matrix vector longitudes latitudes radius Radius sphere use haversine calculation (Defaults meters)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get distance between points — get_distance_meters","text":"vector distances meters","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get distance between points — get_distance_meters","text":"","code":"get_distance_meters(c(38.8734, -75.2394), c(40.3497, -76.2314)) #> [1] 117610.6"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":null,"dir":"Reference","previous_headings":"","what":"Test household dataset — hh","title":"Test household dataset — hh","text":"dataset containing household level attributes 1,000 households 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test household dataset — hh","text":"","code":"hh"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":"hh","dir":"Reference","previous_headings":"","what":"hh","title":"Test household dataset — hh","text":"data frame 1,000 rows 6 columns: hh_id 8 digit household ID sample_segment Sample segment income_detailed 2022 household income (detailed categories), response codes income_followup 2022 household income (broad categories), response codes num_people Household size, response codes residence_type Type residence, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test household dataset — hh","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin numeric variables — hts_bin_var","title":"Bin numeric variables — hts_bin_var","text":"Bin numeric variables","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin numeric variables — hts_bin_var","text":"","code":"hts_bin_var(prepped_dt, numvar, nbins = 7)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin numeric variables — hts_bin_var","text":"prepped_dt Dataset containing variable bin data.table format numvar Name numeric variable bin nbins Number bins variable. Defaults 7.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin numeric variables — hts_bin_var","text":"Inputted dataset specified variable binned data.table format.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bin numeric variables — hts_bin_var","text":"","code":"require(data.table) #> Loading required package: data.table #> Warning: package 'data.table' was built under R version 4.3.2 require(stringr) #> Loading required package: stringr #> Warning: package 'stringr' was built under R version 4.3.2 hts_bin_var(prepped_dt = trip, numvar = 'speed_mph') #>           hh_id  person_id       day_id travel_date      trip_id distance_miles #>           <int>      <num>        <num>      <Date>        <num>          <num> #>     1: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12       4.755560 #>     2: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12       4.856047 #>     3: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12       1.516296 #>     4: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12       1.393237 #>     5: 23000173 2300017301 230001730103  2023-04-21 2.300017e+12       8.933913 #>    ---                                                                          #> 15816: 23422311 2342231101 234223110101  2023-06-01 2.342231e+12      20.219774 #> 15817: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12       6.683744 #> 15818: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12      20.175979 #> 15819: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12       5.573568 #> 15820: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12      20.219774 #>        mode_type mode_1 mode_2 num_travelers d_purpose_category trip_weight #>            <int>  <int>  <int>         <int>              <int>       <int> #>     1:         8      7    995             2                  9         968 #>     2:         8      7    995             3                  1         906 #>     3:         1      1    995             1                  9         387 #>     4:         1      1    995             1                  1         684 #>     5:         8      7    995             1                  3          64 #>    ---                                                                      #> 15816:         8      6    995             2                  1         624 #> 15817:         8      7    995             1                 10         322 #> 15818:         8      7    995             1                 13          22 #> 15819:         8      6    995             2                  6         596 #> 15820:         8      6    995             2                  1          95 #>        speed_mph #>           <fctr> #>     1:      1-23 #>     2:     23-45 #>     3:      1-23 #>     4:      1-23 #>     5:     23-45 #>    ---           #> 15816:     23-45 #> 15817:      1-23 #> 15818:     23-45 #> 15819:      1-23 #> 15820:     23-45"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_calculate_vmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate vmt for each trip — hts_calculate_vmt","title":"Calculate vmt for each trip — hts_calculate_vmt","text":"Calculate vmt trip","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_calculate_vmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate vmt for each trip — hts_calculate_vmt","text":"","code":"hts_calculate_vmt(   data,   trip_name = \"trip\",   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   agg_tbl = \"trip\",   mode_cols,   miles_col,   vehicle_modes,   occupancy_var = NULL )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_calculate_vmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate vmt for each trip — hts_calculate_vmt","text":"data List data tables trip_name Name trip table data ids Unique id order table data agg_tbl Table append vmt mode_cols Column(s) trip_dt containing trip mode miles_col Column trip_dt containing miles per trip vehicle_modes List modes considered vehicle occupancy_var Ocuupancy column divide distance specified. Default NULL","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_calculate_vmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate vmt for each trip — hts_calculate_vmt","text":"List vmt trip trip_dt","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_calculate_vmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate vmt for each trip — hts_calculate_vmt","text":"","code":"hts_calculate_vmt(   trip_name = 'trip',   data = test_data,   agg_tbl = 'day',   mode_cols = c('mode_1', 'mode_2'),   miles_col = 'distance_miles',   vehicle_modes = c(6, 7, 10)  ) #>       delivery_2 delivery_3 delivery_4 delivery_5 delivery_6 delivery_7 #>            <int>      <int>      <int>      <int>      <int>      <int> #>    1:          0          0          0          0          0          0 #>    2:        995        995        995        995        995        995 #>    3:        995        995        995        995        995        995 #>    4:          0          0          0          0          0          0 #>    5:          0          0          0          0          0          0 #>   ---                                                                   #> 4289:        995        995        995        995        995        995 #> 4290:          0          0          0          1          0          0 #> 4291:        995        995        995        995        995        995 #> 4292:          0          0          0          1          0          0 #> 4293:        995        995        995        995        995        995 #>       delivery_8 delivery_996    hh_id num_trips  person_id       day_id #>            <int>        <int>    <int>     <int>      <num>        <num> #>    1:          0            1 23000173         0 2300017301 230001730101 #>    2:        995          995 23000173        NA 2300017302 230001730201 #>    3:        995          995 23000173        NA 2300017303 230001730301 #>    4:          0            1 23000173         3 2300017304 230001730401 #>    5:          0            1 23000173         4 2300017301 230001730102 #>   ---                                                                    #> 4289:        995          995 23417656         3 2341765603 234176560301 #> 4290:          0            0 23418585         2 2341858501 234185850101 #> 4291:        995          995 23418585         0 2341858502 234185850201 #> 4292:          0            0 23422311         3 2342231101 234223110101 #> 4293:        995          995 23422311         4 2342231102 234223110201 #>       travel_date begin_day end_day day_weight       vmt #>            <Date>     <int>   <int>      <int>     <num> #>    1:  2023-04-19         1       1        694  0.000000 #>    2:  2023-04-19       995     995         90  0.000000 #>    3:  2023-04-19       995     995        728  0.000000 #>    4:  2023-04-19         1       1        507  2.728623 #>    5:  2023-04-20         1       1        296  9.611607 #>   ---                                                    #> 4289:  2023-06-06         1       1        971 15.451046 #> 4290:  2023-06-06         1       1        892  0.000000 #> 4291:  2023-06-06         1       1        268  0.000000 #> 4292:  2023-06-01         1       1        161 50.793153 #> 4293:  2023-06-01         1       1        350 52.653066    hts_calculate_vmt(   data = test_data,   trip_name = 'trip',   agg_tbl = 'trip',   mode_cols = 'mode_type',   miles_col = 'distance_miles',   vehicle_modes = 8,   occupancy_var = 'num_travelers'  ) #>           hh_id  person_id       day_id travel_date      trip_id speed_mph #>           <int>      <num>        <num>      <Date>        <num>     <num> #>     1: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12 21.480572 #>     2: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12 23.720178 #>     3: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12  6.927242 #>     4: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12  6.146634 #>     5: 23000173 2300017301 230001730103  2023-04-21 2.300017e+12 34.657421 #>    ---                                                                     #> 15816: 23422311 2342231101 234223110101  2023-06-01 2.342231e+12 25.812478 #> 15817: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 16.040986 #> 15818: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 26.901306 #> 15819: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 16.720703 #> 15820: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 25.812478 #>        distance_miles mode_type mode_1 mode_2 num_travelers d_purpose_category #>                 <num>     <int>  <int>  <int>         <int>              <int> #>     1:       4.755560         8      7    995             2                  9 #>     2:       4.856047         8      7    995             3                  1 #>     3:       1.516296         1      1    995             1                  9 #>     4:       1.393237         1      1    995             1                  1 #>     5:       8.933913         8      7    995             1                  3 #>    ---                                                                         #> 15816:      20.219774         8      6    995             2                  1 #> 15817:       6.683744         8      7    995             1                 10 #> 15818:      20.175979         8      7    995             1                 13 #> 15819:       5.573568         8      6    995             2                  6 #> 15820:      20.219774         8      6    995             2                  1 #>        trip_weight       vmt #>              <int>     <num> #>     1:         968  2.377780 #>     2:         906  1.618682 #>     3:         387  0.000000 #>     4:         684  0.000000 #>     5:          64  8.933913 #>    ---                       #> 15816:         624 10.109887 #> 15817:         322  6.683744 #> 15818:          22 20.175979 #> 15819:         596  2.786784 #> 15820:          95 10.109887"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind a column from one table to another — hts_cbind_var","title":"Bind a column from one table to another — hts_cbind_var","text":"Bind column one table another","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind a column from one table to another — hts_cbind_var","text":"","code":"hts_cbind_var(   lhs_table,   rhs_var,   hts_data,   variable_list = variable_list,   return_weight_cols = FALSE,   cbind_ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   cbind_wts = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\") )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind a column from one table to another — hts_cbind_var","text":"lhs_table Table bind column data.table format rhs_var Variable bind lhs_table. hts_data List household, person, vehicle, day, trip tables data.table format. variable_list variable list descriptions table locations variables. return_weight_cols true binds weight variable along rhs_var lhs_table. Default FALSE. cbind_ids list unique identifiers table hts_data cbind_wts list weight table hts_data","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind a column from one table to another — hts_cbind_var","text":"Inputted table inputted variable binded.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind a column from one table to another — hts_cbind_var","text":"","code":"require(data.table) hts_cbind_var(lhs_table = trip,  rhs_var = 'speed_mph',  hts_data = test_data,   variable_list = variable_list) #> Joining speed_mph to table on hh_id, person_id, day_id, trip_id, speed_mph, trip_weight #> Key: <hh_id, person_id, day_id, trip_id, speed_mph, trip_weight> #>           hh_id  person_id       day_id      trip_id speed_mph trip_weight #>           <int>      <num>        <num>        <num>     <num>       <int> #>     1: 23000173 2300017301 230001730102 2.300017e+12 21.480572         968 #>     2: 23000173 2300017301 230001730102 2.300017e+12 23.720178         906 #>     3: 23000173 2300017301 230001730102 2.300017e+12  6.927242         387 #>     4: 23000173 2300017301 230001730102 2.300017e+12  6.146634         684 #>     5: 23000173 2300017301 230001730103 2.300017e+12 34.657421          64 #>    ---                                                                     #> 15816: 23422311 2342231101 234223110101 2.342231e+12 25.812478         624 #> 15817: 23422311 2342231102 234223110201 2.342231e+12 16.040986         322 #> 15818: 23422311 2342231102 234223110201 2.342231e+12 26.901306          22 #> 15819: 23422311 2342231102 234223110201 2.342231e+12 16.720703         596 #> 15820: 23422311 2342231102 234223110201 2.342231e+12 25.812478          95 #>        travel_date distance_miles mode_type mode_1 mode_2 num_travelers #>             <Date>          <num>     <int>  <int>  <int>         <int> #>     1:  2023-04-20       4.755560         8      7    995             2 #>     2:  2023-04-20       4.856047         8      7    995             3 #>     3:  2023-04-20       1.516296         1      1    995             1 #>     4:  2023-04-20       1.393237         1      1    995             1 #>     5:  2023-04-21       8.933913         8      7    995             1 #>    ---                                                                  #> 15816:  2023-06-01      20.219774         8      6    995             2 #> 15817:  2023-06-01       6.683744         8      7    995             1 #> 15818:  2023-06-01      20.175979         8      7    995             1 #> 15819:  2023-06-01       5.573568         8      6    995             2 #> 15820:  2023-06-01      20.219774         8      6    995             2 #>        d_purpose_category #>                     <int> #>     1:                  9 #>     2:                  1 #>     3:                  9 #>     4:                  1 #>     5:                  3 #>    ---                    #> 15816:                  1 #> 15817:                 10 #> 15818:                 13 #> 15819:                  6 #> 15820:                  1 hts_cbind_var(lhs_table = trip,  rhs_var = 'speed_mph',   hts_data = test_data, variable_list = variable_list,  return_weight_cols = TRUE) #> Joining speed_mph to table on hh_id, person_id, day_id, trip_id, speed_mph, trip_weight #> Key: <hh_id, person_id, day_id, trip_id, speed_mph, trip_weight> #>           hh_id  person_id       day_id      trip_id speed_mph trip_weight #>           <int>      <num>        <num>        <num>     <num>       <int> #>     1: 23000173 2300017301 230001730102 2.300017e+12 21.480572         968 #>     2: 23000173 2300017301 230001730102 2.300017e+12 23.720178         906 #>     3: 23000173 2300017301 230001730102 2.300017e+12  6.927242         387 #>     4: 23000173 2300017301 230001730102 2.300017e+12  6.146634         684 #>     5: 23000173 2300017301 230001730103 2.300017e+12 34.657421          64 #>    ---                                                                     #> 15816: 23422311 2342231101 234223110101 2.342231e+12 25.812478         624 #> 15817: 23422311 2342231102 234223110201 2.342231e+12 16.040986         322 #> 15818: 23422311 2342231102 234223110201 2.342231e+12 26.901306          22 #> 15819: 23422311 2342231102 234223110201 2.342231e+12 16.720703         596 #> 15820: 23422311 2342231102 234223110201 2.342231e+12 25.812478          95 #>        travel_date distance_miles mode_type mode_1 mode_2 num_travelers #>             <Date>          <num>     <int>  <int>  <int>         <int> #>     1:  2023-04-20       4.755560         8      7    995             2 #>     2:  2023-04-20       4.856047         8      7    995             3 #>     3:  2023-04-20       1.516296         1      1    995             1 #>     4:  2023-04-20       1.393237         1      1    995             1 #>     5:  2023-04-21       8.933913         8      7    995             1 #>    ---                                                                  #> 15816:  2023-06-01      20.219774         8      6    995             2 #> 15817:  2023-06-01       6.683744         8      7    995             1 #> 15818:  2023-06-01      20.175979         8      7    995             1 #> 15819:  2023-06-01       5.573568         8      6    995             2 #> 15820:  2023-06-01      20.219774         8      6    995             2 #>        d_purpose_category #>                     <int> #>     1:                  9 #>     2:                  1 #>     3:                  9 #>     4:                  1 #>     5:                  3 #>    ---                    #> 15816:                  1 #> 15817:                 10 #> 15818:                 13 #> 15819:                  6 #> 15820:                  1"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter datasets to only keep specified ids — hts_filter_data","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"Filter datasets keep specified ids","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"","code":"hts_filter_data(hts_data, ids, id_name)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"hts_data List containing household travel data tables. ids List ids keep tables id_name Name id used filtering (e.g., hh_id, person_id)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"Inputted list tables filtered specified ids.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"","code":"require(data.table)  data(test_data)  hts_filter_data(hts_data = test_data,                 ids = hh[num_people > 5, hh_id],                 id_name = 'hh_id') #> $hh #>       hh_id sample_segment num_trips num_people income_detailed income_followup #>       <int>          <int>     <int>      <int>           <int>           <int> #> 1: 23001496             16        19          6              10             995 #> 2: 23016029              8        20          7               5             995 #> 3: 23049474             12        12          6               8             995 #> 4: 23094796              6        24          6              10             995 #> 5: 23151045             19         4          7               9             995 #> 6: 23191358              7         8          6               5             995 #> 7: 23233651             21        20          8               6             995 #> 8: 23275913              4        12          6               7             995 #> 9: 23416563             14        16          6               7             995 #>     home_lon home_lat home_county residence_type hh_weight #>        <num>    <num>       <int>          <int>     <int> #> 1: -87.82783 40.00000           3              1       348 #> 2: -85.60561 35.55055           2              2       140 #> 3: -96.09610 34.48549           1              1       420 #> 4: -87.22723 34.56256           1              1       394 #> 5: -88.42843 35.03904           1              3       279 #> 6: -90.39039 36.67167           1              4       368 #> 7: -81.56156 34.94094           2              1        50 #> 8: -87.02703 35.86587           3              1       521 #> 9: -88.36837 39.86687           1              2        94 #>  #> $person #>     ethnicity_1 ethnicity_2 ethnicity_3 ethnicity_4 ethnicity_997 ethnicity_999 #>           <int>       <int>       <int>       <int>         <int>         <int> #>  1:           1           0           0           0             0             0 #>  2:           1           0           0           0             0             0 #>  3:           1           0           0           0             0             0 #>  4:         995         995         995         995           995           995 #>  5:         995         995         995         995           995           995 #>  6:         995         995         995         995           995           995 #>  7:           1           0           0           0             0             0 #>  8:           1           0           0           0             0             0 #>  9:         995         995         995         995           995           995 #> 10:         995         995         995         995           995           995 #> 11:         995         995         995         995           995           995 #> 12:           1           0           0           0             0             0 #> 13:         995         995         995         995           995           995 #> 14:           1           0           0           0             0             0 #> 15:           0           0           0           0             0             1 #> 16:           0           0           0           0             0             1 #> 17:           0           0           0           0             0             1 #> 18:           0           0           0           0             0             1 #> 19:           0           0           0           0             0             1 #> 20:           1           0           0           0             0             0 #> 21:           1           0           0           0             0             0 #> 22:         995         995         995         995           995           995 #> 23:         995         995         995         995           995           995 #> 24:         995         995         995         995           995           995 #> 25:         995         995         995         995           995           995 #> 26:           1           0           0           0             0             0 #> 27:           1           0           0           0             0             0 #> 28:           1           0           0           0             0             0 #> 29:           1           0           0           0             0             0 #> 30:           1           0           0           0             0             0 #> 31:           1           0           0           0             0             0 #> 32:           1           0           0           0             0             0 #> 33:           0           1           0           0             0             0 #> 34:           0           1           0           0             0             0 #> 35:         995         995         995         995           995           995 #> 36:         995         995         995         995           995           995 #> 37:         995         995         995         995           995           995 #> 38:           0           1           0           0             0             0 #> 39:           1           0           0           0             0             0 #> 40:           1           0           0           0             0             0 #> 41:           1           0           0           0             0             0 #> 42:           1           0           0           0             0             0 #> 43:         995         995         995         995           995           995 #> 44:         995         995         995         995           995           995 #> 45:         995         995         995         995           995           995 #> 46:         995         995         995         995           995           995 #> 47:           1           0           0           0             0             0 #> 48:           1           0           0           0             0             0 #> 49:         995         995         995         995           995           995 #> 50:         995         995         995         995           995           995 #> 51:         995         995         995         995           995           995 #> 52:           1           0           0           0             0             0 #> 53:           1           0           0           0             0             0 #> 54:           1           0           0           0             0             0 #> 55:         995         995         995         995           995           995 #> 56:         995         995         995         995           995           995 #> 57:         995         995         995         995           995           995 #> 58:         995         995         995         995           995           995 #>     ethnicity_1 ethnicity_2 ethnicity_3 ethnicity_4 ethnicity_997 ethnicity_999 #>     race_1 race_2 race_3 race_4 race_5 race_997 race_999    hh_id num_trips #>      <int>  <int>  <int>  <int>  <int>    <int>    <int>    <int>     <int> #>  1:      0      0      0      0      1        0        0 23001496         9 #>  2:      0      0      0      0      1        0        0 23001496         2 #>  3:      0      0      1      0      0        0        0 23001496         2 #>  4:    995    995    995    995    995      995      995 23001496         2 #>  5:    995    995    995    995    995      995      995 23001496         2 #>  6:    995    995    995    995    995      995      995 23001496         2 #>  7:      0      0      0      0      1        0        0 23016029         5 #>  8:      0      0      0      0      1        0        0 23016029         0 #>  9:    995    995    995    995    995      995      995 23016029         2 #> 10:    995    995    995    995    995      995      995 23016029         2 #> 11:    995    995    995    995    995      995      995 23016029         5 #> 12:      0      0      0      0      1        0        0 23016029         2 #> 13:    995    995    995    995    995      995      995 23016029         4 #> 14:      0      0      1      1      1        0        0 23049474         2 #> 15:      0      0      0      0      0        0        1 23049474         2 #> 16:      0      0      0      0      0        0        1 23049474         2 #> 17:      0      0      0      0      0        0        1 23049474         2 #> 18:      0      0      0      0      0        0        1 23049474         2 #> 19:      0      0      0      0      0        0        1 23049474         2 #> 20:      0      0      0      0      1        0        0 23094796         2 #> 21:      0      0      0      0      1        0        0 23094796        12 #> 22:    995    995    995    995    995      995      995 23094796         2 #> 23:    995    995    995    995    995      995      995 23094796         2 #> 24:    995    995    995    995    995      995      995 23094796         2 #> 25:    995    995    995    995    995      995      995 23094796         4 #> 26:      0      0      1      0      1        0        0 23151045         1 #> 27:      0      0      1      0      1        0        0 23151045         1 #> 28:      0      0      1      0      1        0        0 23151045         1 #> 29:      0      0      0      0      1        0        0 23151045         1 #> 30:      0      0      0      0      1        0        0 23151045         0 #> 31:      0      0      1      0      0        0        0 23151045         0 #> 32:      0      0      1      0      1        0        0 23151045         0 #> 33:      0      0      0      0      1        0        0 23191358         0 #> 34:      0      0      0      0      1        0        0 23191358         4 #> 35:    995    995    995    995    995      995      995 23191358         2 #> 36:    995    995    995    995    995      995      995 23191358         0 #> 37:    995    995    995    995    995      995      995 23191358         0 #> 38:      0      0      0      0      1        0        0 23191358         2 #> 39:      0      0      0      0      1        0        0 23233651         0 #> 40:      0      1      0      0      0        0        0 23233651         2 #> 41:      0      0      0      0      1        0        0 23233651         3 #> 42:      0      0      0      0      1        0        0 23233651         3 #> 43:    995    995    995    995    995      995      995 23233651         3 #> 44:    995    995    995    995    995      995      995 23233651         3 #> 45:    995    995    995    995    995      995      995 23233651         3 #> 46:    995    995    995    995    995      995      995 23233651         3 #> 47:      0      0      1      0      0        0        0 23275913         4 #> 48:      0      0      1      0      0        0        0 23275913         0 #> 49:    995    995    995    995    995      995      995 23275913         2 #> 50:    995    995    995    995    995      995      995 23275913         2 #> 51:    995    995    995    995    995      995      995 23275913         2 #> 52:      0      0      1      0      0        0        0 23275913         2 #> 53:      1      0      0      0      0        0        0 23416563         4 #> 54:      1      0      0      0      0        0        0 23416563         4 #> 55:    995    995    995    995    995      995      995 23416563         2 #> 56:    995    995    995    995    995      995      995 23416563         2 #> 57:    995    995    995    995    995      995      995 23416563         2 #> 58:    995    995    995    995    995      995      995 23416563         2 #>     race_1 race_2 race_3 race_4 race_5 race_997 race_999    hh_id num_trips #>      person_id   age gender employment job_type education person_weight #>          <num> <int>  <int>      <int>    <int>     <int>         <int> #>  1: 2300149601     6      2          1        5         5           573 #>  2: 2300149602     6      1          1        3         6           585 #>  3: 2300149603     4      2          1        1         2           973 #>  4: 2300149604     2      2        995      995       995           882 #>  5: 2300149605     2      1        995      995       995           128 #>  6: 2300149606     2      1        995      995       995           230 #>  7: 2301602901     5      1          5      995         2           446 #>  8: 2301602902     6      2          1        1         2           296 #>  9: 2301602903     2      1        995      995       995           493 #> 10: 2301602904     2      1        995      995       995           983 #> 11: 2301602905     1      1        995      995       995           298 #> 12: 2301602906     7      1          1        1         2           167 #> 13: 2301602907     2      1        995      995       995           250 #> 14: 2304947401     5      2          1        3         6           341 #> 15: 2304947402     8      1          1        1       999           336 #> 16: 2304947403     4      2          1        1       999           224 #> 17: 2304947404     8      2          1        2       999           309 #> 18: 2304947405     4      2          1        1       999           853 #> 19: 2304947406    10      2          5      995       999           654 #> 20: 2309479601     7      2          1        1         6           446 #> 21: 2309479602     7      1          5      995         7           293 #> 22: 2309479603     2    999        995      995       995           899 #> 23: 2309479604     2    999        995      995       995           812 #> 24: 2309479605     2    999        995      995       995           545 #> 25: 2309479606     2    999        995      995       995           791 #> 26: 2315104501     4      2          7        3         3            25 #> 27: 2315104502     4      1          1        1         6           528 #> 28: 2315104503     4      1          2        1         6           534 #> 29: 2315104504     7      1          8      995         2            17 #> 30: 2315104505     7      2          1        2         7           469 #> 31: 2315104506    10      2          5      995         6           478 #> 32: 2315104507    10      1          5      995         7           420 #> 33: 2319135801     5      1          5      995         2           872 #> 34: 2319135802     7      2          1        2         2           823 #> 35: 2319135803     2    999        995      995       995           101 #> 36: 2319135804     2    999        995      995       995           443 #> 37: 2319135805     1    999        995      995       995           878 #> 38: 2319135806     8      1          2        1         1           492 #> 39: 2323365101     7      1          1        1         3           167 #> 40: 2323365102     8      2          1        1         2           979 #> 41: 2323365103     5      2          6      995         2           749 #> 42: 2323365104     5      1          6      995         2           851 #> 43: 2323365105     2      2        995      995       995           759 #> 44: 2323365106     2      1        995      995       995           153 #> 45: 2323365107     2      1        995      995       995           601 #> 46: 2323365108     1      1        995      995       995           927 #> 47: 2327591301     7      2          1        1         7           755 #> 48: 2327591302     9      1          5      995         2           632 #> 49: 2327591303     2      2        995      995       995           866 #> 50: 2327591304     2      2        995      995       995           967 #> 51: 2327591305     1      1        995      995       995           177 #> 52: 2327591306     6      1          1        4         2           548 #> 53: 2341656301     6      1          1        1         5            72 #> 54: 2341656302     6      2          1        1         3           543 #> 55: 2341656303     2      1        995      995       995           676 #> 56: 2341656304     2      1        995      995       995           692 #> 57: 2341656305     2      2        995      995       995           150 #> 58: 2341656306     3      2          5      995       995           800 #>      person_id   age gender employment job_type education person_weight #>  #> $day #>     delivery_2 delivery_3 delivery_4 delivery_5 delivery_6 delivery_7 #>          <int>      <int>      <int>      <int>      <int>      <int> #>  1:          0          0          0          1          0          0 #>  2:        995        995        995        995        995        995 #>  3:        995        995        995        995        995        995 #>  4:        995        995        995        995        995        995 #>  5:        995        995        995        995        995        995 #>  6:        995        995        995        995        995        995 #>  7:          0          0          0          0          0          0 #>  8:        995        995        995        995        995        995 #>  9:        995        995        995        995        995        995 #> 10:        995        995        995        995        995        995 #> 11:        995        995        995        995        995        995 #> 12:        995        995        995        995        995        995 #> 13:        995        995        995        995        995        995 #> 14:          0          0          0          0          0          0 #> 15:        995        995        995        995        995        995 #> 16:        995        995        995        995        995        995 #> 17:        995        995        995        995        995        995 #> 18:        995        995        995        995        995        995 #> 19:        995        995        995        995        995        995 #> 20:          0          0          0          1          0          0 #> 21:        995        995        995        995        995        995 #> 22:        995        995        995        995        995        995 #> 23:        995        995        995        995        995        995 #> 24:        995        995        995        995        995        995 #> 25:        995        995        995        995        995        995 #> 26:          0          0          0          1          0          0 #> 27:        995        995        995        995        995        995 #> 28:        995        995        995        995        995        995 #> 29:        995        995        995        995        995        995 #> 30:        995        995        995        995        995        995 #> 31:        995        995        995        995        995        995 #> 32:        995        995        995        995        995        995 #> 33:          0          0          0          1          0          0 #> 34:        995        995        995        995        995        995 #> 35:        995        995        995        995        995        995 #> 36:        995        995        995        995        995        995 #> 37:        995        995        995        995        995        995 #> 38:        995        995        995        995        995        995 #> 39:          0          0          0          0          0          0 #> 40:        995        995        995        995        995        995 #> 41:        995        995        995        995        995        995 #> 42:        995        995        995        995        995        995 #> 43:        995        995        995        995        995        995 #> 44:        995        995        995        995        995        995 #> 45:        995        995        995        995        995        995 #> 46:        995        995        995        995        995        995 #> 47:          0          0          0          0          0          0 #> 48:        995        995        995        995        995        995 #> 49:        995        995        995        995        995        995 #> 50:        995        995        995        995        995        995 #> 51:        995        995        995        995        995        995 #> 52:        995        995        995        995        995        995 #> 53:          0          0          0          0          0          0 #> 54:        995        995        995        995        995        995 #> 55:        995        995        995        995        995        995 #> 56:        995        995        995        995        995        995 #> 57:        995        995        995        995        995        995 #> 58:        995        995        995        995        995        995 #>     delivery_2 delivery_3 delivery_4 delivery_5 delivery_6 delivery_7 #>     delivery_8 delivery_996    hh_id num_trips  person_id       day_id #>          <int>        <int>    <int>     <int>      <num>        <num> #>  1:          0            0 23001496         9 2300149601 230014960101 #>  2:        995          995 23001496         2 2300149602 230014960201 #>  3:        995          995 23001496         2 2300149603 230014960301 #>  4:        995          995 23001496         2 2300149604 230014960401 #>  5:        995          995 23001496         2 2300149605 230014960501 #>  6:        995          995 23001496         2 2300149606 230014960601 #>  7:          0            1 23016029         5 2301602901 230160290101 #>  8:        995          995 23016029         0 2301602902 230160290201 #>  9:        995          995 23016029         2 2301602903 230160290301 #> 10:        995          995 23016029         2 2301602904 230160290401 #> 11:        995          995 23016029         5 2301602905 230160290501 #> 12:        995          995 23016029         2 2301602906 230160290601 #> 13:        995          995 23016029         4 2301602907 230160290701 #> 14:          0            1 23049474         2 2304947401 230494740101 #> 15:        995          995 23049474         2 2304947402 230494740201 #> 16:        995          995 23049474         2 2304947403 230494740301 #> 17:        995          995 23049474         2 2304947404 230494740401 #> 18:        995          995 23049474         2 2304947405 230494740501 #> 19:        995          995 23049474         2 2304947406 230494740601 #> 20:          0            0 23094796         2 2309479601 230947960101 #> 21:        995          995 23094796        12 2309479602 230947960201 #> 22:        995          995 23094796         2 2309479603 230947960301 #> 23:        995          995 23094796         2 2309479604 230947960401 #> 24:        995          995 23094796         2 2309479605 230947960501 #> 25:        995          995 23094796         4 2309479606 230947960601 #> 26:          0            0 23151045         1 2315104501 231510450101 #> 27:        995          995 23151045         1 2315104502 231510450201 #> 28:        995          995 23151045         1 2315104503 231510450301 #> 29:        995          995 23151045         1 2315104504 231510450401 #> 30:        995          995 23151045         0 2315104505 231510450501 #> 31:        995          995 23151045         0 2315104506 231510450601 #> 32:        995          995 23151045         0 2315104507 231510450701 #> 33:          0            0 23191358         0 2319135801 231913580101 #> 34:        995          995 23191358         4 2319135802 231913580201 #> 35:        995          995 23191358         2 2319135803 231913580301 #> 36:        995          995 23191358         0 2319135804 231913580401 #> 37:        995          995 23191358         0 2319135805 231913580501 #> 38:        995          995 23191358         2 2319135806 231913580601 #> 39:          0            1 23233651         0 2323365101 232336510101 #> 40:        995          995 23233651         2 2323365102 232336510201 #> 41:        995          995 23233651         3 2323365103 232336510301 #> 42:        995          995 23233651         3 2323365104 232336510401 #> 43:        995          995 23233651         3 2323365105 232336510501 #> 44:        995          995 23233651         3 2323365106 232336510601 #> 45:        995          995 23233651         3 2323365107 232336510701 #> 46:        995          995 23233651         3 2323365108 232336510801 #> 47:          0            1 23275913         4 2327591301 232759130101 #> 48:        995          995 23275913         0 2327591302 232759130201 #> 49:        995          995 23275913         2 2327591303 232759130301 #> 50:        995          995 23275913         2 2327591304 232759130401 #> 51:        995          995 23275913         2 2327591305 232759130501 #> 52:        995          995 23275913         2 2327591306 232759130601 #> 53:          0            1 23416563         4 2341656301 234165630101 #> 54:        995          995 23416563         4 2341656302 234165630201 #> 55:        995          995 23416563         2 2341656303 234165630301 #> 56:        995          995 23416563         2 2341656304 234165630401 #> 57:        995          995 23416563         2 2341656305 234165630501 #> 58:        995          995 23416563         2 2341656306 234165630601 #>     delivery_8 delivery_996    hh_id num_trips  person_id       day_id #>     travel_date begin_day end_day day_weight #>          <Date>     <int>   <int>      <int> #>  1:  2023-04-12         1       1        857 #>  2:  2023-04-12         7       7        158 #>  3:  2023-04-12         1       1         83 #>  4:  2023-04-12         2       2        293 #>  5:  2023-04-12         4       4        142 #>  6:  2023-04-12         7       7         30 #>  7:  2023-04-27         1       1        265 #>  8:  2023-04-27         1       1        782 #>  9:  2023-04-27         1       1         68 #> 10:  2023-04-27         1       1         83 #> 11:  2023-04-27         1       1        111 #> 12:  2023-04-27         1       1        997 #> 13:  2023-04-27         1       1        164 #> 14:  2023-04-20         1       1        923 #> 15:  2023-04-20         1       1        153 #> 16:  2023-04-20         1       1        658 #> 17:  2023-04-20         1       1        658 #> 18:  2023-04-20         1       1        946 #> 19:  2023-04-20         1       1         54 #> 20:  2023-04-19         1       1        617 #> 21:  2023-04-19         1       1        642 #> 22:  2023-04-19         1       1         36 #> 23:  2023-04-19         1       1        204 #> 24:  2023-04-19         1       1        778 #> 25:  2023-04-19         1       1        206 #> 26:  2023-06-01         1     997        195 #> 27:  2023-06-01         3     997        432 #> 28:  2023-06-01         1       3         82 #> 29:  2023-06-01         3     997        826 #> 30:  2023-06-01         1       1        339 #> 31:  2023-06-01         1       1        681 #> 32:  2023-06-01         1       1        791 #> 33:  2023-05-24         1       1        662 #> 34:  2023-05-24         1       1        428 #> 35:  2023-05-24         1       1        157 #> 36:  2023-05-24         1       1        608 #> 37:  2023-05-24         1       1        596 #> 38:  2023-05-24         2       2        591 #> 39:  2023-05-29         1       1        523 #> 40:  2023-05-29         1       1         26 #> 41:  2023-05-29         1       1        578 #> 42:  2023-05-29         1       1        146 #> 43:  2023-05-29         1       1        741 #> 44:  2023-05-29         1       1        348 #> 45:  2023-05-29         1       1        831 #> 46:  2023-05-29         1       1        761 #> 47:  2023-06-08         1       1        687 #> 48:  2023-06-08         1       1        961 #> 49:  2023-06-08         1       1        333 #> 50:  2023-06-08         1       1        967 #> 51:  2023-06-08         1       1         22 #> 52:  2023-06-08         1       1         32 #> 53:  2023-06-05         1       1        756 #> 54:  2023-06-05         1       1        675 #> 55:  2023-06-05         1       1        927 #> 56:  2023-06-05         1       1         96 #> 57:  2023-06-05         1       1        335 #> 58:  2023-06-05         1       1        583 #>     travel_date begin_day end_day day_weight #>  #> $trip #>         hh_id  person_id       day_id travel_date      trip_id  speed_mph #>         <int>      <num>        <num>      <Date>        <num>      <num> #>   1: 23001496 2300149601 230014960101  2023-04-12 2.300150e+12         NA #>   2: 23001496 2300149601 230014960101  2023-04-12 2.300150e+12 12.3087979 #>   3: 23001496 2300149601 230014960101  2023-04-12 2.300150e+12         NA #>   4: 23001496 2300149601 230014960101  2023-04-12 2.300150e+12 69.5804961 #>   5: 23001496 2300149601 230014960101  2023-04-12 2.300150e+12         NA #>  ---                                                                      #> 131: 23416563 2341656304 234165630401  2023-06-05 2.341656e+12  2.4496880 #> 132: 23416563 2341656305 234165630501  2023-06-05 2.341656e+12  1.5417278 #> 133: 23416563 2341656305 234165630501  2023-06-05 2.341656e+12  2.5695464 #> 134: 23416563 2341656306 234165630601  2023-06-05 2.341656e+12  0.8465739 #> 135: 23416563 2341656306 234165630601  2023-06-05 2.341656e+12  4.2869540 #>      distance_miles mode_type mode_1 mode_2 num_travelers d_purpose_category #>               <num>     <int>  <int>  <int>         <int>              <int> #>   1:             NA         1     23    995             1                 11 #>   2:      6.1543989        13     23    995             1                 11 #>   3:             NA         1     23    995             1                 10 #>   4:     23.1934987         1      1    995             1                  2 #>   5:             NA         1     23    995             1                 11 #>  ---                                                                         #> 131:      1.4289847        10     24    995             2                  1 #> 132:      0.2569546         1      1    995             1                  4 #> 133:      0.2569546         1      1    995             1                  1 #> 134:      4.7972523         8      6    995             3                  6 #> 135:      1.4289847         8      6    995             3                  1 #>      trip_weight #>            <int> #>   1:         352 #>   2:         773 #>   3:         219 #>   4:         712 #>   5:         609 #>  ---             #> 131:         478 #> 132:         220 #> 133:         752 #> 134:         788 #> 135:         655 #>  #> $vehicle #> Key: <hh_id> #>        hh_id vehicle_id fuel_type hh_weight #>        <int>      <num>     <int>     <int> #>  1: 23001496 2300149601         1       348 #>  2: 23001496 2300149602         1       348 #>  3: 23001496 2300149603         2       348 #>  4: 23016029 2301602901         1       140 #>  5: 23016029 2301602902         1       140 #>  6: 23016029 2301602903         1       140 #>  7: 23049474 2304947401         1       420 #>  8: 23049474 2304947402         1       420 #>  9: 23094796 2309479601         1       394 #> 10: 23094796 2309479602         1       394 #> 11: 23151045 2315104501         1       279 #> 12: 23151045 2315104502         1       279 #> 13: 23151045 2315104503         1       279 #> 14: 23191358 2319135801         1       368 #> 15: 23191358 2319135802         2       368 #> 16: 23191358 2319135803         1       368 #> 17: 23233651 2323365101         1        50 #> 18: 23233651 2323365102         1        50 #> 19: 23233651 2323365103         1        50 #> 20: 23275913 2327591301         1       521 #> 21: 23275913 2327591302         1       521 #> 22: 23416563 2341656301         1        94 #> 23: 23416563 2341656302         1        94 #>        hh_id vehicle_id fuel_type hh_weight #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Find table location of a variable — hts_find_var","title":"Find table location of a variable — hts_find_var","text":"Find table location variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find table location of a variable — hts_find_var","text":"","code":"hts_find_var(var, data, variables_dt = variable_list)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find table location of a variable — hts_find_var","text":"var searchable variable string format data List household, person, vehicle, day, trip tables data.table format. variables_dt codebook variable list data table format","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find table location of a variable — hts_find_var","text":"variable location string format","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find table location of a variable — hts_find_var","text":"","code":"hts_find_var('income_detailed', data = test_data) #> [1] \"hh\""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":null,"dir":"Reference","previous_headings":"","what":"Find key columns in table — hts_get_keycols","title":"Find key columns in table — hts_get_keycols","text":"Find key columns table","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find key columns in table — hts_get_keycols","text":"","code":"hts_get_keycols(dt, ids = TRUE, weights = TRUE, priority = FALSE)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find key columns in table — hts_get_keycols","text":"dt Dataset find key columns data.table format ids Boolean whether return id columns. Default TRUE. weights Boolean whether return weight columns. Default TRUE. priority Boolean whether return highest level weight/id. Default FALSE.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find key columns in table — hts_get_keycols","text":"List names key columns dataset.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find key columns in table — hts_get_keycols","text":"","code":"require(data.table) hts_get_keycols(dt = trip) #> [1] \"hh_id\"       \"person_id\"   \"day_id\"      \"trip_id\"     \"trip_weight\" hts_get_keycols(dt = trip, priority = TRUE) #> [1] \"trip_id\"     \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get counts from dataset — hts_get_ns","title":"Get counts from dataset — hts_get_ns","text":"Get counts dataset","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get counts from dataset — hts_get_ns","text":"","code":"hts_get_ns(   prepped_dt,   weighted,   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   wt_col )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get counts from dataset — hts_get_ns","text":"prepped_dt Dataset pull counts . weighted Boolean whether pull weighted estimates. ids list possible ids return counts wt_col weight column return sum ","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get counts from dataset — hts_get_ns","text":"List unweighted counts, weighted counts, highest level unit.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get counts from dataset — hts_get_ns","text":"","code":"require(data.table)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Melts checkbox variables into a single variable — hts_melt_vars","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"Melts checkbox variables single variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"","code":"hts_melt_vars(   shared_name = NULL,   wide_dt = NULL,   shared_name_vars = NULL,   variables_dt = variable_list,   data = hts_data,   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   remove_missing = TRUE,   missing_values = c(\"Missing Response\", \"995\"),   checkbox_label_sep = \":\",   to_single_row = FALSE )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"shared_name Shared name checkbox variable melt (e.g., 'race_1', 'race_2' shared name 'race'). Defaults NULL. wide_dt Table containing checkbox variables melt data.table format. shared_name_vars List checkbox variables shared name. Defaults NULL. variables_dt List variable locations descriptions data.table format. data List containing household, person, day, trip, vehicle datasets data.table format. ids unique identifiers appearing wide_dt remove_missing Boolean remove rows missing values. Defaults TRUE. missing_values Missing values remove. Defaults 'Missing Response' 995. checkbox_label_sep Character use split description checkbox variable variable list. Defaults ':' to_single_row Boolean treating multiple checkbox selections 'Two '. Defaults FALSE.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"Inputted data table checkbox variables melted single variable, 'variable' column indicate original variable names 'value' column original value checkbox variable.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"","code":"require(data.table) require(stringr) hts_melt_vars(shared_name = 'race',               wide_dt = person,               data = list('hh' = hh,                               'person' = person,                               'day' = day,                               'trip' = trip,                               'vehicle' = vehicle)) #>           hh_id  person_id variable value                      race #>           <int>      <num>   <fctr> <int>                    <char> #>     1: 23000173 2300017301   race_1     0 African American or Black #>     2: 23000173 2300017304   race_1     0 African American or Black #>     3: 23000405 2300040501   race_1     0 African American or Black #>     4: 23000405 2300040502   race_1     0 African American or Black #>     5: 23000466 2300046601   race_1     0 African American or Black #>    ---                                                              #> 11378: 23417656 2341765602 race_999     0      Prefer not to answer #> 11379: 23418585 2341858501 race_999     0      Prefer not to answer #> 11380: 23418585 2341858502 race_999     0      Prefer not to answer #> 11381: 23422311 2342231101 race_999     1      Prefer not to answer #> 11382: 23422311 2342231102 race_999     1      Prefer not to answer"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare variable to be summarized — hts_prep_byvar","title":"Prepare variable to be summarized — hts_prep_byvar","text":"Prepare variable summarized","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare variable to be summarized — hts_prep_byvar","text":"","code":"hts_prep_byvar(   summarize_by = NULL,   variables_dt = variable_list,   hts_data,   byvar_ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   byvar_wts = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\"),   ... )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare variable to be summarized — hts_prep_byvar","text":"summarize_by Name variable prepped. Default NULL. variables_dt List variable locations descriptions data.table format. hts_data List containing household, person, day, trip, vehicle datasets data.table format. byvar_ids unique identifiers table hts_data byvar_wts weight column table hts_data ... Additional parameters pass link{hts_melt_vars}","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare variable to be summarized — hts_prep_byvar","text":"Data table containing variable summarized key columns.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare variable to be summarized — hts_prep_byvar","text":"","code":"hts_prep_byvar(summarize_by = 'age',                variables_dt = variable_list,                hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #>          hh_id  person_id person_weight   age #>          <int>      <num>         <int> <int> #>    1: 23000173 2300017301           196     7 #>    2: 23000173 2300017302           671     3 #>    3: 23000173 2300017303           577     2 #>    4: 23000173 2300017304           688     6 #>    5: 23000405 2300040501           609     5 #>   ---                                         #> 1980: 23417656 2341765603           878     1 #> 1981: 23418585 2341858501           586     8 #> 1982: 23418585 2341858502           199     8 #> 1983: 23422311 2342231101           546     8 #> 1984: 23422311 2342231102           617     8 hts_prep_byvar(summarize_by = 'race',                variables_dt = variable_list,                hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #>          hh_id  person_id                      race #>          <int>      <num>                    <fctr> #>    1: 23001700 2300170002 African American or Black #>    2: 23011305 2301130503 African American or Black #>    3: 23012105 2301210501 African American or Black #>    4: 23016565 2301656501 African American or Black #>    5: 23032280 2303228001               Two or more #>   ---                                               #> 1622: 23406216 2340621601      Prefer not to answer #> 1623: 23406783 2340678301      Prefer not to answer #> 1624: 23411178 2341117802      Prefer not to answer #> 1625: 23422311 2342231101      Prefer not to answer #> 1626: 23422311 2342231102      Prefer not to answer"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare datasets to make summaries — hts_prep_data","title":"Prepare datasets to make summaries — hts_prep_data","text":"Prepare datasets make summaries","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare datasets to make summaries — hts_prep_data","text":"","code":"hts_prep_data(   summarize_var = NULL,   summarize_by = NULL,   variables_dt = variable_list,   data = hts_data,   id_cols = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   weighted = TRUE,   wt_cols = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\"),   remove_outliers = TRUE,   threshold = 0.975,   remove_missing = TRUE,   missing_values = c(\"Missing Response\", \"995\"),   not_imputable = -1,   strataname = NULL )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare datasets to make summaries — hts_prep_data","text":"summarize_var Name variable summarize. Default NULL summarize_by Name variable summarize summarize_var . Default NULL. variables_dt List variable locations descriptions data.table format. data List household, person, vehicle, day, trip tables data.table format. id_cols name unique identifier table hts_data weighted Whether data weighted. Default TRUE. wt_cols weight name table hts_data remove_outliers Whether remove outliers numeric variable. Default TRUE. threshold Threshold define outliers. Default 0.975. remove_missing Whether remove missing values summary. Default TRUE. missing_values Missing values remove. Default 995. not_imputable Value representing 'imputable' remove. Default -1. strataname Name strata name bring . Default NULL.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare datasets to make summaries — hts_prep_data","text":"List containing categorical numeric datasets summary variables key columns, either whether summarize variable shared breakdown outliers, depending summarize variable categorical numeric.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare datasets to make summaries — hts_prep_data","text":"","code":"require(data.table) require(stringr) hts_prep_data(summarize_var = 'age',               variables_dt = variable_list,               data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> Creating a summary of person age  #> $cat #>          hh_id  person_id   age person_weight #>          <int>      <num> <int>         <int> #>    1: 23000173 2300017301     7           196 #>    2: 23000173 2300017302     3           671 #>    3: 23000173 2300017303     2           577 #>    4: 23000173 2300017304     6           688 #>    5: 23000405 2300040501     5           609 #>   ---                                         #> 1980: 23417656 2341765603     1           878 #> 1981: 23418585 2341858501     8           586 #> 1982: 23418585 2341858502     8           199 #> 1983: 23422311 2342231101     8           546 #> 1984: 23422311 2342231102     8           617 #>  #> $num #> NULL #>  hts_prep_data(summarize_var = 'speed_mph',               summarize_by = 'age',               variables_dt = variable_list,               data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> Creating a summary of trip speed_mph broken down by person age #> $cat #> Key: <hh_id, person_id> #>           hh_id  person_id       day_id      trip_id person_weight trip_weight #>           <int>      <num>        <num>        <num>         <int>       <int> #>     1: 23000173 2300017301 230001730102 2.300017e+12           196         968 #>     2: 23000173 2300017301 230001730102 2.300017e+12           196         906 #>     3: 23000173 2300017301 230001730102 2.300017e+12           196         387 #>     4: 23000173 2300017301 230001730102 2.300017e+12           196         684 #>     5: 23000173 2300017301 230001730103 2.300017e+12           196          64 #>    ---                                                                         #> 14681: 23422311 2342231101 234223110101 2.342231e+12           546         624 #> 14682: 23422311 2342231102 234223110201 2.342231e+12           617         322 #> 14683: 23422311 2342231102 234223110201 2.342231e+12           617          22 #> 14684: 23422311 2342231102 234223110201 2.342231e+12           617         596 #> 14685: 23422311 2342231102 234223110201 2.342231e+12           617          95 #>        speed_mph   age #>           <fctr> <int> #>     1:     17-25     7 #>     2:     17-25     7 #>     3:       1-9     7 #>     4:       1-9     7 #>     5:     33-41     7 #>    ---                 #> 14681:     25-33     8 #> 14682:      9-17     8 #> 14683:     25-33     8 #> 14684:      9-17     8 #> 14685:     25-33     8 #>  #> $num #> Key: <hh_id, person_id> #>           hh_id  person_id       day_id      trip_id person_weight trip_weight #>           <int>      <num>        <num>        <num>         <int>       <int> #>     1: 23000173 2300017301 230001730102 2.300017e+12           196         968 #>     2: 23000173 2300017301 230001730102 2.300017e+12           196         906 #>     3: 23000173 2300017301 230001730102 2.300017e+12           196         387 #>     4: 23000173 2300017301 230001730102 2.300017e+12           196         684 #>     5: 23000173 2300017301 230001730103 2.300017e+12           196          64 #>    ---                                                                         #> 14681: 23422311 2342231101 234223110101 2.342231e+12           546         624 #> 14682: 23422311 2342231102 234223110201 2.342231e+12           617         322 #> 14683: 23422311 2342231102 234223110201 2.342231e+12           617          22 #> 14684: 23422311 2342231102 234223110201 2.342231e+12           617         596 #> 14685: 23422311 2342231102 234223110201 2.342231e+12           617          95 #>        speed_mph   age #>            <num> <int> #>     1: 21.480572     7 #>     2: 23.720178     7 #>     3:  6.927242     7 #>     4:  6.146634     7 #>     5: 34.657421     7 #>    ---                 #> 14681: 25.812478     8 #> 14682: 16.040986     8 #> 14683: 26.901306     8 #> 14684: 16.720703     8 #> 14685: 25.812478     8 #>  #> $outliers #>    threshold num_removed min_outlier max_outlier #>        <num>       <int>       <num>       <num> #> 1:     0.975         377    113.0093     5198308 #>                                                            hts_prep_data(summarize_var = 'employment',               summarize_by = c('age', 'race'),               variables_dt = variable_list,               data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> Creating a summary of person employment broken down by person age and person race #> $cat #> Key: <hh_id, person_id, person_weight> #>          hh_id  person_id person_weight employment   age                 race #>          <int>      <num>         <int>      <int> <int>               <fctr> #>    1: 23000173 2300017301           196          1     7                White #>    2: 23000173 2300017304           688          3     6                White #>    3: 23000405 2300040501           609          1     5                White #>    4: 23000405 2300040502            90          1     5                White #>    5: 23000466 2300046601            62          5     9                White #>   ---                                                                         #> 1622: 23417656 2341765602           856          1     6                Asian #> 1623: 23418585 2341858501           586          1     8                White #> 1624: 23418585 2341858502           199          2     8                White #> 1625: 23422311 2342231101           546          7     8 Prefer not to answer #> 1626: 23422311 2342231102           617          5     8 Prefer not to answer #>  #> $num #> NULL #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare datasets for trip rate calculations — hts_prep_triprate","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"Prepare datasets trip rate calculations","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"","code":"hts_prep_triprate(   summarize_by = NULL,   variables_dt = variable_list,   trip_name = \"trip\",   day_name = \"day\",   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   wts = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\"),   remove_outliers = TRUE,   threshold = 0.975,   weighted = TRUE,   hts_data )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"summarize_by Name variable summarize trip rates . Default NULL. variables_dt List variable locations descriptions data.table format. trip_name Name trip dataset hts_data. day_name Name day dataset hts_data. ids name unique identifier table hts_data wts name weight column table hts_data remove_outliers Boolean whether remove outliers dataset. Default TRUE. threshold Threshold define outliers. Default 0.975. weighted Whether data weighted. Default TRUE. hts_data List containing household, person, day, trip, vehicle datasets data.table format.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"List binned number trips key columns summarize variable, unbinned number trips key columns summarize variable, breakdown outliers removed.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"","code":"require(data.table) require(stringr) hts_prep_triprate(variables_dt = variable_list,                   trip_name = 'trip',                   day_name = 'day',                   hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> $cat #> Key: <hh_id, person_id, day_id> #>          hh_id  person_id       day_id day_weight num_trips_wtd #>          <int>      <num>        <num>      <int>        <fctr> #>    1: 23000173 2300017301 230001730101        694     Exactly 0 #>    2: 23000173 2300017301 230001730102        296          7-14 #>    3: 23000173 2300017301 230001730103        352           0-7 #>    4: 23000173 2300017301 230001730104        478           0-7 #>    5: 23000173 2300017301 230001730105        300           0-7 #>   ---                                                           #> 4181: 23417656 2341765603 234176560301        971           0-7 #> 4182: 23418585 2341858501 234185850101        892           0-7 #> 4183: 23418585 2341858502 234185850201        268     Exactly 0 #> 4184: 23422311 2342231101 234223110101        161          7-14 #> 4185: 23422311 2342231102 234223110201        350           0-7 #>  #> $num #> Key: <hh_id, person_id, day_id> #>          hh_id  person_id       day_id day_weight num_trips_wtd #>          <int>      <num>        <num>      <int>         <num> #>    1: 23000173 2300017301 230001730101        694      0.000000 #>    2: 23000173 2300017301 230001730102        296      9.949324 #>    3: 23000173 2300017301 230001730103        352      2.906250 #>    4: 23000173 2300017301 230001730104        478      1.757322 #>    5: 23000173 2300017301 230001730105        300      3.303333 #>   ---                                                           #> 4181: 23417656 2341765603 234176560301        971      1.685891 #> 4182: 23418585 2341858501 234185850101        892      1.050448 #> 4183: 23418585 2341858502 234185850201        268      0.000000 #> 4184: 23422311 2342231101 234223110101        161     10.329193 #> 4185: 23422311 2342231102 234223110201        350      2.957143 #>  #> $outliers #>    threshold num_removed min_outlier max_outlier #>        <num>       <int>       <num>       <num> #> 1:     0.975         108    63.74286    340.3529 #>  hts_prep_triprate(summarize_by = 'age',                   variables_dt = variable_list,                   trip_name = 'trip',                   day_name = 'day',                   hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> $cat #>          hh_id  person_id       day_id day_weight person_weight   age #>          <int>      <num>        <num>      <int>         <int> <int> #>    1: 23000173 2300017301 230001730101        694           196     7 #>    2: 23000173 2300017301 230001730102        296           196     7 #>    3: 23000173 2300017301 230001730103        352           196     7 #>    4: 23000173 2300017301 230001730104        478           196     7 #>    5: 23000173 2300017301 230001730105        300           196     7 #>   ---                                                                 #> 4181: 23417656 2341765603 234176560301        971           878     1 #> 4182: 23418585 2341858501 234185850101        892           586     8 #> 4183: 23418585 2341858502 234185850201        268           199     8 #> 4184: 23422311 2342231101 234223110101        161           546     8 #> 4185: 23422311 2342231102 234223110201        350           617     8 #>       num_trips_wtd #>              <fctr> #>    1:     Exactly 0 #>    2:          7-14 #>    3:           0-7 #>    4:           0-7 #>    5:           0-7 #>   ---               #> 4181:           0-7 #> 4182:           0-7 #> 4183:     Exactly 0 #> 4184:          7-14 #> 4185:           0-7 #>  #> $num #>          hh_id  person_id       day_id day_weight person_weight   age #>          <int>      <num>        <num>      <int>         <int> <int> #>    1: 23000173 2300017301 230001730101        694           196     7 #>    2: 23000173 2300017301 230001730102        296           196     7 #>    3: 23000173 2300017301 230001730103        352           196     7 #>    4: 23000173 2300017301 230001730104        478           196     7 #>    5: 23000173 2300017301 230001730105        300           196     7 #>   ---                                                                 #> 4181: 23417656 2341765603 234176560301        971           878     1 #> 4182: 23418585 2341858501 234185850101        892           586     8 #> 4183: 23418585 2341858502 234185850201        268           199     8 #> 4184: 23422311 2342231101 234223110101        161           546     8 #> 4185: 23422311 2342231102 234223110201        350           617     8 #>       num_trips_wtd #>               <num> #>    1:      0.000000 #>    2:      9.949324 #>    3:      2.906250 #>    4:      1.757322 #>    5:      3.303333 #>   ---               #> 4181:      1.685891 #> 4182:      1.050448 #> 4183:      0.000000 #> 4184:     10.329193 #> 4185:      2.957143 #>  #> $outliers #>    threshold num_removed min_outlier max_outlier #>        <num>       <int>       <num>       <num> #> 1:     0.975         108    63.74286    340.3529 #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove missing data for summary variables — hts_remove_missing_data","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"Remove missing data summary variables","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"","code":"hts_remove_missing_data(   hts_data,   variables_dt,   summarize_var,   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   summarize_by = NULL,   missing_values = c(\"Missing Response\", \"995\"),   not_imputable = -1 )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"hts_data List containing household, person, day, trip, vehicle datasets data.table format. variables_dt variable list descriptions table locations variables. summarize_var Variable summarized missing data removed. ids names unique identifiers table hts_data summarize_by Variable summarized missing data removed. Default NULL. missing_values Missing values removed. Defaults 995 'Missing Response'. not_imputable Value meaning not_imputable removed. Default -1.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"Inputted list datasets without missing values specified variables.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"","code":"require(data.table) hts_remove_missing_data(hts_data = list('hh' = hh,                                         'person' = person,                                         'day' = day,                                         'trip' = trip,                                         'vehicle' = vehicle),                         variables_dt = variable_list,                         summarize_var = 'speed_mph',                         summarize_by = 'mode_type') #> $hh #>          hh_id sample_segment num_trips num_people income_detailed #>          <int>          <int>     <int>      <int>           <int> #>    1: 23000173              8        66          4               8 #>    2: 23000405             16        80          2              10 #>    3: 23000466             16        81          3               5 #>    4: 23000799              4        45          2               8 #>    5: 23000858             16        10          2              10 #>   ---                                                              #>  996: 23414932             14         0          1               7 #>  997: 23416563             14        16          6               7 #>  998: 23417656              5        11          3              10 #>  999: 23418585              5         2          2               5 #> 1000: 23422311             14         7          2               8 #>       income_followup  home_lon home_lat home_county residence_type hh_weight #>                 <int>     <num>    <num>       <int>          <int>     <int> #>    1:             995 -94.77477 38.86486           2              1       190 #>    2:             995 -91.39139 36.38438           2            997        62 #>    3:             995 -89.40941 35.37538           3              4       313 #>    4:             995 -88.98899 36.18819           1              1       425 #>    5:             995 -91.41141 35.99199           3              2        85 #>   ---                                                                         #>  996:             995 -82.72272 35.94294           3              1        13 #>  997:             995 -88.36837 39.86687           1              2        94 #>  998:             995 -94.37437 33.04204           1              1       759 #>  999:             995 -88.14815 35.20020           2              1       663 #> 1000:             995 -93.57357 37.16216           2              1       888 #>  #> $person #>       ethnicity_1 ethnicity_2 ethnicity_3 ethnicity_4 ethnicity_997 #>             <int>       <int>       <int>       <int>         <int> #>    1:           1           0           0           0             0 #>    2:         995         995         995         995           995 #>    3:         995         995         995         995           995 #>    4:           1           0           0           0             0 #>    5:           1           0           0           0             0 #>   ---                                                               #> 1980:         995         995         995         995           995 #> 1981:           0           1           0           0             0 #> 1982:           0           1           0           0             0 #> 1983:           1           0           0           0             0 #> 1984:           1           0           0           0             0 #>       ethnicity_999 race_1 race_2 race_3 race_4 race_5 race_997 race_999 #>               <int>  <int>  <int>  <int>  <int>  <int>    <int>    <int> #>    1:             0      0      0      0      0      1        0        0 #>    2:           995    995    995    995    995    995      995      995 #>    3:           995    995    995    995    995    995      995      995 #>    4:             0      0      0      0      0      1        0        0 #>    5:             0      0      0      0      0      1        0        0 #>   ---                                                                    #> 1980:           995    995    995    995    995    995      995      995 #> 1981:             0      0      0      0      0      1        0        0 #> 1982:             0      0      0      0      0      1        0        0 #> 1983:             0      0      0      0      0      0        0        1 #> 1984:             0      0      0      0      0      0        0        1 #>          hh_id num_trips  person_id   age gender employment job_type education #>          <int>     <int>      <num> <int>  <int>      <int>    <int>     <int> #>    1: 23000173        21 2300017301     7      2          1        5         6 #>    2: 23000173         5 2300017302     3      2          5      995       995 #>    3: 23000173         2 2300017303     2      2        995      995       995 #>    4: 23000173        38 2300017304     6      1          3        1         6 #>    5: 23000405        30 2300040501     5      2          1        5         6 #>   ---                                                                          #> 1980: 23417656         3 2341765603     1      1        995      995       995 #> 1981: 23418585         2 2341858501     8      2          1        1         3 #> 1982: 23418585         0 2341858502     8      1          2        1         4 #> 1983: 23422311         3 2342231101     8      1          7        3         7 #> 1984: 23422311         4 2342231102     8      2          5      995         3 #>       person_weight #>               <int> #>    1:           196 #>    2:           671 #>    3:           577 #>    4:           688 #>    5:           609 #>   ---               #> 1980:           878 #> 1981:           586 #> 1982:           199 #> 1983:           546 #> 1984:           617 #>  #> $day #>       delivery_2 delivery_3 delivery_4 delivery_5 delivery_6 delivery_7 #>            <int>      <int>      <int>      <int>      <int>      <int> #>    1:          0          0          0          0          0          0 #>    2:        995        995        995        995        995        995 #>    3:        995        995        995        995        995        995 #>    4:          0          0          0          0          0          0 #>    5:          0          0          0          0          0          0 #>   ---                                                                   #> 4289:        995        995        995        995        995        995 #> 4290:          0          0          0          1          0          0 #> 4291:        995        995        995        995        995        995 #> 4292:          0          0          0          1          0          0 #> 4293:        995        995        995        995        995        995 #>       delivery_8 delivery_996    hh_id num_trips  person_id       day_id #>            <int>        <int>    <int>     <int>      <num>        <num> #>    1:          0            1 23000173         0 2300017301 230001730101 #>    2:        995          995 23000173        NA 2300017302 230001730201 #>    3:        995          995 23000173        NA 2300017303 230001730301 #>    4:          0            1 23000173         3 2300017304 230001730401 #>    5:          0            1 23000173         4 2300017301 230001730102 #>   ---                                                                    #> 4289:        995          995 23417656         3 2341765603 234176560301 #> 4290:          0            0 23418585         2 2341858501 234185850101 #> 4291:        995          995 23418585         0 2341858502 234185850201 #> 4292:          0            0 23422311         3 2342231101 234223110101 #> 4293:        995          995 23422311         4 2342231102 234223110201 #>       travel_date begin_day end_day day_weight #>            <Date>     <int>   <int>      <int> #>    1:  2023-04-19         1       1        694 #>    2:  2023-04-19       995     995         90 #>    3:  2023-04-19       995     995        728 #>    4:  2023-04-19         1       1        507 #>    5:  2023-04-20         1       1        296 #>   ---                                          #> 4289:  2023-06-06         1       1        971 #> 4290:  2023-06-06         1       1        892 #> 4291:  2023-06-06         1       1        268 #> 4292:  2023-06-01         1       1        161 #> 4293:  2023-06-01         1       1        350 #>  #> $trip #>           hh_id  person_id       day_id travel_date      trip_id speed_mph #>           <int>      <num>        <num>      <Date>        <num>     <num> #>     1: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12 21.480572 #>     2: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12 23.720178 #>     3: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12  6.927242 #>     4: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12  6.146634 #>     5: 23000173 2300017301 230001730103  2023-04-21 2.300017e+12 34.657421 #>    ---                                                                     #> 15362: 23422311 2342231101 234223110101  2023-06-01 2.342231e+12 25.812478 #> 15363: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 16.040986 #> 15364: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 26.901306 #> 15365: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 16.720703 #> 15366: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 25.812478 #>        distance_miles mode_type mode_1 mode_2 num_travelers d_purpose_category #>                 <num>     <int>  <int>  <int>         <int>              <int> #>     1:       4.755560         8      7    995             2                  9 #>     2:       4.856047         8      7    995             3                  1 #>     3:       1.516296         1      1    995             1                  9 #>     4:       1.393237         1      1    995             1                  1 #>     5:       8.933913         8      7    995             1                  3 #>    ---                                                                         #> 15362:      20.219774         8      6    995             2                  1 #> 15363:       6.683744         8      7    995             1                 10 #> 15364:      20.175979         8      7    995             1                 13 #> 15365:       5.573568         8      6    995             2                  6 #> 15366:      20.219774         8      6    995             2                  1 #>        trip_weight #>              <int> #>     1:         968 #>     2:         906 #>     3:         387 #>     4:         684 #>     5:          64 #>    ---             #> 15362:         624 #> 15363:         322 #> 15364:          22 #> 15365:         596 #> 15366:          95 #>  #> $vehicle #> Key: <hh_id> #>          hh_id vehicle_id fuel_type hh_weight #>          <int>      <num>     <int>     <int> #>    1: 23000173 2300017301         1       190 #>    2: 23000173 2300017302         1       190 #>    3: 23000173 2300017303         1       190 #>    4: 23000405 2300040501         1        62 #>    5: 23000466 2300046601         1       313 #>   ---                                         #> 1384: 23417656 2341765601         1       759 #> 1385: 23418585 2341858501         1       663 #> 1386: 23418585 2341858502         1       663 #> 1387: 23422311 2342231101         4       888 #> 1388: 23422311 2342231102         1       888 #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove outliers from a numeric variable — hts_remove_outliers","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"Remove outliers numeric variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"","code":"hts_remove_outliers(var_dt, numvar = NULL, threshold = 0.975)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"var_dt Dataset numeric variable remove outliers data.table format. numvar Numeric variable remove outliers . Default NULL. threshold Threshold define outlier . Default .975.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"List outliers removed dataset without outliers.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"","code":"require(data.table) hts_remove_outliers(var_dt = trip, numvar = 'speed_mph') #> $outlier_description #>    threshold num_removed min_outlier max_outlier #>        <num>       <int>       <num>       <num> #> 1:     0.975         377    113.0093     5198308 #>  #> $dt #>           hh_id  person_id       day_id travel_date      trip_id speed_mph #>           <int>      <num>        <num>      <Date>        <num>     <num> #>     1: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12 21.480572 #>     2: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12 23.720178 #>     3: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12  6.927242 #>     4: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12  6.146634 #>     5: 23000173 2300017301 230001730103  2023-04-21 2.300017e+12 34.657421 #>    ---                                                                     #> 14681: 23422311 2342231101 234223110101  2023-06-01 2.342231e+12 25.812478 #> 14682: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 16.040986 #> 14683: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 26.901306 #> 14684: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 16.720703 #> 14685: 23422311 2342231102 234223110201  2023-06-01 2.342231e+12 25.812478 #>        distance_miles mode_type mode_1 mode_2 num_travelers d_purpose_category #>                 <num>     <int>  <int>  <int>         <int>              <int> #>     1:       4.755560         8      7    995             2                  9 #>     2:       4.856047         8      7    995             3                  1 #>     3:       1.516296         1      1    995             1                  9 #>     4:       1.393237         1      1    995             1                  1 #>     5:       8.933913         8      7    995             1                  3 #>    ---                                                                         #> 14681:      20.219774         8      6    995             2                  1 #> 14682:       6.683744         8      7    995             1                 10 #> 14683:      20.175979         8      7    995             1                 13 #> 14684:       5.573568         8      6    995             2                  6 #> 14685:      20.219774         8      6    995             2                  1 #>        trip_weight #>              <int> #>     1:         968 #>     2:         906 #>     3:         387 #>     4:         684 #>     5:          64 #>    ---             #> 14681:         624 #> 14682:         322 #> 14683:          22 #> 14684:         596 #> 14685:          95 #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Make household travel survey summaries — hts_summary","title":"Make household travel survey summaries — hts_summary","text":"Make household travel survey summaries","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make household travel survey summaries — hts_summary","text":"","code":"hts_summary(   prepped_dt,   summarize_var,   summarize_by = NULL,   summarize_vartype = \"categorical\",   id_cols = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   weighted = TRUE,   se = FALSE,   wtname = NULL,   strataname = NULL,   checkbox_valname = \"value\",   checkbox_yesval = 1 )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make household travel survey summaries — hts_summary","text":"prepped_dt prepared dataset data.table format variable summarize, variable summarize , weights, used. summarize_var Name variable summarize. Default NULL. summarize_by Name variable summarize summarize_var . Default NULL. summarize_vartype String; one either 'categorical' (variable summarized categorical), 'checkbox' (variable summarized derived multiple response, aka select---apply question) 'numeric', variable summarized numeric. id_cols names possible ids prepped_dt return unique counts weighted Whether data weighted. Default TRUE. se Whether calculate standard error. Default FALSE. set FALSE weighted FALSE. wtname Name weight column use. Default NULL. Must specified weighted = TRUE. strataname Name strata name bring . Default NULL. checkbox_valname Name column checkbox value. Default 'value'. Must provided summarize_var checkbox variable. checkbox_yesval Value checkbox_valname indicates selected. Default 1. Must provided summarize_var checkbox variable.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make household travel survey summaries — hts_summary","text":"list containing (applicable) categorical numeric summaries specified variable(s), well sample sizes whether summarized variable shared checkbox variable. access categorical/numeric df use output$summary. access weighted df use output$summary$wtd, output$summary$unwtd unweighted df. access weight name use output$summary$weight_name. access sample sizes use output$n_ls. access weighted unweighted sample sizes respectively, use output$n_ls$wtd output$n_ls$unwtd.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make household travel survey summaries — hts_summary","text":"","code":"require(data.table) require(stringr) require(dplyr) #> Loading required package: dplyr #> Warning: package 'dplyr' was built under R version 4.3.2 #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:data.table': #>  #>     between, first, last #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union require(srvyr) #> Loading required package: srvyr #> Warning: package 'srvyr' was built under R version 4.3.2 #>  #> Attaching package: 'srvyr' #> The following object is masked from 'package:stats': #>  #>     filter DT = hts_prep_data(summarize_var = 'age',                    summarize_by = 'employment',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person age broken down by person employment output = hts_summary(prepped_dt = DT,               summarize_var = 'age',               summarize_by = 'employment',               summarize_vartype = 'categorical',               wtname = 'person_weight')  DT = hts_prep_data(summarize_var = 'speed_mph',                    summarize_by = 'age',                     variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$num #> Creating a summary of trip speed_mph broken down by person age output = hts_summary(prepped_dt = DT,               summarize_var = 'speed_mph',               summarize_by = 'age',               summarize_vartype = 'numeric',               wtname = 'trip_weight')  DT = hts_prep_data(summarize_var = 'race',                    summarize_by = 'age',                     variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person race broken down by person age output = hts_summary(prepped_dt = DT,               summarize_var = 'race',               summarize_by = 'age',               summarize_vartype = 'checkbox',               wtname = 'person_weight')"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a categorical variable — hts_summary_cat","title":"Summarize a categorical variable — hts_summary_cat","text":"Summarize categorical variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a categorical variable — hts_summary_cat","text":"","code":"hts_summary_cat(   prepped_dt,   summarize_var = NULL,   summarize_by = NULL,   weighted = TRUE,   se = FALSE,   wtname = NULL,   strataname = NULL,   checkbox_valname = \"value\",   checkbox_yesval = 1,   summarize_vartype = \"categorical\",   id_cols = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\") )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a categorical variable — hts_summary_cat","text":"prepped_dt Dataset containing summary variables key columns data.table format. summarize_var Name categorical variable summarize. Default NULL. summarize_by Name variable summarize summarize_var . Default NULL. weighted Whether data weighted. Default TRUE. se Whether calculate standard error. Default FALSE. wtname Name weight column use. Default NULL. strataname Name strata name bring . Default NULL. checkbox_valname Name column checkbox value. Default 'value'. Must provided summarize_var checkbox variable. checkbox_yesval Value checkbox_valname indicates selected. Default 1. Must provided summarize_var checkbox variable. summarize_vartype String; one either 'categorical' (variable summarized categorical) 'checkbox' (variable summarized derived multiple response, aka select---apply question). id_cols names possible ids prepped_dt return unique counts ","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a categorical variable — hts_summary_cat","text":"List unweighted weighted categorical summaries including counts proportions.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a categorical variable — hts_summary_cat","text":"","code":"require(data.table) require(stringr) require(dplyr) require(srvyr) DT = hts_prep_data(summarize_var = 'age',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person age  hts_summary_cat(prepped_dt = DT,                 summarize_var = 'age',                 wtname = 'person_weight') #> $unwtd #> Key: <age> #>       age count        prop #>     <int> <int>       <num> #>  1:     1    79 0.039818548 #>  2:     2   194 0.097782258 #>  3:     3    33 0.016633065 #>  4:     4    99 0.049899194 #>  5:     5   389 0.196068548 #>  6:     6   354 0.178427419 #>  7:     7   234 0.117943548 #>  8:     8   259 0.130544355 #>  9:     9   218 0.109879032 #> 10:    10   119 0.059979839 #> 11:    11     6 0.003024194 #>  #> $wtd #>       age count        prop    est #>     <int> <int>       <num>  <int> #>  1:     1    79 0.042732174  43036 #>  2:     2   194 0.092259038  92915 #>  3:     3    33 0.018525285  18657 #>  4:     4    99 0.049041316  49390 #>  5:     5   389 0.198440091 199851 #>  6:     6   354 0.171938517 173161 #>  7:     7   234 0.117023960 117856 #>  8:     8   259 0.134759857 135718 #>  9:     9   218 0.109464706 110243 #> 10:    10   119 0.062543317  62988 #> 11:    11     6 0.003271738   3295 #>  #> $weight_name #> [1] \"person_weight\" #>                   DT = hts_prep_data(summarize_var = 'race',                    summarize_by = 'employment',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person race broken down by person employment hts_summary_cat(prepped_dt = DT,                 summarize_var = 'race',                 summarize_by = 'employment',                 wtname = 'person_weight',                 summarize_vartype = 'checkbox') #> $unwtd #> Key: <employment> #>     employment                                      race count        prop #>          <int>                                    <fctr> <int>       <num> #>  1:          1                 African American or Black    24 0.029268293 #>  2:          1          American Indian or Alaska Native     6 0.007317073 #>  3:          1                                     Asian   203 0.247560976 #>  4:          1 Native Hawaiian or other Pacific Islander    11 0.013414634 #>  5:          1                                     White   505 0.615853659 #>  6:          1                                Other race    13 0.015853659 #>  7:          1                      Prefer not to answer    92 0.112195122 #>  8:          2                 African American or Black    10 0.068965517 #>  9:          2          American Indian or Alaska Native     2 0.013793103 #> 10:          2                                     Asian    25 0.172413793 #> 11:          2 Native Hawaiian or other Pacific Islander     1 0.006896552 #> 12:          2                                     White   101 0.696551724 #> 13:          2                      Prefer not to answer    16 0.110344828 #> 14:          3                 African American or Black     1 0.009803922 #> 15:          3          American Indian or Alaska Native     3 0.029411765 #> 16:          3                                     Asian    15 0.147058824 #> 17:          3                                     White    76 0.745098039 #> 18:          3                                Other race     2 0.019607843 #> 19:          3                      Prefer not to answer     9 0.088235294 #> 20:          5                 African American or Black    10 0.021834061 #> 21:          5          American Indian or Alaska Native    11 0.024017467 #> 22:          5                                     Asian    69 0.150655022 #> 23:          5 Native Hawaiian or other Pacific Islander     1 0.002183406 #> 24:          5                                     White   343 0.748908297 #> 25:          5                                Other race     8 0.017467249 #> 26:          5                      Prefer not to answer    35 0.076419214 #> 27:          6                 African American or Black     8 0.103896104 #> 28:          6                                     Asian     9 0.116883117 #> 29:          6                                     White    51 0.662337662 #> 30:          6                                Other race     2 0.025974026 #> 31:          6                      Prefer not to answer    10 0.129870130 #> 32:          7                 African American or Black     3 0.200000000 #> 33:          7          American Indian or Alaska Native     1 0.066666667 #> 34:          7                                     Asian     4 0.266666667 #> 35:          7                                     White     8 0.533333333 #> 36:          7                                Other race     1 0.066666667 #> 37:          7                      Prefer not to answer     3 0.200000000 #> 38:          8                                     Asian     1 0.111111111 #> 39:          8                                     White     4 0.444444444 #> 40:          8                                Other race     1 0.111111111 #> 41:          8                      Prefer not to answer     3 0.333333333 #>     employment                                      race count        prop #>  #> $wtd #>     employment                                      race count        prop #>          <int>                                    <fctr> <int>       <num> #>  1:          1                 African American or Black    24 0.028694995 #>  2:          1          American Indian or Alaska Native     6 0.009275864 #>  3:          1                                     Asian   203 0.258106330 #>  4:          1 Native Hawaiian or other Pacific Islander    11 0.017659958 #>  5:          1                                     White   505 0.620537498 #>  6:          1                                Other race    13 0.017940159 #>  7:          1                      Prefer not to answer    92 0.096883680 #>  8:          2                 African American or Black    10 0.063301044 #>  9:          2          American Indian or Alaska Native     2 0.015717331 #> 10:          2                                     Asian    25 0.154313159 #> 11:          2 Native Hawaiian or other Pacific Islander     1 0.006475810 #> 12:          2                                     White   101 0.680675103 #> 13:          2                      Prefer not to answer    16 0.135196028 #> 14:          3                 African American or Black     1 0.015622480 #> 15:          3          American Indian or Alaska Native     3 0.021448154 #> 16:          3                                     Asian    15 0.145460410 #> 17:          3                                     White    76 0.747802774 #> 18:          3                                Other race     2 0.013183358 #> 19:          3                      Prefer not to answer     9 0.099520239 #> 20:          5                 African American or Black    10 0.025855586 #> 21:          5          American Indian or Alaska Native    11 0.026347325 #> 22:          5                                     Asian    69 0.144806982 #> 23:          5 Native Hawaiian or other Pacific Islander     1 0.003297548 #> 24:          5                                     White   343 0.739481318 #> 25:          5                                Other race     8 0.021636542 #> 26:          5                      Prefer not to answer    35 0.080426285 #> 27:          6                 African American or Black     8 0.090334120 #> 28:          6                                     Asian     9 0.091319111 #> 29:          6                                     White    51 0.699473807 #> 30:          6                                Other race     2 0.022395604 #> 31:          6                      Prefer not to answer    10 0.133025739 #> 32:          7                 African American or Black     3 0.121598770 #> 33:          7          American Indian or Alaska Native     1 0.037509608 #> 34:          7                                     Asian     4 0.186625673 #> 35:          7                                     White     8 0.506994620 #> 36:          7                                Other race     1 0.037509608 #> 37:          7                      Prefer not to answer     3 0.295772483 #> 38:          8                                     Asian     1 0.166990763 #> 39:          8                                     White     4 0.401798736 #> 40:          8                                Other race     1 0.095527467 #> 41:          8                      Prefer not to answer     3 0.335683034 #>     employment                                      race count        prop #>        est wtd_group_n #>      <int>       <int> #>  1:  11777      410420 #>  2:   3807      410420 #>  3: 105932      410420 #>  4:   7248      410420 #>  5: 254681      410420 #>  6:   7363      410420 #>  7:  39763      410420 #>  8:   4692       74122 #>  9:   1165       74122 #> 10:  11438       74122 #> 11:    480       74122 #> 12:  50453       74122 #> 13:  10021       74122 #> 14:    775       49608 #> 15:   1064       49608 #> 16:   7216       49608 #> 17:  37097       49608 #> 18:    654       49608 #> 19:   4937       49608 #> 20:   6257      241998 #> 21:   6376      241998 #> 22:  35043      241998 #> 23:    798      241998 #> 24: 178953      241998 #> 25:   5236      241998 #> 26:  19463      241998 #> 27:   3485       38579 #> 28:   3523       38579 #> 29:  26985       38579 #> 30:    864       38579 #> 31:   5132       38579 #> 32:    791        6505 #> 33:    244        6505 #> 34:   1214        6505 #> 35:   3298        6505 #> 36:    244        6505 #> 37:   1924        6505 #> 38:    687        4114 #> 39:   1653        4114 #> 40:    393        4114 #> 41:   1381        4114 #>        est wtd_group_n #>  #> $weight_name #> [1] \"person_weight\" #>                   DT = hts_prep_data(summarize_var = 'employment',                 summarize_by = c('race', 'income_detailed', 'gender'),                 variables_dt = variable_list,                 data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle))$cat #> Creating a summary of person employment broken down by person race and hh income_detailed and person gender  hts_summary_cat(prepped_dt = DT,                 summarize_var = 'employment',                 summarize_by = c('race', 'income_detailed', 'gender'),                 wtname = 'person_weight')$unwtd #> Key: <race, income_detailed, gender> #>                           race income_detailed gender employment count #>                         <fctr>           <int>  <int>      <int> <int> #>   1: African American or Black               1      1          5     2 #>   2: African American or Black               1      1          6     1 #>   3: African American or Black               1      2          6     1 #>   4: African American or Black               2      1          1     1 #>   5: African American or Black               2      1          5     2 #>  ---                                                                   #> 394:      Prefer not to answer             999    999          1    24 #> 395:      Prefer not to answer             999    999          2     1 #> 396:      Prefer not to answer             999    999          3     1 #> 397:      Prefer not to answer             999    999          5     5 #> 398:      Prefer not to answer             999    999          6     1 #>           prop #>          <num> #>   1: 0.6666667 #>   2: 0.3333333 #>   3: 1.0000000 #>   4: 0.2000000 #>   5: 0.4000000 #>  ---           #> 394: 0.7500000 #> 395: 0.0312500 #> 396: 0.0312500 #> 397: 0.1562500 #> 398: 0.0312500"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a numeric variable — hts_summary_num","title":"Summarize a numeric variable — hts_summary_num","text":"Summarize numeric variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a numeric variable — hts_summary_num","text":"","code":"hts_summary_num(   prepped_dt,   summarize_var = NULL,   summarize_by = NULL,   weighted = TRUE,   se = FALSE,   wtname = NULL,   strataname = NULL )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a numeric variable — hts_summary_num","text":"prepped_dt prepared dataset data.table format variable summarize, variable summarize , weights, used. summarize_var Name variable summarize. Default NULL. summarize_by Name variable summarize summarize_var . Default NULL. weighted Whether data weighted. Default TRUE. se Whether calculate standard error. Default FALSE. set FALSE weighted FALSE. wtname Name weight column use. Default NULL. Must specified weighted = TRUE. strataname Name strata name bring . Default NULL.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a numeric variable — hts_summary_num","text":"List unweighted weighted numeric summaries including count, min, max, mean, se, median.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a numeric variable — hts_summary_num","text":"","code":"require(data.table) require(stringr) require(dplyr) require(srvyr) DT = hts_prep_data(summarize_var = 'speed_mph',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$num #> Creating a summary of trip speed_mph  hts_summary_num(prepped_dt = DT,                 summarize_var = 'speed_mph',                 wtname = 'trip_weight') #> $unwtd #>    count   min      max     mean  median #>    <int> <num>    <num>    <num>   <num> #> 1: 14685     0 112.9918 11.83172 8.63421 #>  #> $wtd #>    count   min      max    mean   median #>    <int> <num>    <num>   <num>    <num> #> 1: 14685     0 112.9918 11.8349 8.618818 #>  #> $weight_name #> [1] \"trip_weight\" #>  DT = hts_prep_data(summarize_var = 'speed_mph',                    summarize_by = 'age',                     variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$num #> Creating a summary of trip speed_mph broken down by person age hts_summary_num(prepped_dt = DT,                 summarize_var = 'speed_mph',                 summarize_by = 'age',                 wtname = 'trip_weight') #> $unwtd #>       age count        min       max      mean    median #>     <int> <int>      <num>     <num>     <num>     <num> #>  1:     1   296 0.08714984 101.97575 11.133769  7.385581 #>  2:     2   743 0.11910113 109.83115 10.434704  8.880725 #>  3:     3   101 0.00000000  82.63329 13.845243 11.990414 #>  4:     4   980 0.00000000 112.99185  9.535263  5.138501 #>  5:     5  3006 0.00000000 108.02176 11.713822  7.568860 #>  6:     6  3518 0.00000000 112.53715 10.896587  7.745927 #>  7:     7  1825 0.00000000 112.37068 13.201686 10.388775 #>  8:     8  1759 0.00000000 108.05151 13.253130 10.530855 #>  9:     9  1767 0.00000000 107.93792 12.783168  9.682409 #> 10:    10   674 0.00000000  63.09036 12.136437  9.821970 #> 11:    11    16 0.82500585  88.79454 14.887919  6.119036 #>  #> $wtd #>       age count        min       max      mean    median #>     <int> <int>      <num>     <num>     <num>     <num> #>  1:     1   296 0.08714984 101.97575 11.757763  7.713921 #>  2:     2   743 0.11910113 109.83115 10.448693  9.024466 #>  3:     3   101 0.00000000  82.63329 14.582794 12.965059 #>  4:     4   980 0.00000000 112.99185  9.090289  4.795173 #>  5:     5  3006 0.00000000 108.02176 11.616469  7.425500 #>  6:     6  3518 0.00000000 112.53715 10.985165  7.769085 #>  7:     7  1825 0.00000000 112.37068 12.990898 10.022160 #>  8:     8  1759 0.00000000 108.05151 13.138908 10.593106 #>  9:     9  1767 0.00000000 107.93792 13.124612 10.114323 #> 10:    10   674 0.00000000  63.09036 12.642415 10.661429 #> 11:    11    16 0.82500585  88.79454 15.323818  6.541481 #>  #> $weight_name #> [1] \"trip_weight\" #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform travel survey data.table to a survey object — hts_to_so","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"Transform travel survey data.table survey object","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"","code":"hts_to_so(prepped_dt, weighted = TRUE, wtname = NULL, strataname = NULL)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"prepped_dt Dataframe data.table format transform survey object. weighted true creates weighted survey object. Default TRUE. wtname Name weight column dataframe. Defaults NULL, must exist weighted true. strataname Name strata name bring . Default NULL.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"Inputted dataframe transformed survey object.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"","code":"require(data.table) hts_to_so(prepped_dt = trip, wtname = 'trip_weight') #> Independent Sampling design (with replacement) #> Called via srvyr #> Sampling variables: #>  - ids: `1` #>  - weights: weight #> Data variables: hh_id (int), person_id (dbl), day_id (dbl), travel_date (date), #>   trip_id (dbl), speed_mph (dbl), distance_miles (dbl), mode_type (int), mode_1 #>   (int), mode_2 (int), num_travelers (int), d_purpose_category (int), weight #>   (int)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":null,"dir":"Reference","previous_headings":"","what":"Add vehicle_id to trip table — hts_trip_vehid","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"Add vehicle_id trip table","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"","code":"hts_trip_vehid(   trip_table,   vehicle_table,   vehicle_mode_type = \"Vehicle\",   values_dt = value_labels,   ... )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"trip_table Dataset trips data.table format. vehicle_table Dataset vehicles data.table format. vehicle_mode_type Mode type label vehicle. Default 'Vehicle'. values_dt Dataset value labels data.table format. ... Additional arguments passed link{factorize_column}","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"Trip table vehicle_id attached.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"","code":"require(data.table) trip_ex = data.table(       hh_id = sample(1:10, size = 30, replace = TRUE),       trip_id = 1:30,       mode_type = sample(1:2, size = 30, replace = TRUE),       mode_1 = sample(1, size = 30, replace = TRUE)) vehicle_ex = data.table(       hh_id = sample(1:10, size = 30, replace = TRUE),       vehicle_id = 1:30) values_ex = data.table(       variable = c(rep('mode_type', 2), ('mode_1')),       value = c(1,2,1),       value_label = c('Vehicle', 'Walk', 'Car')       ) hts_trip_vehid(trip_table = trip_ex,                vehicle_table = vehicle_ex,                vehicle_mode_type = 'Vehicle',                values_dt = values_ex) #>     hh_id trip_id mode_type mode_1 vehicle_id #>     <int>   <int>     <int>  <int>      <ord> #>  1:     7       1         2      1       <NA> #>  2:     5       2         2      1       <NA> #>  3:     6       3         1      1       <NA> #>  4:     4       4         1      1       <NA> #>  5:     6       5         2      1       <NA> #>  6:     9       6         2      1       <NA> #>  7:     5       7         1      1       <NA> #>  8:     5       8         2      1       <NA> #>  9:     8       9         1      1       <NA> #> 10:     2      10         1      1       <NA> #> 11:     7      11         1      1       <NA> #> 12:     5      12         2      1       <NA> #> 13:     5      13         1      1       <NA> #> 14:     2      14         2      1       <NA> #> 15:     6      15         1      1       <NA> #> 16:     4      16         2      1       <NA> #> 17:     2      17         2      1       <NA> #> 18:     3      18         1      1       <NA> #> 19:     9      19         2      1       <NA> #> 20:     6      20         2      1       <NA> #> 21:     7      21         2      1       <NA> #> 22:     5      22         1      1       <NA> #> 23:     6      23         2      1       <NA> #> 24:     9      24         1      1       <NA> #> 25:     6      25         2      1       <NA> #> 26:    10      26         1      1       <NA> #> 27:     5      27         2      1       <NA> #> 28:     2      28         1      1       <NA> #> 29:     1      29         2      1       <NA> #> 30:     4      30         2      1       <NA> #>     hh_id trip_id mode_type mode_1 vehicle_id"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_validate_variable_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that variable list has required elements for hts_prep_data returns updated variable list or prompts error — hts_validate_variable_list","title":"Check that variable list has required elements for hts_prep_data returns updated variable list or prompts error — hts_validate_variable_list","text":"Check variable list required elements hts_prep_data returns updated variable list prompts error","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_validate_variable_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that variable list has required elements for hts_prep_data returns updated variable list or prompts error — hts_validate_variable_list","text":"","code":"hts_validate_variable_list(variable_list, hts_data)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_validate_variable_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that variable list has required elements for hts_prep_data returns updated variable list or prompts error — hts_validate_variable_list","text":"variable_list Name variable summarize. Default NULL hts_data List named tables specified hts_prep_data","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_validate_variable_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that variable list has required elements for hts_prep_data returns updated variable list or prompts error — hts_validate_variable_list","text":"Cleaned variable_list","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_validate_variable_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that variable list has required elements for hts_prep_data returns updated variable list or prompts error — hts_validate_variable_list","text":"","code":"hts_validate_variable_list(variable_list, test_data) #>               variable is_checkbox           data_type #>                 <char>       <num>              <char> #>  1:                age           0         categorical #>  2:          begin_day           0         categorical #>  3: d_purpose_category           0         categorical #>  4:             day_id           0             numeric #>  5:         day_weight           0             integer #>  6:         delivery_2           1 integer/categorical #>  7:         delivery_3           1 integer/categorical #>  8:         delivery_4           1 integer/categorical #>  9:         delivery_5           1 integer/categorical #> 10:         delivery_6           1 integer/categorical #> 11:         delivery_7           1 integer/categorical #> 12:         delivery_8           1 integer/categorical #> 13:       delivery_996           1 integer/categorical #> 14:     distance_miles           0             numeric #> 15:          education           0         categorical #> 16:         employment           0         categorical #> 17:            end_day           0         categorical #> 18:        ethnicity_1           1 integer/categorical #> 19:        ethnicity_2           1 integer/categorical #> 20:        ethnicity_3           1 integer/categorical #> 21:        ethnicity_4           1 integer/categorical #> 22:      ethnicity_997           1 integer/categorical #> 23:      ethnicity_999           1 integer/categorical #> 24:          fuel_type           0         categorical #> 25:             gender           0         categorical #> 26:              hh_id           0             integer #> 27:          hh_weight           0             integer #> 28:        home_county           0           character #> 29:           home_lat           0             numeric #> 30:           home_lon           0             numeric #> 31:    income_detailed           0         categorical #> 32:    income_followup           0         categorical #> 33:           job_type           0         categorical #> 34:             mode_1           0 integer/categorical #> 35:             mode_2           0 integer/categorical #> 36:          mode_type           0         categorical #> 37:         num_people           0             numeric #> 38:      num_travelers           0         categorical #> 39:          num_trips           0             numeric #> 40:          person_id           0             numeric #> 41:      person_weight           0             integer #> 42:             race_1           1 integer/categorical #> 43:             race_2           1 integer/categorical #> 44:             race_3           1 integer/categorical #> 45:             race_4           1 integer/categorical #> 46:             race_5           1 integer/categorical #> 47:           race_997           1 integer/categorical #> 48:           race_999           1 integer/categorical #> 49:     residence_type           0         categorical #> 50:     sample_segment           0         categorical #> 51:          speed_mph           0             numeric #> 52:        travel_date           0                date #> 53:            trip_id           0             numeric #> 54:        trip_weight           0             integer #> 55:         vehicle_id           0             numeric #>               variable is_checkbox           data_type #>                                                                                              description #>                                                                                                   <char> #>  1:                                                                              Age of household member #>  2:                                                                    Where participant began their day #>  3:                                                                         Destination purpose category #>  4:                                                                                               Day ID #>  5:                                                                                           Day weight #>  6:                                           Type of delivery: Take-out/prepared food delivered to home #>  7:            Type of delivery: Someone came to do work at home (e.g., babysitter, housecleaning, lawn) #>  8:                                                        Type of delivery: Groceries delivered to home #>  9:                                 Type of delivery: Received packages at home (e.g., USPS, FedEx, UPS) #> 10:                                                 Type of delivery: Received personal packages at work #> 11: Type of delivery: Received packages at another location (e.g., Amazon Locker, package pick-up point) #> 12:                                     Type of delivery: Other item delivered to home (e.g., appliance) #> 13:                                                                  Type of delivery: None of the above #> 14:                                                                                     Distance (miles) #> 15:                                                                 Highest level of education completed #> 16:                                                                                    Employment status #> 17:                                                                    Where participant emded their day #> 18:                                                Ethnicity: Not of Hispanic, Latino, or Spanish origin #> 19:                                                        Ethnicity: Mexican, Mexican American, Chicano #> 20:                                                                              Ethnicity: Puerto Rican #> 21:                                                                                     Ethnicity: Cuban #> 22:                                               Ethnicity: Another Hispanic, Latino, or Spanish origin #> 23:                                                                      Ethnicity: Prefer not to answer #> 24:                                                                                    Vehicle fuel type #> 25:                                                                                               Gender #> 26:                                                                                         Household ID #> 27:                                                                                     Household weight #> 28:                                                                               Home location-- County #> 29:                                                                             Home location-- Latitude #> 30:                                                                            Home location-- Longitude #> 31:                                                   Last year's household income (detailed categories) #> 32:                                                      Last year's household income (broad categories) #> 33:                                                                                   Work location type #> 34:                                                                                          Trip mode 1 #> 35:                                                                                          Trip mode 2 #> 36:                                                                                            Mode type #> 37:                                                                          Number of household members #> 38:                                                                     Number of people in travel party #> 39:                                                                                      Number of trips #> 40:                                                                                            Person ID #> 41:                                                                                        Person weight #> 42:                                                                      Race: African American or Black #> 43:                                                               Race: American Indian or Alaska Native #> 44:                                                                                          Race: Asian #> 45:                                                      Race: Native Hawaiian or other Pacific Islander #> 46:                                                                                          Race: White #> 47:                                                                                     Race: Other race #> 48:                                                                           Race: Prefer not to answer #> 49:                                                                            Type of current residence #> 50:                                                                                       Sample segment #> 51:                                                                                          Speed (mph) #> 52:                                                                                          Travel date #> 53:                                                                                              Trip ID #> 54:                                                                                          Trip weight #> 55:                                                                                           Vehicle ID #>                                                                                              description #>            shared_name    hh person   day  trip vehicle #>                 <char> <num>  <num> <num> <num>   <num> #>  1:                age     0      1     0     0       0 #>  2:          begin_day     0      0     1     0       0 #>  3: d_purpose_category     0      0     0     1       0 #>  4:             day_id     0      0     1     1       0 #>  5:         day_weight     0      0     1     0       0 #>  6:           delivery     0      0     1     0       0 #>  7:           delivery     0      0     1     0       0 #>  8:           delivery     0      0     1     0       0 #>  9:           delivery     0      0     1     0       0 #> 10:           delivery     0      0     1     0       0 #> 11:           delivery     0      0     1     0       0 #> 12:           delivery     0      0     1     0       0 #> 13:           delivery     0      0     1     0       0 #> 14:     distance_miles     0      0     0     1       0 #> 15:          education     0      1     0     0       0 #> 16:         employment     0      1     0     0       0 #> 17:            end_day     0      0     1     0       0 #> 18:          ethnicity     0      1     0     0       0 #> 19:          ethnicity     0      1     0     0       0 #> 20:          ethnicity     0      1     0     0       0 #> 21:          ethnicity     0      1     0     0       0 #> 22:          ethnicity     0      1     0     0       0 #> 23:          ethnicity     0      1     0     0       0 #> 24:          fuel_type     0      0     0     0       1 #> 25:             gender     0      1     0     0       0 #> 26:              hh_id     1      1     1     1       1 #> 27:          hh_weight     1      0     0     0       0 #> 28:        home_county     1      0     0     0       0 #> 29:           home_lat     1      0     0     0       0 #> 30:           home_lon     1      0     0     0       0 #> 31:    income_detailed     1      0     0     0       0 #> 32:    income_followup     1      0     0     0       0 #> 33:           job_type     0      1     0     0       0 #> 34:             mode_1     0      0     0     1       0 #> 35:             mode_2     0      0     0     1       0 #> 36:          mode_type     0      0     0     1       0 #> 37:         num_people     1      0     0     0       0 #> 38:      num_travelers     0      0     0     1       0 #> 39:          num_trips     1      1     1     0       0 #> 40:          person_id     0      1     1     1       0 #> 41:      person_weight     0      1     0     0       0 #> 42:               race     0      1     0     0       0 #> 43:               race     0      1     0     0       0 #> 44:               race     0      1     0     0       0 #> 45:               race     0      1     0     0       0 #> 46:               race     0      1     0     0       0 #> 47:               race     0      1     0     0       0 #> 48:               race     0      1     0     0       0 #> 49:     residence_type     1      0     0     0       0 #> 50:     sample_segment     1      0     0     0       0 #> 51:          speed_mph     0      0     0     1       0 #> 52:        travel_date     0      0     1     1       0 #> 53:            trip_id     0      0     0     1       0 #> 54:        trip_weight     0      0     0     1       0 #> 55:         vehicle_id     0      0     0     0       1 #>            shared_name    hh person   day  trip vehicle"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Join spatial data to points — join_spatial","title":"Join spatial data to points — join_spatial","text":"Performs spatial join obtain geographic fields specified lon/lat columns.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join spatial data to points — join_spatial","text":"","code":"join_spatial(   x,   y,   id_col,   lon_col,   lat_col,   crs_lonlat = 4326,   crs_equal_area = 5070,   largest = FALSE )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join spatial data to points — join_spatial","text":"x data.table survey data y sf object geometry interest id_col character. column x unique identifier lon_col character. column x longitude lat_col character.  column x latitude crs_lonlat numeric.  EPSG code lonlat data (defaults WGS84) crs_equal_area numeric.  EPSG code equal area projection. Many spatial operations assume projected data (lon/lat).  Defaults US Albers Equal Area largest logical.  TRUE, return x features fields y largest overlap features x; see st_join. useful join returning one value y x.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join spatial data to points — join_spatial","text":"data.table returned columns x plus columns y.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Join spatial data to points — join_spatial","text":"Matt Landis","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join spatial data to points — join_spatial","text":"","code":"if (FALSE) { x = data.table(id = 1:3, lon=c(-82.33, -79.17, -76.17), lat = c(35.50, 36.27, 36.49)) nc = st_read(system.file('shape/nc.shp', package='sf'))[, c('FIPS', 'NAME', 'geometry')] z = join_spatial(x, nc, id_col='id', lon_col = 'lon', lat_col = 'lat') z}"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":null,"dir":"Reference","previous_headings":"","what":"Test person dataset — person","title":"Test person dataset — person","text":"dataset containing person level attributes almost 2,000 persons 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test person dataset — person","text":"","code":"person"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":"person","dir":"Reference","previous_headings":"","what":"person","title":"Test person dataset — person","text":"data frame 1,999 rows 19 columns: hh_id 8 digit household ID person_id 10 digit person ID ethnicity_1 Hispnic, Latino, Spanish origin, response codes ethnicity_2 Mexican, Mexican American, Chicano, response codes ethnicity_3 Puerto Rican, response codes ethnicity_4 Cuban, response codes ethnicity_997 Another Hispanic, Latino, Spanish origin, response codes ethnicity_999 Prefer answer, response codes race_1 African American Black, response codes race_2 Americian Indian Alaska Native, response codes race_3 Asian, response codes race_4 Native Hawaiian Pacific Islander, response codes race_5 White, response codes race_997 race, response codes race_999 Prefer answer, response codes age Age, response codes gender Gender, response codes employment Employment status, response codes education Highest level education completed, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test person dataset — person","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Test household travel survey dataset — test_data","title":"Test household travel survey dataset — test_data","text":"Test household travel survey dataset","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test household travel survey dataset — test_data","text":"","code":"test_data"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":"test-data","dir":"Reference","previous_headings":"","what":"test_data","title":"Test household travel survey dataset — test_data","text":"list containing following datasets:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test household travel survey dataset — test_data","text":"list export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":null,"dir":"Reference","previous_headings":"","what":"Test trip dataset — trip","title":"Test trip dataset — trip","text":"dataset containing attributes 20,000 trips 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test trip dataset — trip","text":"","code":"trip"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":"trip","dir":"Reference","previous_headings":"","what":"trip","title":"Test trip dataset — trip","text":"data frame 21,378 rows 7 columns: hh_id 8 digit household ID person_id 10 digit person ID day_id 12 digit day ID trip_id 13 digit trip ID travel_date Date trip mode_type Type transportation used trip, response codes d_purpose_category Purpose taking trip destination, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test trip dataset — trip","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/value_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"List of values and their labels — value_labels","title":"List of values and their labels — value_labels","text":"dataset containing values variables found variable_list variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/value_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of values and their labels — value_labels","text":"","code":"value_labels"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/value_labels.html","id":"value-labels","dir":"Reference","previous_headings":"","what":"value_labels","title":"List of values and their labels — value_labels","text":"data frame 210 rows 3 columns: variable Name variable value numeric value variable label numeric value variable represents","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/variable_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List of variables — variable_list","title":"List of variables — variable_list","text":"dataset containing information variables data. must contain one binary column indicating table location table data (ie., hh, person, day, trip, vehicle).","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/variable_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of variables — variable_list","text":"","code":"variable_list"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/variable_list.html","id":"variable-list","dir":"Reference","previous_headings":"","what":"variable_list","title":"List of variables — variable_list","text":"data frame 55 rows 10 columns: variable Name variable is_checkbox variable 'Select Apply' question hh variable exists hh table person variable exists person table day variable exists day table trip variable exists trip table vehicle variable exists vehicle table data_type Data type variable (\"iteger/categorical\", \"numeric\", \"character\") description description variable shared_name Shared part name checkbox variable (e.g., race_1 -> race) variable name (e.g., age -> age)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":null,"dir":"Reference","previous_headings":"","what":"Test vehicle dataset — vehicle","title":"Test vehicle dataset — vehicle","text":"dataset containing attributes 6,500 vehicles 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test vehicle dataset — vehicle","text":"","code":"vehicle"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":"vehicle","dir":"Reference","previous_headings":"","what":"vehicle","title":"Test vehicle dataset — vehicle","text":"data frame 1,366 rows 3 columns: hh_id 8 digit household ID vehicle_id 10 digit vehicle ID fuel_type Type fuel taken vehicle, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test vehicle dataset — vehicle","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/news/index.html","id":"travelsurveytools-230","dir":"Changelog","previous_headings":"","what":"travelSurveyTools 2.3.0","title":"travelSurveyTools 2.3.0","text":"Set missing weights 0","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/news/index.html","id":"travelsurveytools-220","dir":"Changelog","previous_headings":"","what":"travelSurveyTools 2.2.0","title":"travelSurveyTools 2.2.0","text":"Add example using year getting_started vignette","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/news/index.html","id":"travelsurveytools-210","dir":"Changelog","previous_headings":"","what":"travelSurveyTools 2.1.0","title":"travelSurveyTools 2.1.0","text":"Fix bug checkbox variable proportions (hts_summary_cat)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/news/index.html","id":"travelsurveytools-200","dir":"Changelog","previous_headings":"","what":"travelSurveyTools 2.0.0","title":"travelSurveyTools 2.0.0","text":"Add function check variable_list (hts_validate_variable_list)","code":""},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/news/index.html","id":"travelsurveytools-09","dir":"Changelog","previous_headings":"","what":"travelSurveyTools 0.9","title":"travelSurveyTools 0.9","text":"adding changelog file Initial CRAN submission.","code":""}]
