[{"path":"https://rsginc.github.io/travelSurveyTools/articles/geographic_summaries.html","id":"creating-summaries-by-geographic-variables-using-hts_summary","dir":"Articles","previous_headings":"","what":"Creating summaries by geographic variables using hts_summary","title":"Creating user-specified geographic summaries","text":"hts_summary can summarize geographic variables.","code":"DT = hts_prep_data(summarize_var = 'income_detailed', summarize_by = 'home_county', data = test_data)  output = hts_summary(prepped_dt = DT$cat, summarize_var = 'income_detailed', summarize_by = 'home_county')  factorize_df(output$summary$unwtd, vals_df = value_labels, value_label_colname = 'label') ##      home_county      income_detailed count       prop ##  1: Arike County        Under $10,000    12 0.03785489 ##  2: Arike County      $10,000-$24,999    22 0.06940063 ##  3: Arike County      $25,000-$34,999     9 0.02839117 ##  4: Arike County      $35,000-$49,999    23 0.07255521 ##  5: Arike County      $50,000-$74,999    34 0.10725552 ##  6: Arike County      $75,000-$99,999    40 0.12618297 ##  7: Arike County    $100,000-$149,999    51 0.16088328 ##  8: Arike County    $150,000-$199,999    31 0.09779180 ##  9: Arike County    $200,000-$249,999    27 0.08517350 ## 10: Arike County     $250,000 or more    28 0.08832808 ## 11: Arike County Prefer not to answer    40 0.12618297 ## 12: Clark County        Under $10,000    10 0.02801120 ## 13: Clark County      $10,000-$24,999    21 0.05882353 ## 14: Clark County      $25,000-$34,999    17 0.04761905 ## 15: Clark County      $35,000-$49,999    23 0.06442577 ## 16: Clark County      $50,000-$74,999    49 0.13725490 ## 17: Clark County      $75,000-$99,999    45 0.12605042 ## 18: Clark County    $100,000-$149,999    65 0.18207283 ## 19: Clark County    $150,000-$199,999    33 0.09243697 ## 20: Clark County    $200,000-$249,999    26 0.07282913 ## 21: Clark County     $250,000 or more    32 0.08963585 ## 22: Clark County Prefer not to answer    36 0.10084034 ## 23: Moore County        Under $10,000    11 0.03374233 ## 24: Moore County      $10,000-$24,999    21 0.06441718 ## 25: Moore County      $25,000-$34,999    14 0.04294479 ## 26: Moore County      $35,000-$49,999    22 0.06748466 ## 27: Moore County      $50,000-$74,999    35 0.10736196 ## 28: Moore County      $75,000-$99,999    41 0.12576687 ## 29: Moore County    $100,000-$149,999    47 0.14417178 ## 30: Moore County    $150,000-$199,999    40 0.12269939 ## 31: Moore County    $200,000-$249,999    21 0.06441718 ## 32: Moore County     $250,000 or more    33 0.10122699 ## 33: Moore County Prefer not to answer    41 0.12576687 ##      home_county      income_detailed count       prop"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/geographic_summaries.html","id":"using-spatial_join-to-join-together-separate-shapefiles","dir":"Articles","previous_headings":"","what":"Using spatial_join to join together separate shapefiles","title":"Creating user-specified geographic summaries","text":"spatial_join can link together multiple geographies.","code":"hh = join_spatial(     hh,     dplyr::select(states, home_state = NAME),     id_col = 'hh_id',     lon_col = 'home_lon',     lat_col = 'home_lat',     largest = TRUE)  hh[, .N, home_state] ##         home_state   N ##  1:       Illinois  55 ##  2:       Arkansas 109 ##  3:         Kansas 113 ##  4:       Missouri 108 ##  5: South Carolina  37 ##  6:      Tennessee  84 ##  7:       Oklahoma 118 ##  8:        Georgia  45 ##  9:       Virginia  10 ## 10:        Indiana  35 ## 11:       Kentucky  79 ## 12:    Mississippi  33 ## 13:           Ohio  31 ## 14: North Carolina  35 ## 15:  West Virginia  27 ## 16:        Alabama  42 ## 17:          Texas  38 ## 18:   Pennsylvania   1"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"about-travelsurveytools","dir":"Articles","previous_headings":"","what":"About TravelSurveyTools","title":"Getting Started","text":"travelSurveyTools package provides tools R users aid use data household travel surveys. possible uses include creating custom cross tabs, labeling data, calculating trip rates.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"data-assumptions","dir":"Articles","previous_headings":"","what":"Data Assumptions","title":"Getting Started","text":"travelSurveyTools assumes data structure shown . reflect structure data","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"hts_data","dir":"Articles","previous_headings":"Data Assumptions","what":"hts_data","title":"Getting Started","text":"hts_data list five core tables:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"hh","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"hh","title":"Getting Started","text":"Household dataset hh_id: 8 digit household ID survey variables asked household level hh_weight: household weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"person","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"person","title":"Getting Started","text":"Person dataset hh_id: 8 digit household ID person_id: 10 digit person ID survey variables asked person level person_weight: person weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"day","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"day","title":"Getting Started","text":"Day dataset hh_id: 8 digit household ID person_id: 10 digit person ID day_id: 12 digit day ID survey variable asked day level day_weight: day weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"trip","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"trip","title":"Getting Started","text":"Trip dataset hh_id: 8 digit household ID person_id: 10 digit person ID day_id: 12 digit day ID trip_id: 13 digit trip ID survey variables asked trip level trip_weight: trip weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"vehicle","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"vehicle","title":"Getting Started","text":"Vehicle dataset hh_id: 8 digit household ID vehicle_id: 10 digit vehicle ID survey responses asked vehicle level hh_weight: household weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"codebook","dir":"Articles","previous_headings":"Data Assumptions","what":"Codebook","title":"Getting Started","text":"addition data household travel survey. codebook also required. codebook assumed two parts:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"variable_list","dir":"Articles","previous_headings":"Data Assumptions > Codebook","what":"variable_list","title":"Getting Started","text":"dataset containing information variables existing hh, person, day, trip, vehicle tables. variables follows: variable: Name variable is_checkbox: variable ‘Select Apply’ question hh: variable exists hh table person: variable exists person table day: variable exists day table trip: variable exists trip table vehicle: variable exists vehicle table location: variable exists location table data_type: Data type variable description: description variable logic: Conditions variable value shared_name: shared name checkbox variable variable name non-checkbox variables","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"value_labels","dir":"Articles","previous_headings":"Data Assumptions > Codebook","what":"value_labels","title":"Getting Started","text":"dataset containing values variables found variable_list variables follows: variable: Name variable value: numeric value variable label: numeric value variable represents label_value: value concatenated label (e.g., 11 85 older) val_order: order variable label appear ","code":""},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"prepping-the-data","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Prepping the Data","title":"Getting Started","text":"order create summaries data first need prepare data. can using hts_prep_data. return categorical (cat) numeric (num) (applicable) prepped data table can used create summaries. Numeric variables automatically binned hts_prep_data create categorical summaries. can make categorical summary numeric variable using hts_summary. Additionally, numeric variables can create numeric summaries.","code":"library(travelSurveyTools) library(data.table) library(srvyr)  # Load data data(\"test_data\") data(\"variable_list\") data(\"value_labels\")  DT = hts_prep_data(summarize_var = 'speed_mph',                    variables_dt = variable_list,                    data = test_data) speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = FALSE)  speed_cat_summary$summary ## $unwtd ##     speed_mph count       prop ## 1:  1 or less   668 0.04102438 ## 2:       1-10  7935 0.48731806 ## 3:      10-19  3994 0.24528650 ## 4:      19-28  2027 0.12448566 ## 5:      28-37   852 0.05232451 ## 6:      37-45   394 0.02419702 ## 7: 45 or more   413 0.02536388 speed_num_summary = hts_summary(prepped_dt = DT$num,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'numeric',                                 weighted = FALSE)  speed_num_summary$summary ## $unwtd ##    count min      max     mean   median ## 1: 16283   0 123.3683 12.71216 9.213738"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"using-weighted-data","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Using Weighted Data","title":"Getting Started","text":"Additionally, can use weighted data setting weighted = TRUE specifying name weight used (wtname).","code":"speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = TRUE,                                 wtname = 'trip_weight')  speed_cat_summary$summary ## $unwtd ##     speed_mph count       prop ## 1:  1 or less   668 0.04102438 ## 2:       1-10  7935 0.48731806 ## 3:      10-19  3994 0.24528650 ## 4:      19-28  2027 0.12448566 ## 5:      28-37   852 0.05232451 ## 6:      37-45   394 0.02419702 ## 7: 45 or more   413 0.02536388 ##  ## $wtd ##     speed_mph count       prop     est ## 1:  1 or less   668 0.04149956  340717 ## 2:       1-10  7935 0.48393869 3973202 ## 3:      10-19  3994 0.24742090 2031359 ## 4:      19-28  2027 0.12361892 1014928 ## 5:      28-37   852 0.05391032  442611 ## 6:      37-45   394 0.02359705  193735 ## 7: 45 or more   413 0.02601455  213583 ##  ## $weight_name ## [1] \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"calculating-standard-errors","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Calculating Standard Errors","title":"Getting Started","text":"Additionally, specifying se = TRUE can calculate standard errors.","code":"speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = TRUE,                                 wtname = 'trip_weight',                                 se = TRUE)  speed_cat_summary$summary ## $unwtd ##     speed_mph count       prop ## 1:  1 or less   668 0.04102438 ## 2:       1-10  7935 0.48731806 ## 3:      10-19  3994 0.24528650 ## 4:      19-28  2027 0.12448566 ## 5:      28-37   852 0.05232451 ## 6:      37-45   394 0.02419702 ## 7: 45 or more   413 0.02536388 ##  ## $wtd ##     speed_mph count       prop     prop_se     est   est_se ## 1:  1 or less   668 0.04149956 0.001798998  340717 14849.96 ## 2:       1-10  7935 0.48393869 0.004495601 3973202 40737.10 ## 3:      10-19  3994 0.24742090 0.003889055 2031359 33219.42 ## 4:      19-28  2027 0.12361892 0.002952873 1014928 24632.37 ## 5:      28-37   852 0.05391032 0.002048576  442611 16948.80 ## 6:      37-45   394 0.02359705 0.001377395  193735 11345.70 ## 7: 45 or more   413 0.02601455 0.001433973  213583 11811.71 ##  ## $weight_name ## [1] \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"summarizing-two-variables","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Summarizing Two Variables","title":"Getting Started","text":"want summarize variable another variable (e.g., mode type person’s race, mode_type person’s ethnicity, income study year) can use summarize_by argument. want summarize select apply variable, can set summarize_vartype checkbox. summarize_by can used unlimited amount variables. use one summarize_by variable pass list argument.","code":"DT = hts_prep_data(summarize_var = 'mode_type',                    summarize_by = 'race',                    variables_dt = variable_list,                    data = test_data)  mode_by_race_summary = hts_summary(prepped_dt = DT$cat,                                     summarize_var = 'mode_type',                                    summarize_by = 'race',                                    summarize_vartype = 'categorical',                                    weighted = TRUE,                                    wtname = 'trip_weight',                                    se = TRUE)   mode_by_race_summary$summary ## $unwtd ##                                          race mode_type count         prop ##  1:                 African American or Black         1   209 3.965844e-01 ##  2:                 African American or Black         3     2 3.795066e-03 ##  3:                 African American or Black         4     3 5.692600e-03 ##  4:                 African American or Black         6     4 7.590133e-03 ##  5:                 African American or Black         7     3 5.692600e-03 ##  6:                 African American or Black         8   215 4.079696e-01 ##  7:                 African American or Black        11     3 5.692600e-03 ##  8:                 African American or Black        13    88 1.669829e-01 ##  9:          American Indian or Alaska Native         1    16 2.424242e-01 ## 10:          American Indian or Alaska Native         2     6 9.090909e-02 ## 11:          American Indian or Alaska Native         3     1 1.515152e-02 ## 12:          American Indian or Alaska Native         4     3 4.545455e-02 ## 13:          American Indian or Alaska Native         5     1 1.515152e-02 ## 14:          American Indian or Alaska Native         6     1 1.515152e-02 ## 15:          American Indian or Alaska Native         8    33 5.000000e-01 ## 16:          American Indian or Alaska Native        13     5 7.575758e-02 ## 17:                                     Asian         1   600 2.946955e-01 ## 18:                                     Asian         2    23 1.129666e-02 ## 19:                                     Asian         3     1 4.911591e-04 ## 20:                                     Asian         6    18 8.840864e-03 ## 21:                                     Asian         7    34 1.669941e-02 ## 22:                                     Asian         8  1212 5.952849e-01 ## 23:                                     Asian        11    17 8.349705e-03 ## 24:                                     Asian        12     5 2.455796e-03 ## 25:                                     Asian        13   126 6.188605e-02 ## 26: Native Hawaiian or other Pacific Islander         1     8 1.311475e-01 ## 27: Native Hawaiian or other Pacific Islander         7     1 1.639344e-02 ## 28: Native Hawaiian or other Pacific Islander         8    50 8.196721e-01 ## 29: Native Hawaiian or other Pacific Islander        13     2 3.278689e-02 ## 30:                                     White         1  3126 2.874747e-01 ## 31:                                     White         2   280 2.574949e-02 ## 32:                                     White         3     5 4.598124e-04 ## 33:                                     White         4    12 1.103550e-03 ## 34:                                     White         5     1 9.196248e-05 ## 35:                                     White         6    66 6.069524e-03 ## 36:                                     White         7    27 2.482987e-03 ## 37:                                     White         8  6782 6.236895e-01 ## 38:                                     White        10     1 9.196248e-05 ## 39:                                     White        11    15 1.379437e-03 ## 40:                                     White        12     2 1.839250e-04 ## 41:                                     White        13   540 4.965974e-02 ## 42:                                     White        14    17 1.563362e-03 ## 43:                               Two or more         1   268 3.549669e-01 ## 44:                               Two or more         2    27 3.576159e-02 ## 45:                               Two or more         4    12 1.589404e-02 ## 46:                               Two or more         5     1 1.324503e-03 ## 47:                               Two or more         6    10 1.324503e-02 ## 48:                               Two or more         7     2 2.649007e-03 ## 49:                               Two or more         8   386 5.112583e-01 ## 50:                               Two or more        11     2 2.649007e-03 ## 51:                               Two or more        13    44 5.827815e-02 ## 52:                               Two or more        14     3 3.973510e-03 ## 53:                                Other race         1   113 5.824742e-01 ## 54:                                Other race         7     1 5.154639e-03 ## 55:                                Other race         8    43 2.216495e-01 ## 56:                                Other race        13    37 1.907216e-01 ## 57:                      Prefer not to answer         1   303 2.953216e-01 ## 58:                      Prefer not to answer         2    11 1.072125e-02 ## 59:                      Prefer not to answer         4     5 4.873294e-03 ## 60:                      Prefer not to answer         5     1 9.746589e-04 ## 61:                      Prefer not to answer         6    11 1.072125e-02 ## 62:                      Prefer not to answer         7    13 1.267057e-02 ## 63:                      Prefer not to answer         8   610 5.945419e-01 ## 64:                      Prefer not to answer        10     1 9.746589e-04 ## 65:                      Prefer not to answer        11     9 8.771930e-03 ## 66:                      Prefer not to answer        13    58 5.653021e-02 ## 67:                      Prefer not to answer        14     4 3.898635e-03 ##                                          race mode_type count         prop ##  ## $wtd ##                                          race mode_type count         prop ##  1:                 African American or Black         1   209 3.946665e-01 ##  2:                 African American or Black         3     2 4.464578e-03 ##  3:                 African American or Black         4     3 4.580824e-03 ##  4:                 African American or Black         6     4 9.761042e-03 ##  5:                 African American or Black         7     3 6.157412e-03 ##  6:                 African American or Black         8   215 3.938746e-01 ##  7:                 African American or Black        11     3 5.296464e-03 ##  8:                 African American or Black        13    88 1.811986e-01 ##  9:          American Indian or Alaska Native         1    16 2.167640e-01 ## 10:          American Indian or Alaska Native         2     6 5.707512e-02 ## 11:          American Indian or Alaska Native         3     1 2.662927e-02 ## 12:          American Indian or Alaska Native         4     3 2.090441e-02 ## 13:          American Indian or Alaska Native         5     1 2.868213e-02 ## 14:          American Indian or Alaska Native         6     1 9.830567e-03 ## 15:          American Indian or Alaska Native         8    33 5.441219e-01 ## 16:          American Indian or Alaska Native        13     5 9.599260e-02 ## 17:                                     Asian         1   600 2.912739e-01 ## 18:                                     Asian         2    23 1.217458e-02 ## 19:                                     Asian         3     1 2.699081e-04 ## 20:                                     Asian         6    18 9.918645e-03 ## 21:                                     Asian         7    34 1.536275e-02 ## 22:                                     Asian         8  1212 5.949273e-01 ## 23:                                     Asian        11    17 8.523162e-03 ## 24:                                     Asian        12     5 1.901799e-03 ## 25:                                     Asian        13   126 6.564797e-02 ## 26: Native Hawaiian or other Pacific Islander         1     8 1.488617e-01 ## 27: Native Hawaiian or other Pacific Islander         7     1 1.700903e-02 ## 28: Native Hawaiian or other Pacific Islander         8    50 8.222557e-01 ## 29: Native Hawaiian or other Pacific Islander        13     2 1.187361e-02 ## 30:                                     White         1  3126 2.871490e-01 ## 31:                                     White         2   280 2.565400e-02 ## 32:                                     White         3     5 2.205304e-04 ## 33:                                     White         4    12 1.117842e-03 ## 34:                                     White         5     1 1.658096e-04 ## 35:                                     White         6    66 5.297853e-03 ## 36:                                     White         7    27 2.342929e-03 ## 37:                                     White         8  6782 6.239571e-01 ## 38:                                     White        10     1 9.260445e-05 ## 39:                                     White        11    15 1.676031e-03 ## 40:                                     White        12     2 2.029611e-04 ## 41:                                     White        13   540 5.053367e-02 ## 42:                                     White        14    17 1.589649e-03 ## 43:                               Two or more         1   268 3.492208e-01 ## 44:                               Two or more         2    27 4.201683e-02 ## 45:                               Two or more         4    12 1.217126e-02 ## 46:                               Two or more         5     1 2.516058e-03 ## 47:                               Two or more         6    10 1.236232e-02 ## 48:                               Two or more         7     2 2.082812e-03 ## 49:                               Two or more         8   386 5.172801e-01 ## 50:                               Two or more        11     2 2.542968e-03 ## 51:                               Two or more        13    44 5.595606e-02 ## 52:                               Two or more        14     3 3.850780e-03 ## 53:                                Other race         1   113 5.530963e-01 ## 54:                                Other race         7     1 1.011257e-02 ## 55:                                Other race         8    43 2.469418e-01 ## 56:                                Other race        13    37 1.898493e-01 ## 57:                      Prefer not to answer         1   303 2.907704e-01 ## 58:                      Prefer not to answer         2    11 1.146677e-02 ## 59:                      Prefer not to answer         4     5 5.028106e-03 ## 60:                      Prefer not to answer         5     1 1.473887e-03 ## 61:                      Prefer not to answer         6    11 9.359569e-03 ## 62:                      Prefer not to answer         7    13 1.295985e-02 ## 63:                      Prefer not to answer         8   610 5.985288e-01 ## 64:                      Prefer not to answer        10     1 1.312681e-03 ## 65:                      Prefer not to answer        11     9 1.063962e-02 ## 66:                      Prefer not to answer        13    58 5.485817e-02 ## 67:                      Prefer not to answer        14     4 3.602196e-03 ##                                          race mode_type count         prop ##          prop_se     est     est_se ##  1: 2.429706e-02  108643  8560.3427 ##  2: 3.283191e-03    1229   905.7243 ##  3: 2.686792e-03    1261   740.2864 ##  4: 4.999621e-03    2687  1383.1968 ##  5: 3.860574e-03    1695  1065.8861 ##  6: 2.421706e-02  108425  8479.0803 ##  7: 3.224025e-03    1458   889.1873 ##  8: 1.941503e-02   49880  5916.5940 ##  9: 5.494601e-02    7497  2100.5142 ## 10: 3.321030e-02    1974  1184.1425 ## 11: 2.618012e-02     921   921.0000 ## 12: 1.289936e-02     723   443.7522 ## 13: 2.813839e-02     992   992.0000 ## 14: 9.831307e-03     340   340.0000 ## 15: 6.977011e-02   18819  3639.8662 ## 16: 4.237077e-02    3320  1545.2004 ## 17: 1.152255e-02  304323 14082.0778 ## 18: 2.795244e-03   12720  2936.7950 ## 19: 2.699309e-04     282   282.0000 ## 20: 2.519370e-03   10363  2644.1278 ## 21: 3.116633e-03   16051  3278.9512 ## 22: 1.246723e-02  621580 19809.5298 ## 23: 2.334265e-03    8905  2448.2679 ## 24: 1.065326e-03    1987  1113.9160 ## 25: 6.397536e-03   68589  6902.0999 ## 26: 5.148319e-02    4551  1702.4167 ## 27: 1.690099e-02     520   520.0000 ## 28: 5.414158e-02   25138  4072.5086 ## 29: 1.063317e-02     363   324.5971 ## 30: 4.984702e-03 1569011 29703.8157 ## 31: 1.726719e-03  140176  9489.7012 ## 32: 1.286871e-04    1205   703.1226 ## 33: 3.785269e-04    6108  2068.9487 ## 34: 1.657975e-04     906   906.0000 ## 35: 7.787002e-04   28948  4259.2590 ## 36: 5.276477e-04   12802  2884.6110 ## 37: 5.335825e-03 3409364 38909.0413 ## 38: 9.260448e-05     506   506.0000 ## 39: 4.836562e-04    9158  2644.2357 ## 40: 1.556098e-04    1109   850.3061 ## 41: 2.417239e-03  276121 13374.0340 ## 42: 4.421815e-04    8686  2417.0707 ## 43: 1.981278e-02  129775  9000.3551 ## 44: 8.516278e-03   15614  3233.1708 ## 45: 4.110224e-03    4523  1534.0176 ## 46: 2.512005e-03     935   935.0000 ## 47: 4.819278e-03    4594  1802.6239 ## 48: 1.472502e-03     774   547.3488 ## 49: 2.088633e-02  192228 11153.6480 ## 50: 1.839233e-03     945   684.0392 ## 51: 9.722212e-03   20794  3717.3376 ## 52: 2.791640e-03    1431  1039.6301 ## 53: 4.198681e-02   52178  5774.8481 ## 54: 1.004616e-02     954   954.0000 ## 55: 3.722673e-02   23296  4092.9694 ## 56: 3.271727e-02   17910  3417.7254 ## 57: 1.621253e-02  151512  9943.4628 ## 58: 3.894104e-03    5975  2040.7973 ## 59: 2.518591e-03    2620  1315.4777 ## 60: 1.472705e-03     768   768.0000 ## 61: 3.111574e-03    4877  1626.7694 ## 62: 4.282354e-03    6753  2246.9635 ## 63: 1.752272e-02  311876 14222.5941 ## 64: 1.311840e-03     684   684.0000 ## 65: 3.778042e-03    5544  1979.2913 ## 66: 8.096318e-03   28585  4331.7748 ## 67: 2.051498e-03    1877  1070.6232 ##          prop_se     est     est_se ##  ## $weight_name ## [1] \"trip_weight\" DT = hts_prep_data(summarize_var = 'race',                    summarize_by = 'mode_type',                    variables_dt = variable_list,                    data = test_data)  mode_by_race_summary = hts_summary(prepped_dt = DT$cat,                                     summarize_var = 'race',                                    summarize_by = 'mode_type',                                    summarize_vartype = 'checkbox',                                    weighted = TRUE,                                    wtname = 'trip_weight',                                    se = TRUE)   mode_by_race_summary$summary ## $unwtd ##     mode_type                                      race count        prop ##  1:         1                 African American or Black   251 0.050371262 ##  2:         1          American Indian or Alaska Native   107 0.021473008 ##  3:         1                                     Asian   768 0.154124022 ##  4:         1 Native Hawaiian or other Pacific Islander    11 0.002207506 ##  5:         1                                     White  3345 0.671282360 ##  6:         1                                Other race   198 0.039735099 ##  7:         1                      Prefer not to answer   303 0.060806743 ##  8:         2          American Indian or Alaska Native     6 0.016042781 ##  9:         2                                     Asian    48 0.128342246 ## 10:         2                                     White   307 0.820855615 ## 11:         2                                Other race     2 0.005347594 ## 12:         2                      Prefer not to answer    11 0.029411765 ## 13:         3                 African American or Black     2 0.222222222 ## 14:         3          American Indian or Alaska Native     1 0.111111111 ## 15:         3                                     Asian     1 0.111111111 ## 16:         3                                     White     5 0.555555556 ## 17:         4                 African American or Black     3 0.061224490 ## 18:         4          American Indian or Alaska Native    15 0.306122449 ## 19:         4                                     Asian     2 0.040816327 ## 20:         4                                     White    24 0.489795918 ## 21:         4                      Prefer not to answer     5 0.102040816 ## 22:         5          American Indian or Alaska Native     1 0.200000000 ## 23:         5                                     Asian     1 0.200000000 ## 24:         5                                     White     2 0.400000000 ## 25:         5                      Prefer not to answer     1 0.200000000 ## 26:         6                 African American or Black     6 0.050000000 ## 27:         6          American Indian or Alaska Native     1 0.008333333 ## 28:         6                                     Asian    28 0.233333333 ## 29:         6                                     White    73 0.608333333 ## 30:         6                                Other race     1 0.008333333 ## 31:         6                      Prefer not to answer    11 0.091666667 ## 32:         7                 African American or Black     5 0.060240964 ## 33:         7                                     Asian    34 0.409638554 ## 34:         7 Native Hawaiian or other Pacific Islander     1 0.012048193 ## 35:         7                                     White    29 0.349397590 ## 36:         7                                Other race     1 0.012048193 ## 37:         7                      Prefer not to answer    13 0.156626506 ## 38:         8                 African American or Black   234 0.024064171 ## 39:         8          American Indian or Alaska Native    86 0.008844097 ## 40:         8                                     Asian  1468 0.150966680 ## 41:         8 Native Hawaiian or other Pacific Islander   114 0.011723571 ## 42:         8                                     White  7113 0.731489099 ## 43:         8                                Other race    99 0.010180995 ## 44:         8                      Prefer not to answer   610 0.062731386 ## 45:        10                                     White     1 0.500000000 ## 46:        10                      Prefer not to answer     1 0.500000000 ## 47:        11                 African American or Black     5 0.100000000 ## 48:        11          American Indian or Alaska Native     2 0.040000000 ## 49:        11                                     Asian    17 0.340000000 ## 50:        11                                     White    17 0.340000000 ## 51:        11                      Prefer not to answer     9 0.180000000 ## 52:        12                                     Asian     5 0.714285714 ## 53:        12                                     White     2 0.285714286 ## 54:        13                 African American or Black   100 0.103519669 ## 55:        13          American Indian or Alaska Native    25 0.025879917 ## 56:        13                                     Asian   149 0.154244306 ## 57:        13 Native Hawaiian or other Pacific Islander     2 0.002070393 ## 58:        13                                     White   576 0.596273292 ## 59:        13                                Other race    56 0.057971014 ## 60:        13                      Prefer not to answer    58 0.060041408 ## 61:        14                                     Asian     3 0.111111111 ## 62:        14                                     White    20 0.740740741 ## 63:        14                      Prefer not to answer     4 0.148148148 ##     mode_type                                      race count        prop ##  ## $wtd ##     mode_type                                      race count         prop ##  1:         1                 African American or Black   251 0.0519512011 ##  2:         1          American Indian or Alaska Native   107 0.0219408924 ##  3:         1                                     Asian   768 0.1533670063 ##  4:         1 Native Hawaiian or other Pacific Islander    11 0.0024829898 ##  5:         1                                     White  3345 0.6718269033 ##  6:         1                                Other race   198 0.0377041703 ##  7:         1                      Prefer not to answer   303 0.0607268367 ##  8:         2          American Indian or Alaska Native     6 0.0102773425 ##  9:         2                                     Asian    48 0.1393272350 ## 10:         2                                     White   307 0.8110978638 ## 11:         2                                Other race     2 0.0081895946 ## 12:         2                      Prefer not to answer    11 0.0311079642 ## 13:         3                 African American or Black     2 0.3379158647 ## 14:         3          American Indian or Alaska Native     1 0.2532306846 ## 15:         3                                     Asian     1 0.0775364311 ## 16:         3                                     White     5 0.3313170195 ## 17:         4                 African American or Black     3 0.0604071856 ## 18:         4          American Indian or Alaska Native    15 0.2513053892 ## 19:         4                                     Asian     2 0.0535089820 ## 20:         4                                     White    24 0.5092694611 ## 21:         4                      Prefer not to answer     5 0.1255089820 ## 22:         5          American Indian or Alaska Native     1 0.2186948854 ## 23:         5                                     Asian     1 0.2061287478 ## 24:         5                                     White     2 0.4058641975 ## 25:         5                      Prefer not to answer     1 0.1693121693 ## 26:         6                 African American or Black     6 0.0487740014 ## 27:         6          American Indian or Alaska Native     1 0.0060280482 ## 28:         6                                     Asian    28 0.2651809301 ## 29:         6                                     White    73 0.5838164637 ## 30:         6                                Other race     1 0.0097335248 ## 31:         6                      Prefer not to answer    11 0.0864670319 ## 32:         7                 African American or Black     5 0.0612305632 ## 33:         7                                     Asian    34 0.3980606602 ## 34:         7 Native Hawaiian or other Pacific Islander     1 0.0128958659 ## 35:         7                                     White    29 0.3366812985 ## 36:         7                                Other race     1 0.0236589539 ## 37:         7                      Prefer not to answer    13 0.1674726583 ## 38:         8                 African American or Black   234 0.0236711337 ## 39:         8          American Indian or Alaska Native    86 0.0087625109 ## 40:         8                                     Asian  1468 0.1528297944 ## 41:         8 Native Hawaiian or other Pacific Islander   114 0.0115648346 ## 42:         8                                     White  7113 0.7283770436 ## 43:         8                                Other race    99 0.0112141873 ## 44:         8                      Prefer not to answer   610 0.0635804955 ## 45:        10                                     White     1 0.4252100840 ## 46:        10                      Prefer not to answer     1 0.5747899160 ## 47:        11                 African American or Black     5 0.0861290323 ## 48:        11          American Indian or Alaska Native     2 0.0338709677 ## 49:        11                                     Asian    17 0.3191756272 ## 50:        11                                     White    17 0.3621146953 ## 51:        11                      Prefer not to answer     9 0.1987096774 ## 52:        12                                     Asian     5 0.6417958656 ## 53:        12                                     White     2 0.3582041344 ## 54:        13                 African American or Black   100 0.1106632274 ## 55:        13          American Indian or Alaska Native    25 0.0260516059 ## 56:        13                                     Asian   149 0.1600454443 ## 57:        13 Native Hawaiian or other Pacific Islander     2 0.0007338196 ## 58:        13                                     White   576 0.5933042501 ## 59:        13                                Other race    56 0.0514158877 ## 60:        13                      Prefer not to answer    58 0.0577857651 ## 61:        14                                     Asian     3 0.1065921788 ## 62:        14                                     White    20 0.7535940410 ## 63:        14                      Prefer not to answer     4 0.1398137803 ##     mode_type                                      race count         prop ##          prop_se     est     est_se ##  1: 0.0039135676  129617  9371.8975 ##  2: 0.0025457540   54742  5993.1948 ##  3: 0.0062380159  382647 15830.8104 ##  4: 0.0008435027    6195  1965.6087 ##  5: 0.0075829943 1676192 32913.0946 ##  6: 0.0032730709   94071  7766.3382 ##  7: 0.0041614975  151512 10006.6615 ##  8: 0.0066705307    1974  1184.2006 ##  9: 0.0220212114   26761  4223.5084 ## 10: 0.0200102087  155790 10077.6666 ## 11: 0.0063242181    1573  1121.8635 ## 12: 0.0113591486    5975  2041.2234 ## 13: 0.1986555603    1229   905.7454 ## 14: 0.2062052313     921   921.0000 ## 15: 0.0780955046     282   282.0000 ## 16: 0.1766944428    1205   703.1601 ## 17: 0.0473231901    1261   740.3252 ## 18: 0.0898743324    5246  1597.2108 ## 19: 0.0501735321    1117   792.0122 ## 20: 0.0883485978   10631  2576.0573 ## 21: 0.0778037247    2620  1315.5853 ## 22: 0.2306702310     992   992.0000 ## 23: 0.2222702184     935   935.0000 ## 24: 0.2508999427    1841  1301.9391 ## 25: 0.1937807326     768   768.0000 ## 26: 0.0259368649    2751  1384.0878 ## 27: 0.0065600158     340   340.0000 ## 28: 0.0514001081   14957  3201.0174 ## 29: 0.0533733744   32929  4596.8792 ## 30: 0.0105496451     549   549.0000 ## 31: 0.0301671848    4877  1627.1277 ## 32: 0.0294968753    2469  1198.2454 ## 33: 0.0641481145   16051  3281.0272 ## 34: 0.0130877913     520   520.0000 ## 35: 0.0612054817   13576  2937.5137 ## 36: 0.0237436408     954   954.0000 ## 37: 0.0512408715    6753  2247.4613 ## 38: 0.0018366535  116112  8752.8037 ## 39: 0.0011257140   42982  5325.5094 ## 40: 0.0043609869  749663 22304.3628 ## 41: 0.0012870265   56728  6096.7034 ## 42: 0.0051034654 3572846 47455.2016 ## 43: 0.0013132708   55008  6222.7103 ## 44: 0.0029617241  311876 14409.5931 ## 45: 0.3456445313     506   506.0000 ## 46: 0.3456445313     684   684.0000 ## 47: 0.0417857331    2403  1121.8892 ## 48: 0.0260170786     945   684.0564 ## 49: 0.0770995186    8905  2449.0935 ## 50: 0.0807176332   10103  2732.0317 ## 51: 0.0674104855    5544  1979.6650 ## 52: 0.2183667764    1987  1113.9830 ## 53: 0.2183667764    1109   850.3225 ## 54: 0.0124258017   54742  6169.0586 ## 55: 0.0062111642   12887  2931.8737 ## 56: 0.0144840078   79170  7422.9806 ## 57: 0.0006973119     363   324.5994 ## 58: 0.0184312764  293491 13961.4327 ## 59: 0.0083564884   25434  3991.8927 ## 60: 0.0090336084   28585  4336.8548 ## 61: 0.0807452217    1431  1039.6558 ## 62: 0.0827610341   10117  2631.8673 ## 63: 0.0827610341    1877  1070.6844 ##          prop_se     est     est_se ##  ## $weight_name ## [1] \"trip_weight\" DT = hts_prep_data(summarize_var = 'mode_type',                    summarize_by = c('race', 'ethnicity'),                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))  mode_by_race_ethnicity_summary = hts_summary(prepped_dt = DT$cat,                                               summarize_var = 'mode_type',                                              summarize_by = c('race', 'ethnicity'),                                              summarize_vartype = 'categorical',                                              weighted = TRUE,                                              wtname = 'trip_weight',                                              se = TRUE)   head(mode_by_race_ethnicity_summary$summary$wtd, 10) ##                          race                                   ethnicity ##  1: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  2: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  3: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  4: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  5: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  6: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  7: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  8: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  9: African American or Black                                Puerto Rican ## 10: African American or Black Another Hispanic, Latino, or Spanish origin ##     mode_type count        prop     prop_se    est    est_se ##  1:         1   173 0.378706293 0.025556563  92766 7920.4716 ##  2:         3     2 0.005017248 0.003688597   1229  905.7243 ##  3:         4     2 0.003600661 0.002593898    882  635.9449 ##  4:         6     3 0.008483191 0.005047282   2078 1241.9804 ##  5:         7     1 0.001612541 0.001612226    395  395.0000 ##  6:         8   207 0.423694148 0.025957360 103786 8289.1748 ##  7:        11     3 0.005952114 0.003622216   1458  889.1873 ##  8:        13    75 0.172933804 0.020192600  42361 5448.6115 ##  9:         6     1 1.000000000 0.000000000    609  609.0000 ## 10:         1    35 0.636811186 0.081696434  15393 3240.6602"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"calculating-trip-rates","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Calculating trip rates","title":"Getting Started","text":"hts_summary can also used calculate trip rates.","code":"DT = hts_prep_triprate(summarize_by = 'employment',                        variables_dt = variable_list,                        trip_name = 'trip',                        day_name = 'day',                        hts_data = list('hh' = hh,                                        'person' = person,                                        'day' = day,                                        'trip' = trip,                                        'vehicle' = vehicle))  trip_rate_by_employment_summary = hts_summary(prepped_dt = DT$num,                                                summarize_var = 'num_trips_wtd',                                               summarize_by = 'employment',                                               summarize_vartype = 'numeric',                                               weighted = TRUE,                                               wtname = 'day_weight',                                               se = TRUE)  head(trip_rate_by_employment_summary$summary$wtd, 10) ##    employment count min      max     mean    mean_se   median ## 1:          1  2043   0 65.38043 4.140200 0.09026934 2.852713 ## 2:          2   244   0 60.70732 4.183628 0.26654290 2.560976 ## 3:          3   281   0 52.65060 5.210643 0.34255543 3.580769 ## 4:          5   914   0 65.47059 3.429423 0.12996342 2.181070 ## 5:          6   215   0 63.47727 3.341959 0.25411564 2.196911 ## 6:          7    35   0 29.84018 3.432427 0.68787476 1.920398 ## 7:          8    27   0 26.14286 4.076049 0.60438358 2.784161 ## 8:        995   547   0 61.30769 2.419237 0.12986732 1.450284"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"labeling-values","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Labeling Values","title":"Getting Started","text":"label values can use factorize_column.","code":"trip_rate_by_employment_summary$summary$wtd$employment =  factorize_column(   trip_rate_by_employment_summary$summary$wtd$employment,   'employment',   value_labels,   variable_colname = 'variable',   value_colname = 'value',   value_label_colname = 'label',   value_order_colname = 'val_order' )   trip_rate_by_employment_summary$summary$wtd ##                                                                             employment ## 1:                                           Employed full-time (35+ hours/week, paid) ## 2:                                 Employed part-time (fewer than 35 hours/week, paid) ## 3:                                                                       Self-employed ## 4: Not employed and not looking for work (e.g., retired, stay-at-home parent, student) ## 5:                                                     Unemployed and looking for work ## 6:                                                          Unpaid volunteer or intern ## 7:               Employed, but not currently working (e.g., on leave, furloughed 100%) ## 8:                                                                    Missing Response ##    count min      max     mean    mean_se   median ## 1:  2043   0 65.38043 4.140200 0.09026934 2.852713 ## 2:   244   0 60.70732 4.183628 0.26654290 2.560976 ## 3:   281   0 52.65060 5.210643 0.34255543 3.580769 ## 4:   914   0 65.47059 3.429423 0.12996342 2.181070 ## 5:   215   0 63.47727 3.341959 0.25411564 2.196911 ## 6:    35   0 29.84018 3.432427 0.68787476 1.920398 ## 7:    27   0 26.14286 4.076049 0.60438358 2.784161 ## 8:   547   0 61.30769 2.419237 0.12986732 1.450284"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"creating-visuals-using-hts_summary-output","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Creating Visuals using hts_summary output","title":"Getting Started","text":"hts_summary creates outputs can easily used create visuals.","code":"library(ggplot2)  p = ggplot(   trip_rate_by_employment_summary$summary$wtd,    aes(x = mean, y = employment)) +   geom_bar(stat = 'identity') +    geom_errorbar(     aes(xmin = (mean - mean_se),          xmax = (mean + mean_se),         width = .2)   ) +    labs(x = 'Mean Trip Rate',        y = 'Employment')  +   scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 50),                    limits = rev)      print(p)"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"summarizing-a-new-variable","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Summarizing a new variable","title":"Getting Started","text":"summarize new variable hts_summary must first added variable_list value_labels. example creating new variable called hh_size want summarize.","code":"test_data$hh[, hh_size := ifelse(num_people < 4, 0, 1)]  variable_list = rbind(variable_list,                       data.table(variable = 'hh_size',                                  is_checkbox = 0,                                  hh = 1,                                  person = 0,                                  day = 0,                                  trip = 0,                                  vehicle = 0,                                  description = 'Household size',                                  data_type = 'integer/categorical',                                  shared_name = 'hh_size')                       )  value_labels = rbind(value_labels,                      data.table(variable = rep('hh_size', 2),                                 value = c(0,1),                                 label = c('Small household', 'Large household'),                                 val_order = c(214:215))                       )  DT = hts_prep_data(summarize_var = 'hh_size',                    variables_dt = variable_list,                    data = test_data)  hh_size_summary = hts_summary(prepped_dt = DT$cat,                                summarize_var = 'hh_size',                               summarize_vartype = 'categorical',                               weighted = TRUE,                               wtname = 'hh_weight')  factorize_df(df = hh_size_summary$summary$wtd, value_labels, value_label_colname = 'label') ##            hh_size count      prop    est ## 1: Small household   875 0.8728126 436374 ## 2: Large household   125 0.1271874  63589"},{"path":"https://rsginc.github.io/travelSurveyTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"RSG Inc.. Author, maintainer. Ashley Asmus. Author. Erika Redding. Author. Jacob Moore. Author. James Clark. Author.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Inc. R, Asmus , Redding E, Moore J, Clark J (2024). travelSurveyTools: travelSurveyTools. R package version 0.0.0.9000, https://github.com/RSGInc/travelSurveyTools.","code":"@Manual{,   title = {travelSurveyTools: travelSurveyTools},   author = {RSG Inc. and Ashley Asmus and Erika Redding and Jacob Moore and James Clark},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://github.com/RSGInc/travelSurveyTools}, }"},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"NA","text":"project uses feature-branch naming convention workflow. main main branch (master), base work main. Contribute project making changes feature branch issuing pull-requests ’re ready integrate main branch.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"create-a-feature-branch","dir":"","previous_headings":"Contributing","what":"Create a feature branch","title":"NA","text":"Pull main branch; git pull, necessary git checkout main switch main Create feature branch check branch, e.g., git checkout -b crosstab-performance * can use initials prefix feature branch, e.g., aa-crosstab-performance.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"your-feature-branch-should-do-one-thing-only","dir":"","previous_headings":"Contributing","what":"Your feature branch should do one thing only","title":"NA","text":"example: debug error, create new function, generate new part dashboard, integrate new dataset, fix issue - please name branch issue number","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"save-and-share-your-work","dir":"","previous_headings":"Contributing","what":"Save and share your work","title":"NA","text":"Commit changes related feature push GitHub. Push changes feature branch time. Create pull request GitHub ’re ready work reviewed. can submit PR done, want guidance work--progress. Make changes respond comments pull-request reviews. New commits pushed branch update pull-request.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"keep-it-clean","dir":"","previous_headings":"Contributing","what":"Keep it clean","title":"NA","text":"pull request approved approver merge branch main may delete branch GitHub. remove deleted feature branches local copy repository run git remote prune origin. attempt push additional commits merged pull-request. Instead, start new feature branch issue new pull request. Remember update branch main whenever start new feature, e.g., git checkout main; git pull origin main; git checkout -b -new-feature.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"travel-survey-tools","dir":"","previous_headings":"","what":"Travel Survey Tools","title":"travelSurveyTools","text":"travelSurveyTools R package empowers users household travel survey (HTS) data create meaningful summaries data. Currently, travelSurveyTools compatible RSG, Inc. HTS datasets, hope expand travel survey. like collaborate, please contact Suzanne Childress schildress@psrc.org. datasets usually contain six tables: household, person, day, trip, vehicle, location. future, may expand travelSurveyTools work types travel survey data types surveys. travelSurveyTools active development open-source; anyone can contribute 🤝. See CONTRIBUTING page learn .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"cloning-instructions","dir":"","previous_headings":"Travel Survey Tools","what":"Cloning instructions","title":"travelSurveyTools","text":"Set config - usethis::use_git_config(user.name = {“username”}, user.email = {your_email@email.com}) Go github page generate token - usethis::create_github_token() Paste PAT pop-follows - credentials::set_github_pat() Lastly, remotes::install_github() work - remotes::install_github(‘RSGInc/travelSurveyTools’)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"what-can-this-package-do","dir":"","previous_headings":"Travel Survey Tools","what":"What can this package do?","title":"travelSurveyTools","text":"things package enables include: * Cross tabs unlimited number variables * Summarizes numeric, categorical, date, date-time variables * Accepts weighted unweighted data * Numeric summaries return means, medians, summaries binned data * Ability use customized datasets (e.g., filtered, binned, renamed data) * Data labeling helper functions * Returns sample sizes/unweighted counts * Standard errors calculated survey statistics * Ability specify custom weights * Trip rate calculations","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"dependency-tree","dir":"","previous_headings":"Travel Survey Tools","what":"Dependency Tree","title":"travelSurveyTools","text":"","code":"├─dplyr 1.1.4 │ ├─cli 3.6.2 │ ├─generics 0.1.3 │ ├─glue 1.6.2 │ ├─lifecycle 1.0.4 │ │ ├─cli │ │ ├─glue │ │ └─rlang 1.1.2 │ ├─magrittr 2.0.3 │ ├─pillar 1.9.0 │ │ ├─cli │ │ ├─fansi 1.0.6 │ │ ├─glue │ │ ├─lifecycle │ │ ├─rlang │ │ ├─utf8 1.2.4 │ │ └─vctrs 0.6.5 │ │   ├─cli │ │   ├─glue │ │   ├─lifecycle │ │   └─rlang │ ├─R6 2.5.1 │ ├─rlang │ ├─tibble 3.2.1 │ │ ├─fansi │ │ ├─lifecycle │ │ ├─magrittr │ │ ├─pillar │ │ ├─pkgconfig 2.0.3 │ │ ├─rlang │ │ └─vctrs │ ├─tidyselect 1.2.0 │ │ ├─cli │ │ ├─glue │ │ ├─lifecycle │ │ ├─rlang │ │ ├─vctrs │ │ └─withr 2.5.2 │ └─vctrs ├─srvyr 1.2.0 │ ├─dplyr │ ├─magrittr │ ├─rlang │ ├─survey 4.2-1 │ │ ├─Matrix 1.6-1.1 -> 1.6-4 │ │ │ └─lattice 0.21-9 -> 0.22-5 │ │ ├─survival 3.5-7  │ │ │ └─Matrix │ │ ├─lattice │ │ ├─minqa 1.2.6 │ │ │ └─Rcpp 1.0.11 │ │ ├─numDeriv 2016.8-1.1 │ │ └─mitools 2.4 │ │   └─DBI 1.2.0 │ ├─tibble │ ├─tidyr 1.3.0 │ │ ├─cli │ │ ├─dplyr │ │ ├─glue │ │ ├─lifecycle │ │ ├─magrittr │ │ ├─purrr 1.0.2 │ │ │ ├─cli │ │ │ ├─lifecycle │ │ │ ├─magrittr │ │ │ ├─rlang │ │ │ └─vctrs │ │ ├─rlang │ │ ├─stringr 1.5.1 │ │ │ ├─cli │ │ │ ├─glue │ │ │ ├─lifecycle │ │ │ ├─magrittr │ │ │ ├─rlang │ │ │ ├─stringi 1.8.3 │ │ │ └─vctrs │ │ ├─tibble │ │ ├─tidyselect │ │ └─vctrs │ ├─tidyselect │ └─vctrs └─stringr"},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":null,"dir":"Reference","previous_headings":"","what":"Test day dataset — day","title":"Test day dataset — day","text":"dataset containing information participant travel days 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test day dataset — day","text":"","code":"day"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":"day","dir":"Reference","previous_headings":"","what":"day","title":"Test day dataset — day","text":"data frame 5,602 rows 13 columns: hh_id 8 digit household ID person_id 10 digit person ID day_id 12 digit day ID delivery_2 Take-/prepared food delivered home, response codes delivery_3 Someone came work home (e.g., babysitter, housecleaning, lawn), response codes delivery_4 Groceries delivered home, response codes delivery_5 Received packages home (e.g., USPS, FedEx, UPS), response codes delivery_6 Received personal packages work, response codes delivery_7 Received packages another location (e.g., Amazon Locker, package pick-point), response codes delivery_8 item delivered home (e.g., appliance), response codes delivery_996 None , response codes begin_day Location beginning day, response codes end_day Location end day, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test day dataset — day","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Factorize a column. — factorize_column","title":"Factorize a column. — factorize_column","text":"Factorize column. function typically called directly, called part factorize_df function.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factorize a column. — factorize_column","text":"","code":"factorize_column(   x,   var_str,   vals_df,   variable_colname = \"variable\",   value_colname = \"value\",   value_label_colname = \"value_label\",   value_order_colname = \"value\",   extra_labels = NULL,   add_na = TRUE )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factorize a column. — factorize_column","text":"x vector (variable) 'factorized' labeled. X often single variable column within dataframe. var_str name vector variable factorized (e.g., \"sample_segment\"). vals_df dataframe variable labels (.e., factor levels labels) format specified . variable_colname name variable column vals_df. Default 'variable'. value_colname name value column vals_df. Default 'value', value_label_colname name value label column vals_df. Default 'value_label' value_order_colname name value order column vals_df (can value column ). Default 'value'. extra_labels Pass vector names variables values dataframe use labeling. Common uses include missing values, universal values (e.g., \"Total\" \"Subtotal\" row), similar variables (e.g., \"mode_1\" reuse mode_1 labels mode_2). Default NULL. add_na TRUE FALSE setting whether add NA explicit level factor. Default setting TRUE.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factorize a column. — factorize_column","text":"'factorized' version vector passed (.e., factor). returned invisibly.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factorize a column. — factorize_column","text":"function expects values dataframe (vals_df) columns variable name, value, value label, value order (can value ) \"factorize\" functions borrowed updated 'tmr.Rite..tester' package Matt Landis.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factorize a column. — factorize_column","text":"","code":"factored = factorize_column(   x = hh$income_detailed,   var_str = \"income_detailed\",   vals_df = value_labels,   extra_labels = \"Missing\",   value_label_colname = 'label' )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Factorize a dataframe — factorize_df","title":"Factorize a dataframe — factorize_df","text":"Factorize dataframe. function loops dataframe (calling factorize_column) labels variable provide labels.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factorize a dataframe — factorize_df","text":"","code":"factorize_df(df, vals_df, verbose = TRUE, ...)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factorize a dataframe — factorize_df","text":"df dataframe label vals_df dataframe variable labels (.e., factor levels labels) format specified . Passed factorize_column function. verbose Prints vars labeled unlabeled ... Additional arguments passed factorize_column","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factorize a dataframe — factorize_df","text":"factorized (.e. labeled) version dataframe passed.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factorize a dataframe — factorize_df","text":"function expects values dataframe (vals_df) following format: variable (character/string names variable), value (integer values variable), val_order (sequential ordering value), label (strings names use levels factor). \"factorize\" functions borrowed updated 'tmr.Rite..tester' package Matt Landis.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factorize a dataframe — factorize_df","text":"","code":"hh_labeled = factorize_df(   df = hh,   vals_df = value_labels,   value_label_colname = 'label',   extra_labels = c(\"Missing\") ) #>  #>  Labeled vars:  #> home_county, income_detailed, income_followup, num_people, residence_type, sample_segment #>  #>  Unlabeled vars:  #> hh_id, hh_weight, home_lat, home_lon, num_trips"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get distance between points — get_distance_meters","title":"Get distance between points — get_distance_meters","text":"Function get haversine distance meters two points Based calculation geosphere package","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get distance between points — get_distance_meters","text":"","code":"get_distance_meters(location_1, location_2, radius = 6378137)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get distance between points — get_distance_meters","text":"location_1 matrix vector longitudes latitudes location_2 matrix vector longitudes latitudes radius Radius sphere use haversine calculation (Defaults meters)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get distance between points — get_distance_meters","text":"vector distances meters","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get distance between points — get_distance_meters","text":"","code":"get_distance_meters(c(38.8734, -75.2394), c(40.3497, -76.2314)) #> [1] 117610.6"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":null,"dir":"Reference","previous_headings":"","what":"Test household dataset — hh","title":"Test household dataset — hh","text":"dataset containing household level attributes 1,000 households 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test household dataset — hh","text":"","code":"hh"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":"hh","dir":"Reference","previous_headings":"","what":"hh","title":"Test household dataset — hh","text":"data frame 1,000 rows 6 columns: hh_id 8 digit household ID sample_segment Sample segment income_detailed 2022 household income (detailed categories), response codes income_followup 2022 household income (broad categories), response codes num_people Household size, response codes residence_type Type residence, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test household dataset — hh","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin numeric variables — hts_bin_var","title":"Bin numeric variables — hts_bin_var","text":"Bin numeric variables","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin numeric variables — hts_bin_var","text":"","code":"hts_bin_var(prepped_dt, numvar, nbins = 7)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin numeric variables — hts_bin_var","text":"prepped_dt Dataset containing variable bin data.table format numvar Name numeric variable bin nbins Number bins variable. Defaults 7.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin numeric variables — hts_bin_var","text":"Inputted dataset specified variable binned data.table format.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bin numeric variables — hts_bin_var","text":"","code":"require(data.table) #> Loading required package: data.table require(stringr) #> Loading required package: stringr hts_bin_var(prepped_dt = trip, numvar = 'speed_mph') #>           hh_id  person_id       day_id travel_date      trip_id mode_type #>     1: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12         1 #>     2: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12        13 #>     3: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12         1 #>     4: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12         1 #>     5: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12         1 #>    ---                                                                     #> 17451: 23422853 2342285303 234228530301  2023-06-05 2.342285e+12         8 #> 17452: 23422853 2342285303 234228530301  2023-06-05 2.342285e+12        10 #> 17453: 23422853 2342285303 234228530301  2023-06-05 2.342285e+12        10 #> 17454: 23422853 2342285304 234228530401  2023-06-05 2.342285e+12         8 #> 17455: 23422853 2342285304 234228530401  2023-06-05 2.342285e+12        10 #>        d_purpose_category trip_weight speed_mph #>     1:                 11         890      1-25 #>     2:                 11         663      1-25 #>     3:                 10         892      1-25 #>     4:                  1         146      1-25 #>     5:                 11         630      1-25 #>    ---                                          #> 17451:                  6         935      1-25 #> 17452:                  4         234      1-25 #> 17453:                  1         379      1-25 #> 17454:                  4         210      1-25 #> 17455:                  4         468      1-25"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind a column from one table to another — hts_cbind_var","title":"Bind a column from one table to another — hts_cbind_var","text":"Bind column one table another","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind a column from one table to another — hts_cbind_var","text":"","code":"hts_cbind_var(   lhs_table,   rhs_var,   hts_data,   variable_list = variable_list,   return_weight_cols = FALSE,   cbind_ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   cbind_wts = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\") )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind a column from one table to another — hts_cbind_var","text":"lhs_table Table bind column data.table format rhs_var Variable bind lhs_table. hts_data List household, person, vehicle, day, trip tables data.table format. variable_list variable list descriptions table locations variables. return_weight_cols true binds weight variable along rhs_var lhs_table. Default FALSE. cbind_ids list unique identifiers table hts_data cbind_wts list weight table hts_data","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind a column from one table to another — hts_cbind_var","text":"Inputted table inputted variable binded.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind a column from one table to another — hts_cbind_var","text":"","code":"require(data.table) hts_cbind_var(lhs_table = trip,  rhs_var = 'speed_mph',  hts_data = test_data,   variable_list = variable_list) #> Joining speed_mph to table on hh_id, person_id, day_id, trip_id, speed_mph, trip_weight #>           hh_id  person_id       day_id      trip_id speed_mph trip_weight #>     1: 23000137 2300013701 230001370101 2.300014e+12  4.764584         890 #>     2: 23000137 2300013701 230001370101 2.300014e+12  7.425306         663 #>     3: 23000137 2300013701 230001370101 2.300014e+12  5.372348         892 #>     4: 23000137 2300013701 230001370101 2.300014e+12  3.232303         146 #>     5: 23000137 2300013701 230001370101 2.300014e+12  3.106531         630 #>    ---                                                                     #> 17451: 23422853 2342285303 234228530301 2.342285e+12  8.094207         935 #> 17452: 23422853 2342285303 234228530301 2.342285e+12  7.888320         234 #> 17453: 23422853 2342285303 234228530301 2.342285e+12  6.378893         379 #> 17454: 23422853 2342285304 234228530401 2.342285e+12  8.094207         210 #> 17455: 23422853 2342285304 234228530401 2.342285e+12  7.888320         468 #>        travel_date mode_type d_purpose_category #>     1:  2023-04-25         1                 11 #>     2:  2023-04-25        13                 11 #>     3:  2023-04-25         1                 10 #>     4:  2023-04-25         1                  1 #>     5:  2023-04-25         1                 11 #>    ---                                          #> 17451:  2023-06-05         8                  6 #> 17452:  2023-06-05        10                  4 #> 17453:  2023-06-05        10                  1 #> 17454:  2023-06-05         8                  4 #> 17455:  2023-06-05        10                  4 hts_cbind_var(lhs_table = trip,  rhs_var = 'speed_mph',   hts_data = test_data, variable_list = variable_list,  return_weight_cols = TRUE) #> Joining speed_mph to table on hh_id, person_id, day_id, trip_id, speed_mph, trip_weight #>           hh_id  person_id       day_id      trip_id speed_mph trip_weight #>     1: 23000137 2300013701 230001370101 2.300014e+12  4.764584         890 #>     2: 23000137 2300013701 230001370101 2.300014e+12  7.425306         663 #>     3: 23000137 2300013701 230001370101 2.300014e+12  5.372348         892 #>     4: 23000137 2300013701 230001370101 2.300014e+12  3.232303         146 #>     5: 23000137 2300013701 230001370101 2.300014e+12  3.106531         630 #>    ---                                                                     #> 17451: 23422853 2342285303 234228530301 2.342285e+12  8.094207         935 #> 17452: 23422853 2342285303 234228530301 2.342285e+12  7.888320         234 #> 17453: 23422853 2342285303 234228530301 2.342285e+12  6.378893         379 #> 17454: 23422853 2342285304 234228530401 2.342285e+12  8.094207         210 #> 17455: 23422853 2342285304 234228530401 2.342285e+12  7.888320         468 #>        travel_date mode_type d_purpose_category #>     1:  2023-04-25         1                 11 #>     2:  2023-04-25        13                 11 #>     3:  2023-04-25         1                 10 #>     4:  2023-04-25         1                  1 #>     5:  2023-04-25         1                 11 #>    ---                                          #> 17451:  2023-06-05         8                  6 #> 17452:  2023-06-05        10                  4 #> 17453:  2023-06-05        10                  1 #> 17454:  2023-06-05         8                  4 #> 17455:  2023-06-05        10                  4"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter datasets to only keep specified ids — hts_filter_data","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"Filter datasets keep specified ids","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"","code":"hts_filter_data(hts_data, ids, id_name)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"hts_data List containing household travel data tables. ids List ids keep tables id_name Name id used filtering (e.g., hh_id, person_id)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"Inputted list tables filtered specified ids.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"","code":"require(data.table)  data(test_data)  hts_filter_data(hts_data = test_data,                 ids = hh[num_people > 5, hh_id],                 id_name = 'hh_id') #> $hh #>       hh_id sample_segment num_trips num_people income_detailed income_followup #> 1: 23077623              2        25          7               9             995 #> 2: 23214339              3        20         13               6             995 #> 3: 23225402             21         6          9               6             995 #> 4: 23230310             10        13          6               6             995 #> 5: 23238765             21         3          6               5             995 #> 6: 23242420             21        37          6               7             995 #> 7: 23275913              4        12          6               7             995 #> 8: 23293124              4        21          6              10             995 #> 9: 23411644             14        24          6               9             995 #>     home_lon home_lat home_county residence_type hh_weight #> 1: -82.74274 35.80280           2              2       737 #> 2: -95.55556 37.30230           2              4       337 #> 3: -97.03704 39.67768           2              5       830 #> 4: -91.41141 33.21722           3              1        55 #> 5: -92.23223 37.64565           2              1       807 #> 6: -83.38338 38.75976           1              1       376 #> 7: -98.15816 39.72673           1              1       351 #> 8: -91.71171 39.95796           3              1       163 #> 9: -83.12312 38.17117           2              1       747 #>  #> $person #>     ethnicity_1 ethnicity_2 ethnicity_3 ethnicity_4 ethnicity_997 ethnicity_999 #>  1:           1           0           0           0             0             0 #>  2:         995         995         995         995           995           995 #>  3:           1           0           0           0             0             0 #>  4:           0           1           0           0             0             0 #>  5:           0           0           1           0             0             0 #>  6:           1           0           0           0             0             0 #>  7:           1           0           0           0             0             0 #>  8:           1           0           0           0             0             0 #>  9:           0           0           0           0             0             1 #> 10:           0           0           1           0             0             0 #> 11:           1           0           0           0             0             0 #> 12:           0           1           0           0             0             0 #> 13:           1           0           0           0             0             0 #> 14:           0           0           1           0             0             0 #> 15:           0           0           1           0             0             0 #> 16:           0           0           0           1             0             0 #> 17:           0           0           1           0             0             0 #> 18:           0           0           0           0             0             1 #> 19:           0           0           1           0             0             0 #> 20:           0           0           0           0             0             1 #> 21:           1           0           0           0             0             0 #> 22:           1           0           0           0             0             0 #> 23:           1           0           0           0             0             0 #> 24:           1           0           0           0             0             0 #> 25:           1           0           0           0             0             0 #> 26:           1           0           0           0             0             0 #> 27:         995         995         995         995           995           995 #> 28:         995         995         995         995           995           995 #> 29:         995         995         995         995           995           995 #> 30:           1           0           0           0             0             0 #> 31:           1           0           0           0             0             0 #> 32:         995         995         995         995           995           995 #> 33:         995         995         995         995           995           995 #> 34:         995         995         995         995           995           995 #> 35:         995         995         995         995           995           995 #> 36:           1           0           0           0             0             0 #> 37:           1           0           0           0             0             0 #> 38:           1           0           0           0             0             0 #> 39:         995         995         995         995           995           995 #> 40:         995         995         995         995           995           995 #> 41:         995         995         995         995           995           995 #> 42:           0           0           0           0             0             1 #> 43:           0           0           0           0             0             1 #> 44:         995         995         995         995           995           995 #> 45:         995         995         995         995           995           995 #> 46:         995         995         995         995           995           995 #> 47:         995         995         995         995           995           995 #> 48:           1           0           0           0             0             0 #> 49:           1           0           0           0             0             0 #> 50:         995         995         995         995           995           995 #> 51:         995         995         995         995           995           995 #> 52:         995         995         995         995           995           995 #> 53:           1           0           0           0             0             0 #> 54:           1           0           0           0             0             0 #> 55:           1           0           0           0             0             0 #> 56:         995         995         995         995           995           995 #> 57:         995         995         995         995           995           995 #> 58:         995         995         995         995           995           995 #> 59:         995         995         995         995           995           995 #> 60:           1           0           0           0             0             0 #> 61:           1           0           0           0             0             0 #> 62:         995         995         995         995           995           995 #> 63:         995         995         995         995           995           995 #> 64:         995         995         995         995           995           995 #> 65:         995         995         995         995           995           995 #>     ethnicity_1 ethnicity_2 ethnicity_3 ethnicity_4 ethnicity_997 ethnicity_999 #>     race_1 race_2 race_3 race_4 race_5 race_997 race_999    hh_id num_trips #>  1:      0      0      0      0      1        0        0 23077623         6 #>  2:    995    995    995    995    995      995      995 23077623         0 #>  3:      0      0      0      0      1        0        0 23077623         1 #>  4:      0      0      0      1      0        0        0 23077623         6 #>  5:      0      0      0      1      0        0        0 23077623         0 #>  6:      0      0      0      0      1        0        0 23077623         6 #>  7:      0      0      1      0      0        0        0 23077623         6 #>  8:      0      0      0      0      0        0        1 23214339         6 #>  9:      0      0      0      0      0        0        1 23214339         2 #> 10:      0      0      0      0      0        1        0 23214339         2 #> 11:      0      0      0      0      1        0        0 23214339         1 #> 12:      0      0      0      0      1        0        0 23214339         1 #> 13:      0      0      0      0      1        0        0 23214339         1 #> 14:      0      0      0      0      1        0        0 23214339         1 #> 15:      0      0      0      0      1        0        0 23214339         1 #> 16:      0      0      0      0      1        0        0 23214339         1 #> 17:      1      0      0      0      0        0        0 23214339         1 #> 18:      0      0      0      0      0        0        1 23214339         1 #> 19:      0      0      0      0      1        0        0 23214339         1 #> 20:      0      0      0      0      1        0        0 23214339         1 #> 21:      0      0      0      0      1        0        0 23225402         0 #> 22:      0      0      0      0      1        0        0 23225402         3 #> 23:      0      0      0      0      1        0        0 23225402         3 #> 24:      0      0      0      0      1        0        0 23225402         0 #> 25:      0      0      0      0      1        0        0 23225402         0 #> 26:      0      0      0      0      1        0        0 23225402         0 #> 27:    995    995    995    995    995      995      995 23225402         0 #> 28:    995    995    995    995    995      995      995 23225402         0 #> 29:    995    995    995    995    995      995      995 23225402         0 #> 30:      0      0      0      0      1        0        0 23230310         4 #> 31:      0      0      0      0      1        0        0 23230310         0 #> 32:    995    995    995    995    995      995      995 23230310         3 #> 33:    995    995    995    995    995      995      995 23230310         2 #> 34:    995    995    995    995    995      995      995 23230310         2 #> 35:    995    995    995    995    995      995      995 23230310         2 #> 36:      0      0      0      0      1        0        0 23238765         3 #> 37:      0      0      0      0      1        0        0 23238765         0 #> 38:      0      0      0      0      1        0        0 23238765         0 #> 39:    995    995    995    995    995      995      995 23238765         0 #> 40:    995    995    995    995    995      995      995 23238765         0 #> 41:    995    995    995    995    995      995      995 23238765         0 #> 42:      0      0      0      0      0        0        1 23242420         6 #> 43:      0      0      0      0      0        0        1 23242420         7 #> 44:    995    995    995    995    995      995      995 23242420         6 #> 45:    995    995    995    995    995      995      995 23242420         6 #> 46:    995    995    995    995    995      995      995 23242420         6 #> 47:    995    995    995    995    995      995      995 23242420         6 #> 48:      0      0      1      0      0        0        0 23275913         4 #> 49:      0      0      1      0      0        0        0 23275913         0 #> 50:    995    995    995    995    995      995      995 23275913         2 #> 51:    995    995    995    995    995      995      995 23275913         2 #> 52:    995    995    995    995    995      995      995 23275913         2 #> 53:      0      0      1      0      0        0        0 23275913         2 #> 54:      0      0      0      0      1        0        0 23293124         4 #> 55:      0      0      0      0      1        0        0 23293124         5 #> 56:    995    995    995    995    995      995      995 23293124         3 #> 57:    995    995    995    995    995      995      995 23293124         3 #> 58:    995    995    995    995    995      995      995 23293124         6 #> 59:    995    995    995    995    995      995      995 23293124         0 #> 60:      0      0      0      0      1        0        0 23411644         4 #> 61:      0      0      0      0      1        0        0 23411644         6 #> 62:    995    995    995    995    995      995      995 23411644         4 #> 63:    995    995    995    995    995      995      995 23411644         2 #> 64:    995    995    995    995    995      995      995 23411644         2 #> 65:    995    995    995    995    995      995      995 23411644         6 #>     race_1 race_2 race_3 race_4 race_5 race_997 race_999    hh_id num_trips #>      person_id age gender employment education person_weight #>  1: 2307762301   7      2          1         7           697 #>  2: 2307762302   2      2        995       995           752 #>  3: 2307762303   7      1          1         7           793 #>  4: 2307762304   9      1          5         6           801 #>  5: 2307762305   4      1          6         3           840 #>  6: 2307762306  10      2          5         7           527 #>  7: 2307762307  11      1          5         7            94 #>  8: 2321433901   5      2          1         7            98 #>  9: 2321433902   5      1          1         5           129 #> 10: 2321433903   5      1          1         7           681 #> 11: 2321433904   9      2          5         3           665 #> 12: 2321433905   8      1          5         2           362 #> 13: 2321433906   5    999          2         1           405 #> 14: 2321433907   4    999          7         5           860 #> 15: 2321433908   4    999          7         7           631 #> 16: 2321433909   5    999          2         5           535 #> 17: 2321433910   5    999          2         6            85 #> 18: 2321433911   6    999          1         5           602 #> 19: 2321433912   6    999          2         4           664 #> 20: 2321433913   6    999          2         6           903 #> 21: 2322540201   7      2          5         3           617 #> 22: 2322540202   5      1          5         3           419 #> 23: 2322540203   7      1          1         6           671 #> 24: 2322540204   5      2          5         6           212 #> 25: 2322540205   4      2          5         2           492 #> 26: 2322540206  10      1          5         3           578 #> 27: 2322540207   1    999        995       995           918 #> 28: 2322540208   5    995          1       995           801 #> 29: 2322540209   1    995        995       995           903 #> 30: 2323031001   6      1          1         6           802 #> 31: 2323031002   5      2          1         2           824 #> 32: 2323031003   2      2        995       995           561 #> 33: 2323031004   2      1        995       995           261 #> 34: 2323031005   2      2        995       995           617 #> 35: 2323031006   2      1        995       995           100 #> 36: 2323876501   7      1          1         6           669 #> 37: 2323876502   8      2          5         3           505 #> 38: 2323876503   4      2          6         3           104 #> 39: 2323876504   2      1        995       995           813 #> 40: 2323876505   2      1        995       995           279 #> 41: 2323876506   2      1        995       995           410 #> 42: 2324242001   6    999          5         2           401 #> 43: 2324242002   6    999          1         2           999 #> 44: 2324242003   3    999          5       995           602 #> 45: 2324242004   2    999        995       995           236 #> 46: 2324242005   2    999        995       995           426 #> 47: 2324242006   1    999        995       995           346 #> 48: 2327591301   7      2          1         7           498 #> 49: 2327591302   9      1          5         2           389 #> 50: 2327591303   2      2        995       995           100 #> 51: 2327591304   2      2        995       995           320 #> 52: 2327591305   1      1        995       995           672 #> 53: 2327591306   6      1          1         2           526 #> 54: 2329312401   6      2          1         7           122 #> 55: 2329312402   6      1          5         7           647 #> 56: 2329312403   2      1        995       995            66 #> 57: 2329312404   2      2        995       995           698 #> 58: 2329312405   1      1        995       995           470 #> 59: 2329312406   1      2        995       995           641 #> 60: 2341164401   6      1          1         5           657 #> 61: 2341164402   6      2          1         6           689 #> 62: 2341164403   2      1        995       995           191 #> 63: 2341164404   2      1        995       995           707 #> 64: 2341164405   2      2        995       995           226 #> 65: 2341164406   2      1        995       995           556 #>      person_id age gender employment education person_weight #>  #> $day #>     delivery_2 delivery_3 delivery_4 delivery_5 delivery_6 delivery_7 #>  1:          0          0          1          1          0          0 #>  2:        995        995        995        995        995        995 #>  3:        995        995        995        995        995        995 #>  4:        995        995        995        995        995        995 #>  5:        995        995        995        995        995        995 #>  6:        995        995        995        995        995        995 #>  7:        995        995        995        995        995        995 #>  8:          0          0          0          1          0          0 #>  9:        995        995        995        995        995        995 #> 10:        995        995        995        995        995        995 #> 11:        995        995        995        995        995        995 #> 12:        995        995        995        995        995        995 #> 13:        995        995        995        995        995        995 #> 14:        995        995        995        995        995        995 #> 15:        995        995        995        995        995        995 #> 16:        995        995        995        995        995        995 #> 17:        995        995        995        995        995        995 #> 18:        995        995        995        995        995        995 #> 19:        995        995        995        995        995        995 #> 20:        995        995        995        995        995        995 #> 21:          0          0          0          0          0          0 #> 22:        995        995        995        995        995        995 #> 23:        995        995        995        995        995        995 #> 24:        995        995        995        995        995        995 #> 25:        995        995        995        995        995        995 #> 26:        995        995        995        995        995        995 #> 27:        995        995        995        995        995        995 #> 28:          1          0          0          1          0          0 #> 29:        995        995        995        995        995        995 #> 30:        995        995        995        995        995        995 #> 31:        995        995        995        995        995        995 #> 32:        995        995        995        995        995        995 #> 33:        995        995        995        995        995        995 #> 34:          0          0          0          1          0          0 #> 35:        995        995        995        995        995        995 #> 36:        995        995        995        995        995        995 #> 37:        995        995        995        995        995        995 #> 38:        995        995        995        995        995        995 #> 39:        995        995        995        995        995        995 #> 40:          0          1          0          1          0          0 #> 41:        995        995        995        995        995        995 #> 42:        995        995        995        995        995        995 #> 43:        995        995        995        995        995        995 #> 44:        995        995        995        995        995        995 #> 45:        995        995        995        995        995        995 #> 46:          0          0          0          0          0          0 #> 47:        995        995        995        995        995        995 #> 48:        995        995        995        995        995        995 #> 49:        995        995        995        995        995        995 #> 50:        995        995        995        995        995        995 #> 51:        995        995        995        995        995        995 #> 52:          0          1          1          1          0          0 #> 53:        995        995        995        995        995        995 #> 54:        995        995        995        995        995        995 #> 55:        995        995        995        995        995        995 #> 56:        995        995        995        995        995        995 #> 57:        995        995        995        995        995        995 #> 58:          0          0          0          1          0          0 #> 59:        995        995        995        995        995        995 #> 60:        995        995        995        995        995        995 #> 61:        995        995        995        995        995        995 #> 62:        995        995        995        995        995        995 #> 63:        995        995        995        995        995        995 #>     delivery_2 delivery_3 delivery_4 delivery_5 delivery_6 delivery_7 #>     delivery_8 delivery_996    hh_id num_trips  person_id       day_id #>  1:          0            0 23077623         6 2307762301 230776230101 #>  2:        995          995 23077623         0 2307762302 230776230201 #>  3:        995          995 23077623         1 2307762303 230776230301 #>  4:        995          995 23077623         6 2307762304 230776230401 #>  5:        995          995 23077623         0 2307762305 230776230501 #>  6:        995          995 23077623         6 2307762306 230776230601 #>  7:        995          995 23077623         6 2307762307 230776230701 #>  8:          0            0 23214339         6 2321433901 232143390101 #>  9:        995          995 23214339         2 2321433902 232143390201 #> 10:        995          995 23214339         2 2321433903 232143390301 #> 11:        995          995 23214339         1 2321433904 232143390401 #> 12:        995          995 23214339         1 2321433905 232143390501 #> 13:        995          995 23214339         1 2321433906 232143390601 #> 14:        995          995 23214339         1 2321433907 232143390701 #> 15:        995          995 23214339         1 2321433908 232143390801 #> 16:        995          995 23214339         1 2321433909 232143390901 #> 17:        995          995 23214339         1 2321433910 232143391001 #> 18:        995          995 23214339         1 2321433911 232143391101 #> 19:        995          995 23214339         1 2321433912 232143391201 #> 20:        995          995 23214339         1 2321433913 232143391301 #> 21:          0            1 23225402         0 2322540201 232254020101 #> 22:        995          995 23225402         3 2322540202 232254020201 #> 23:        995          995 23225402         3 2322540203 232254020301 #> 24:        995          995 23225402         0 2322540204 232254020401 #> 25:        995          995 23225402         0 2322540205 232254020501 #> 26:        995          995 23225402         0 2322540206 232254020601 #> 27:        995          995 23225402         0 2322540207 232254020701 #> 28:          0            0 23230310         4 2323031001 232303100101 #> 29:        995          995 23230310         0 2323031002 232303100201 #> 30:        995          995 23230310         3 2323031003 232303100301 #> 31:        995          995 23230310         2 2323031004 232303100401 #> 32:        995          995 23230310         2 2323031005 232303100501 #> 33:        995          995 23230310         2 2323031006 232303100601 #> 34:          0            0 23238765         3 2323876501 232387650101 #> 35:        995          995 23238765         0 2323876502 232387650201 #> 36:        995          995 23238765         0 2323876503 232387650301 #> 37:        995          995 23238765         0 2323876504 232387650401 #> 38:        995          995 23238765         0 2323876505 232387650501 #> 39:        995          995 23238765         0 2323876506 232387650601 #> 40:          0            0 23242420         6 2324242001 232424200101 #> 41:        995          995 23242420         7 2324242002 232424200201 #> 42:        995          995 23242420         6 2324242003 232424200301 #> 43:        995          995 23242420         6 2324242004 232424200401 #> 44:        995          995 23242420         6 2324242005 232424200501 #> 45:        995          995 23242420         6 2324242006 232424200601 #> 46:          0            1 23275913         4 2327591301 232759130101 #> 47:        995          995 23275913         0 2327591302 232759130201 #> 48:        995          995 23275913         2 2327591303 232759130301 #> 49:        995          995 23275913         2 2327591304 232759130401 #> 50:        995          995 23275913         2 2327591305 232759130501 #> 51:        995          995 23275913         2 2327591306 232759130601 #> 52:          0            0 23293124         4 2329312401 232931240101 #> 53:        995          995 23293124         5 2329312402 232931240201 #> 54:        995          995 23293124         3 2329312403 232931240301 #> 55:        995          995 23293124         3 2329312404 232931240401 #> 56:        995          995 23293124         6 2329312405 232931240501 #> 57:        995          995 23293124         0 2329312406 232931240601 #> 58:          0            0 23411644         4 2341164401 234116440101 #> 59:        995          995 23411644         6 2341164402 234116440201 #> 60:        995          995 23411644         4 2341164403 234116440301 #> 61:        995          995 23411644         2 2341164404 234116440401 #> 62:        995          995 23411644         2 2341164405 234116440501 #> 63:        995          995 23411644         6 2341164406 234116440601 #>     delivery_8 delivery_996    hh_id num_trips  person_id       day_id #>     travel_date begin_day end_day day_weight #>  1:  2023-05-03         1       1         29 #>  2:  2023-05-03         1       1        229 #>  3:  2023-05-03         3       1        599 #>  4:  2023-05-03         1       1        228 #>  5:  2023-05-03       997     997        935 #>  6:  2023-05-03         1       1        813 #>  7:  2023-05-03         1       1        453 #>  8:  2023-05-29         1       1         90 #>  9:  2023-05-29         1       1        309 #> 10:  2023-05-29         1       1        338 #> 11:  2023-05-29         4       7        168 #> 12:  2023-05-29         4       7        634 #> 13:  2023-05-29         4       7         66 #> 14:  2023-05-29         4       7         91 #> 15:  2023-05-29         4       7        646 #> 16:  2023-05-29         1       7        355 #> 17:  2023-05-29         1       7        242 #> 18:  2023-05-29         1       7        853 #> 19:  2023-05-29         1       7        840 #> 20:  2023-05-29         1       7        796 #> 21:  2023-05-29         1       1        251 #> 22:  2023-05-29         1       1        485 #> 23:  2023-05-29         1       1        377 #> 24:  2023-05-29         1       1        780 #> 25:  2023-05-29         1       1        227 #> 26:  2023-05-29         1       1        799 #> 27:  2023-05-29         1       1        540 #> 28:  2023-05-31         1       1        240 #> 29:  2023-05-31       997     997        742 #> 30:  2023-05-31         1       1        943 #> 31:  2023-05-31         1       1        417 #> 32:  2023-05-31         1       1        582 #> 33:  2023-05-31         1       1        651 #> 34:  2023-05-29         1       1        755 #> 35:  2023-05-29         1       1        711 #> 36:  2023-05-29         1       1        986 #> 37:  2023-05-29         1       1         70 #> 38:  2023-05-29         1       1        599 #> 39:  2023-05-29         1       1        866 #> 40:  2023-05-24         1       1        788 #> 41:  2023-05-24         1       1        401 #> 42:  2023-05-24         1       1        752 #> 43:  2023-05-24         1       1        534 #> 44:  2023-05-24         1       1        353 #> 45:  2023-05-24         1       1         27 #> 46:  2023-06-08         1       1        997 #> 47:  2023-06-08         1       1        896 #> 48:  2023-06-08         1       1        670 #> 49:  2023-06-08         1       1        639 #> 50:  2023-06-08         1       1        264 #> 51:  2023-06-08         1       1        374 #> 52:  2023-06-08         1       1        639 #> 53:  2023-06-08         1       1        606 #> 54:  2023-06-08         1       1        118 #> 55:  2023-06-08         1       1        146 #> 56:  2023-06-08         1       1        374 #> 57:  2023-06-08         1       1        938 #> 58:  2023-05-31         1       3        322 #> 59:  2023-05-31         1       1        785 #> 60:  2023-05-31         1       1        518 #> 61:  2023-05-31         1       1        381 #> 62:  2023-05-31         1       1        715 #> 63:  2023-05-31         1       1        597 #>     travel_date begin_day end_day day_weight #>  #> $trip #>         hh_id  person_id       day_id travel_date      trip_id  speed_mph #>   1: 23077623 2307762301 230776230101  2023-05-03 2.307762e+12         NA #>   2: 23077623 2307762301 230776230101  2023-05-03 2.307762e+12  2.6685051 #>   3: 23077623 2307762301 230776230101  2023-05-03 2.307762e+12         NA #>   4: 23077623 2307762301 230776230101  2023-05-03 2.307762e+12         NA #>   5: 23077623 2307762301 230776230101  2023-05-03 2.307762e+12  0.3321791 #>  ---                                                                      #> 157: 23411644 2341164406 234116440601  2023-05-31 2.341164e+12  7.6175542 #> 158: 23411644 2341164406 234116440601  2023-05-31 2.341164e+12         NA #> 159: 23411644 2341164406 234116440601  2023-05-31 2.341164e+12  6.3479618 #> 160: 23411644 2341164406 234116440601  2023-05-31 2.341164e+12 17.7310895 #> 161: 23411644 2341164406 234116440601  2023-05-31 2.341164e+12 17.7310895 #>      mode_type d_purpose_category trip_weight #>   1:         1                 11         610 #>   2:        13                 11         560 #>   3:         1                  6         708 #>   4:         1                 11         422 #>   5:        13                 11         277 #>  ---                                          #> 157:        13                 11         594 #> 158:         1                  4         900 #> 159:        10                  1         448 #> 160:         8                  9         836 #> 161:         8                  1         819 #>  #> $vehicle #>        hh_id vehicle_id fuel_type hh_weight #>  1: 23077623 2307762301         1       737 #>  2: 23077623 2307762302         1       737 #>  3: 23077623 2307762303         1       737 #>  4: 23214339 2321433901         1       337 #>  5: 23225402 2322540201         1       830 #>  6: 23225402 2322540202         1       830 #>  7: 23225402 2322540203         1       830 #>  8: 23225402 2322540204         1       830 #>  9: 23225402 2322540205         5       830 #> 10: 23225402 2322540206         1       830 #> 11: 23225402 2322540207         1       830 #> 12: 23225402 2322540208         1       830 #> 13: 23230310 2323031001         2        55 #> 14: 23230310 2323031002         1        55 #> 15: 23230310 2323031003         1        55 #> 16: 23238765 2323876501         1       807 #> 17: 23238765 2323876502         2       807 #> 18: 23238765 2323876503         1       807 #> 19: 23242420 2324242001         1       376 #> 20: 23275913 2327591301         1       351 #> 21: 23275913 2327591302         1       351 #> 22: 23293124 2329312401         1       163 #> 23: 23293124 2329312402         3       163 #> 24: 23411644 2341164401         1       747 #> 25: 23411644 2341164402         1       747 #> 26: 23411644 2341164403         5       747 #>        hh_id vehicle_id fuel_type hh_weight #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Find table location of a variable — hts_find_var","title":"Find table location of a variable — hts_find_var","text":"Find table location variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find table location of a variable — hts_find_var","text":"","code":"hts_find_var(var, variables_dt = variable_list)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find table location of a variable — hts_find_var","text":"var searchable variable string format variables_dt codebook variable list data table format","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find table location of a variable — hts_find_var","text":"variable location string format","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find table location of a variable — hts_find_var","text":"","code":"hts_find_var('income_detailed') #> [1] \"hh\""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":null,"dir":"Reference","previous_headings":"","what":"Find key columns in table — hts_get_keycols","title":"Find key columns in table — hts_get_keycols","text":"Find key columns table","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find key columns in table — hts_get_keycols","text":"","code":"hts_get_keycols(dt, ids = TRUE, weights = TRUE, priority = FALSE)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find key columns in table — hts_get_keycols","text":"dt Dataset find key columns data.table format ids Boolean whether return id columns. Default TRUE. weights Boolean whether return weight columns. Default TRUE. priority Boolean whether return highest level weight/id. Default FALSE.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find key columns in table — hts_get_keycols","text":"List names key columns dataset.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find key columns in table — hts_get_keycols","text":"","code":"require(data.table) hts_get_keycols(dt = trip) #> [1] \"hh_id\"       \"person_id\"   \"day_id\"      \"trip_id\"     \"trip_weight\" hts_get_keycols(dt = trip, priority = TRUE) #> [1] \"trip_id\"     \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get counts from dataset — hts_get_ns","title":"Get counts from dataset — hts_get_ns","text":"Get counts dataset","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get counts from dataset — hts_get_ns","text":"","code":"hts_get_ns(   prepped_dt,   weighted,   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   wt_col )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get counts from dataset — hts_get_ns","text":"prepped_dt Dataset pull counts . weighted Boolean whether pull weighted estimates. ids list possible ids return counts wt_col weight column return sum ","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get counts from dataset — hts_get_ns","text":"List unweighted counts, weighted counts, highest level unit.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get counts from dataset — hts_get_ns","text":"","code":"require(data.table)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Melts checkbox variables into a single variable — hts_melt_vars","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"Melts checkbox variables single variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"","code":"hts_melt_vars(   shared_name = NULL,   wide_dt = NULL,   shared_name_vars = NULL,   variables_dt = variable_list,   data = hts_data,   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   remove_missing = TRUE,   missing_values = c(\"Missing Response\", \"995\"),   checkbox_label_sep = \":\",   to_single_row = FALSE )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"shared_name Shared name checkbox variable melt (e.g., 'race_1', 'race_2' shared name 'race'). Defaults NULL. wide_dt Table containing checkbox variables melt data.table format. shared_name_vars List checkbox variables shared name. Defaults NULL. variables_dt List variable locations descriptions data.table format. data List containing household, person, day, trip, vehicle datasets data.table format. ids unique identifiers appearing wide_dt remove_missing Boolean remove rows missing values. Defaults TRUE. missing_values Missing values remove. Defaults 'Missing Response' 995. checkbox_label_sep Character use split description checkbox variable variable list. Defaults ':' to_single_row Boolean treating multiple checkbox selections 'Two '. Defaults FALSE.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"Inputted data table checkbox variables melted single variable, 'variable' column indicate original variable names 'value' column original value checkbox variable.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"","code":"require(data.table) require(stringr) hts_melt_vars(shared_name = 'race',               wide_dt = person,               data = list('hh' = hh,                               'person' = person,                               'day' = day,                               'trip' = trip,                               'vehicle' = vehicle)) #>           hh_id  person_id variable value                      race #>     1: 23000137 2300013701   race_1     0 African American or Black #>     2: 23000137 2300013702   race_1     0 African American or Black #>     3: 23000185 2300018501   race_1     0 African American or Black #>     4: 23000185 2300018502   race_1     0 African American or Black #>     5: 23000738 2300073801   race_1     0 African American or Black #>    ---                                                              #> 11623: 23419373 2341937301 race_999     0      Prefer not to answer #> 11624: 23419703 2341970301 race_999     0      Prefer not to answer #> 11625: 23421077 2342107701 race_999     0      Prefer not to answer #> 11626: 23422853 2342285301 race_999     0      Prefer not to answer #> 11627: 23422853 2342285302 race_999     0      Prefer not to answer"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare variable to be summarized — hts_prep_byvar","title":"Prepare variable to be summarized — hts_prep_byvar","text":"Prepare variable summarized","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare variable to be summarized — hts_prep_byvar","text":"","code":"hts_prep_byvar(   summarize_by = NULL,   variables_dt = variable_list,   hts_data,   byvar_ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   byvar_wts = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\"),   ... )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare variable to be summarized — hts_prep_byvar","text":"summarize_by Name variable prepped. Default NULL. variables_dt List variable locations descriptions data.table format. hts_data List containing household, person, day, trip, vehicle datasets data.table format. byvar_ids unique identifiers table hts_data byvar_wts weight column table hts_data ... Additional parameters pass link{hts_melt_vars}","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare variable to be summarized — hts_prep_byvar","text":"Data table containing variable summarized key columns.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare variable to be summarized — hts_prep_byvar","text":"","code":"hts_prep_byvar(summarize_by = 'age',                variables_dt = variable_list,                hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #>          hh_id  person_id person_weight age #>    1: 23000137 2300013701           320   5 #>    2: 23000137 2300013702           827   5 #>    3: 23000185 2300018501           315   9 #>    4: 23000185 2300018502           933   9 #>    5: 23000738 2300073801           489   8 #>   ---                                       #> 2026: 23421077 2342107701           813   8 #> 2027: 23422853 2342285301           980   7 #> 2028: 23422853 2342285302           679   7 #> 2029: 23422853 2342285303           882   2 #> 2030: 23422853 2342285304           525   2 hts_prep_byvar(summarize_by = 'race',                variables_dt = variable_list,                hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #>          hh_id  person_id                      race #>    1: 23012105 2301210501 African American or Black #>    2: 23034611 2303461101 African American or Black #>    3: 23042140 2304214001 African American or Black #>    4: 23050669 2305066901 African American or Black #>    5: 23058306 2305830601 African American or Black #>   ---                                               #> 1657: 23396628 2339662802      Prefer not to answer #> 1658: 23399186 2339918601      Prefer not to answer #> 1659: 23412082 2341208201      Prefer not to answer #> 1660: 23412082 2341208202      Prefer not to answer #> 1661: 23413086 2341308603      Prefer not to answer"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare datasets to make summaries — hts_prep_data","title":"Prepare datasets to make summaries — hts_prep_data","text":"Prepare datasets make summaries","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare datasets to make summaries — hts_prep_data","text":"","code":"hts_prep_data(   summarize_var = NULL,   summarize_by = NULL,   variables_dt = variable_list,   data = hts_data,   id_cols = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   weighted = TRUE,   wt_cols = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\"),   remove_outliers = TRUE,   threshold = 0.975,   remove_missing = TRUE,   missing_values = c(\"Missing Response\", \"995\"),   not_imputable = -1,   strataname = NULL )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare datasets to make summaries — hts_prep_data","text":"summarize_var Name variable summarize. Default NULL summarize_by Name variable summarize summarize_var . Default NULL. variables_dt List variable locations descriptions data.table format. data List household, person, vehicle, day, trip tables data.table format. id_cols name unique identifier table hts_data weighted Whether data weighted. Default TRUE. wt_cols weight name table hts_data remove_outliers Whether remove outliers numeric variable. Default TRUE. threshold Threshold define outliers. Default 0.975. remove_missing Whether remove missing values summary. Default TRUE. missing_values Missing values remove. Default 995. not_imputable Value representing 'imputable' remove. Default -1. strataname Name strata name bring . Default NULL.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare datasets to make summaries — hts_prep_data","text":"List containing categorical numeric datasets summary variables key columns, either whether summarize variable shared breakdown outliers, depending summarize variable categorical numeric.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare datasets to make summaries — hts_prep_data","text":"","code":"require(data.table) require(stringr) hts_prep_data(summarize_var = 'age',               variables_dt = variable_list,               data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> Creating a summary of person age  #> $cat #>          hh_id  person_id age person_weight #>    1: 23000137 2300013701   5           320 #>    2: 23000137 2300013702   5           827 #>    3: 23000185 2300018501   9           315 #>    4: 23000185 2300018502   9           933 #>    5: 23000738 2300073801   8           489 #>   ---                                       #> 2026: 23421077 2342107701   8           813 #> 2027: 23422853 2342285301   7           980 #> 2028: 23422853 2342285302   7           679 #> 2029: 23422853 2342285303   2           882 #> 2030: 23422853 2342285304   2           525 #>  #> $num #> NULL #>  hts_prep_data(summarize_var = 'speed_mph',               summarize_by = 'age',               variables_dt = variable_list,               data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> Creating a summary of trip speed_mph broken down by person age #> $cat #>           hh_id  person_id       day_id      trip_id person_weight trip_weight #>     1: 23000137 2300013701 230001370101 2.300014e+12           320         890 #>     2: 23000137 2300013701 230001370101 2.300014e+12           320         663 #>     3: 23000137 2300013701 230001370101 2.300014e+12           320         892 #>     4: 23000137 2300013701 230001370101 2.300014e+12           320         146 #>     5: 23000137 2300013701 230001370101 2.300014e+12           320         630 #>    ---                                                                         #> 16279: 23422853 2342285303 234228530301 2.342285e+12           882         935 #> 16280: 23422853 2342285303 234228530301 2.342285e+12           882         234 #> 16281: 23422853 2342285303 234228530301 2.342285e+12           882         379 #> 16282: 23422853 2342285304 234228530401 2.342285e+12           525         210 #> 16283: 23422853 2342285304 234228530401 2.342285e+12           525         468 #>        speed_mph age #>     1:      1-10   5 #>     2:      1-10   5 #>     3:      1-10   5 #>     4:      1-10   5 #>     5:      1-10   5 #>    ---               #> 16279:      1-10   2 #> 16280:      1-10   2 #> 16281:      1-10   2 #> 16282:      1-10   2 #> 16283:      1-10   2 #>  #> $num #>           hh_id  person_id       day_id      trip_id person_weight trip_weight #>     1: 23000137 2300013701 230001370101 2.300014e+12           320         890 #>     2: 23000137 2300013701 230001370101 2.300014e+12           320         663 #>     3: 23000137 2300013701 230001370101 2.300014e+12           320         892 #>     4: 23000137 2300013701 230001370101 2.300014e+12           320         146 #>     5: 23000137 2300013701 230001370101 2.300014e+12           320         630 #>    ---                                                                         #> 16279: 23422853 2342285303 234228530301 2.342285e+12           882         935 #> 16280: 23422853 2342285303 234228530301 2.342285e+12           882         234 #> 16281: 23422853 2342285303 234228530301 2.342285e+12           882         379 #> 16282: 23422853 2342285304 234228530401 2.342285e+12           525         210 #> 16283: 23422853 2342285304 234228530401 2.342285e+12           525         468 #>        speed_mph age #>     1:  4.764584   5 #>     2:  7.425306   5 #>     3:  5.372348   5 #>     4:  3.232303   5 #>     5:  3.106531   5 #>    ---               #> 16279:  8.094207   2 #> 16280:  7.888320   2 #> 16281:  6.378893   2 #> 16282:  8.094207   2 #> 16283:  7.888320   2 #>  #> $outliers #>    threshold num_removed min_outlier max_outlier #> 1:     0.975         418    123.5646    466317.9 #>                                                            hts_prep_data(summarize_var = 'employment',               summarize_by = c('age', 'race'),               variables_dt = variable_list,               data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> Creating a summary of person employment broken down by person age and person race #> $cat #>          hh_id  person_id person_weight employment age                 race #>    1: 23000137 2300013701           320          1   5                White #>    2: 23000137 2300013702           827          1   5 Prefer not to answer #>    3: 23000185 2300018501           315          5   9                White #>    4: 23000185 2300018502           933          1   9                White #>    5: 23000738 2300073801           489          1   8                White #>   ---                                                                       #> 1657: 23419373 2341937301           108          1   8                White #> 1658: 23419703 2341970301           501          5   9                White #> 1659: 23421077 2342107701           813          1   8                White #> 1660: 23422853 2342285301           980          1   7                Asian #> 1661: 23422853 2342285302           679          1   7                White #>  #> $num #> NULL #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare datasets for trip rate calculations — hts_prep_triprate","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"Prepare datasets trip rate calculations","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"","code":"hts_prep_triprate(   summarize_by = NULL,   variables_dt = variable_list,   trip_name = \"trip\",   day_name = \"day\",   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   wts = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\"),   remove_outliers = TRUE,   threshold = 0.975,   weighted = TRUE,   hts_data )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"summarize_by Name variable summarize trip rates . Default NULL. variables_dt List variable locations descriptions data.table format. trip_name Name trip dataset hts_data. day_name Name day dataset hts_data. ids name unique identifier table hts_data wts name weight column table hts_data remove_outliers Boolean whether remove outliers dataset. Default TRUE. threshold Threshold define outliers. Default 0.975. weighted Whether data weighted. Default TRUE. hts_data List containing household, person, day, trip, vehicle datasets data.table format.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"List binned number trips key columns summarize variable, unbinned number trips key columns summarize variable, breakdown outliers removed.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"","code":"require(data.table) require(stringr) hts_prep_triprate(variables_dt = variable_list,                   trip_name = 'trip',                   day_name = 'day',                   hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> $cat #>          hh_id  person_id       day_id day_weight num_trips_wtd #>    1: 23000137 2300013701 230001370101        861          7-14 #>    2: 23000137 2300013701 230001370102        489           0-7 #>    3: 23000137 2300013701 230001370103        119         28-35 #>    4: 23000137 2300013701 230001370104         47    36 or more #>    5: 23000137 2300013701 230001370105        740           0-7 #>   ---                                                           #> 4302: 23421077 2342107701 234210770101        574     Exactly 0 #> 4303: 23422853 2342285301 234228530101        262           0-7 #> 4304: 23422853 2342285302 234228530201        737     Exactly 0 #> 4305: 23422853 2342285303 234228530301        367           0-7 #> 4306: 23422853 2342285304 234228530401        169           0-7 #>  #> $num #>          hh_id  person_id       day_id day_weight num_trips_wtd #>    1: 23000137 2300013701 230001370101        861      7.634146 #>    2: 23000137 2300013701 230001370102        489      1.560327 #>    3: 23000137 2300013701 230001370103        119     33.008403 #>    4: 23000137 2300013701 230001370104         47     61.638298 #>    5: 23000137 2300013701 230001370105        740      6.168919 #>   ---                                                           #> 4302: 23421077 2342107701 234210770101        574      0.000000 #> 4303: 23422853 2342285301 234228530101        262      3.652672 #> 4304: 23422853 2342285302 234228530201        737      0.000000 #> 4305: 23422853 2342285303 234228530301        367      4.217984 #> 4306: 23422853 2342285304 234228530401        169      4.011834 #>  #> $outliers #>    threshold num_removed min_outlier max_outlier #> 1:     0.975         111    65.57778      802.75 #>  hts_prep_triprate(summarize_by = 'age',                   variables_dt = variable_list,                   trip_name = 'trip',                   day_name = 'day',                   hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> $cat #>          hh_id  person_id       day_id day_weight person_weight age #>    1: 23000137 2300013701 230001370101        861           320   5 #>    2: 23000137 2300013701 230001370102        489           320   5 #>    3: 23000137 2300013701 230001370103        119           320   5 #>    4: 23000137 2300013701 230001370104         47           320   5 #>    5: 23000137 2300013701 230001370105        740           320   5 #>   ---                                                               #> 4302: 23421077 2342107701 234210770101        574           813   8 #> 4303: 23422853 2342285301 234228530101        262           980   7 #> 4304: 23422853 2342285302 234228530201        737           679   7 #> 4305: 23422853 2342285303 234228530301        367           882   2 #> 4306: 23422853 2342285304 234228530401        169           525   2 #>       num_trips_wtd #>    1:          7-14 #>    2:           0-7 #>    3:         28-35 #>    4:    36 or more #>    5:           0-7 #>   ---               #> 4302:     Exactly 0 #> 4303:           0-7 #> 4304:     Exactly 0 #> 4305:           0-7 #> 4306:           0-7 #>  #> $num #>          hh_id  person_id       day_id day_weight person_weight age #>    1: 23000137 2300013701 230001370101        861           320   5 #>    2: 23000137 2300013701 230001370102        489           320   5 #>    3: 23000137 2300013701 230001370103        119           320   5 #>    4: 23000137 2300013701 230001370104         47           320   5 #>    5: 23000137 2300013701 230001370105        740           320   5 #>   ---                                                               #> 4302: 23421077 2342107701 234210770101        574           813   8 #> 4303: 23422853 2342285301 234228530101        262           980   7 #> 4304: 23422853 2342285302 234228530201        737           679   7 #> 4305: 23422853 2342285303 234228530301        367           882   2 #> 4306: 23422853 2342285304 234228530401        169           525   2 #>       num_trips_wtd #>    1:      7.634146 #>    2:      1.560327 #>    3:     33.008403 #>    4:     61.638298 #>    5:      6.168919 #>   ---               #> 4302:      0.000000 #> 4303:      3.652672 #> 4304:      0.000000 #> 4305:      4.217984 #> 4306:      4.011834 #>  #> $outliers #>    threshold num_removed min_outlier max_outlier #> 1:     0.975         111    65.57778      802.75 #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove missing data for summary variables — hts_remove_missing_data","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"Remove missing data summary variables","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"","code":"hts_remove_missing_data(   hts_data,   variables_dt,   summarize_var,   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   summarize_by = NULL,   missing_values = c(\"Missing Response\", \"995\"),   not_imputable = -1 )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"hts_data List containing household, person, day, trip, vehicle datasets data.table format. variables_dt variable list descriptions table locations variables. summarize_var Variable summarized missing data removed. ids names unique identifiers table hts_data summarize_by Variable summarized missing data removed. Default NULL. missing_values Missing values removed. Defaults 995 'Missing Response'. not_imputable Value meaning not_imputable removed. Default -1.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"Inputted list datasets without missing values specified variables.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"","code":"require(data.table) hts_remove_missing_data(hts_data = list('hh' = hh,                                         'person' = person,                                         'day' = day,                                         'trip' = trip,                                         'vehicle' = vehicle),                         variables_dt = variable_list,                         summarize_var = 'speed_mph',                         summarize_by = 'mode_type') #> $hh #>          hh_id sample_segment num_trips num_people income_detailed #>    1: 23000137             16       102          2               8 #>    2: 23000185             19         3          2               7 #>    3: 23000738              4        16          1             999 #>    4: 23000946             16        28          1               8 #>    5: 23001247             16        58          3              10 #>   ---                                                              #>  996: 23414947             14         2          2               6 #>  997: 23419373              5         3          1               9 #>  998: 23419703             14         2          1               2 #>  999: 23421077             14         0          1               6 #> 1000: 23422853              5         7          4              10 #>       income_followup  home_lon home_lat home_county residence_type hh_weight #>    1:             995 -90.53053 39.20821           1            995       249 #>    2:             995 -91.69169 35.22122           3              1       420 #>    3:             999 -97.47748 39.07508           1              1       501 #>    4:             995 -94.21421 37.73674           3              1       519 #>    5:             995 -80.00000 33.35736           1              2       493 #>   ---                                                                         #>  996:             995 -80.54054 34.56957           2              1       418 #>  997:             995 -86.24625 35.80981           2              1       753 #>  998:             995 -90.95095 34.45746           1              1       294 #>  999:             995 -93.47347 37.69469           3              1       342 #> 1000:             995 -92.61261 36.16717           1              1       976 #>  #> $person #>       ethnicity_1 ethnicity_2 ethnicity_3 ethnicity_4 ethnicity_997 #>    1:           1           0           0           0             0 #>    2:           0           0           0           0             0 #>    3:           1           0           0           0             0 #>    4:           1           0           0           0             0 #>    5:           1           0           0           0             0 #>   ---                                                               #> 2026:           1           0           0           0             0 #> 2027:           1           0           0           0             0 #> 2028:           1           0           0           0             0 #> 2029:         995         995         995         995           995 #> 2030:         995         995         995         995           995 #>       ethnicity_999 race_1 race_2 race_3 race_4 race_5 race_997 race_999 #>    1:             0      0      0      0      0      1        0        0 #>    2:             1      0      0      0      0      0        0        1 #>    3:             0      0      0      0      0      1        0        0 #>    4:             0      0      0      0      0      1        0        0 #>    5:             0      0      0      0      0      1        0        0 #>   ---                                                                    #> 2026:             0      0      0      0      0      1        0        0 #> 2027:             0      0      0      1      0      0        0        0 #> 2028:             0      0      0      0      0      1        0        0 #> 2029:           995    995    995    995    995    995      995      995 #> 2030:           995    995    995    995    995    995      995      995 #>          hh_id num_trips  person_id age gender employment education #>    1: 23000137        59 2300013701   5      1          1         6 #>    2: 23000137        43 2300013702   5      1          1         6 #>    3: 23000185         1 2300018501   9      1          5         3 #>    4: 23000185         2 2300018502   9      2          1         3 #>    5: 23000738        16 2300073801   8      1          1         7 #>   ---                                                               #> 2026: 23421077         0 2342107701   8      2          1         4 #> 2027: 23422853         2 2342285301   7      1          1         6 #> 2028: 23422853         0 2342285302   7      2          1         7 #> 2029: 23422853         3 2342285303   2      2        995       995 #> 2030: 23422853         2 2342285304   2      1        995       995 #>       person_weight #>    1:           320 #>    2:           827 #>    3:           315 #>    4:           933 #>    5:           489 #>   ---               #> 2026:           813 #> 2027:           980 #> 2028:           679 #> 2029:           882 #> 2030:           525 #>  #> $day #>       delivery_2 delivery_3 delivery_4 delivery_5 delivery_6 delivery_7 #>    1:          0          1          0          0          0          0 #>    2:          0          0          0          0          0          0 #>    3:          0          0          0          0          0          0 #>    4:          0          0          0          0          0          0 #>    5:          0          0          0          0          0          0 #>   ---                                                                   #> 4413:          0          0          0          0          0          0 #> 4414:          0          0          0          0          0          0 #> 4415:        995        995        995        995        995        995 #> 4416:        995        995        995        995        995        995 #> 4417:        995        995        995        995        995        995 #>       delivery_8 delivery_996    hh_id num_trips  person_id       day_id #>    1:          0            0 23000137        13 2300013701 230001370101 #>    2:          0            1 23000137        15 2300013702 230001370201 #>    3:          0            1 23000137         2 2300013701 230001370102 #>    4:          0            1 23000137         0 2300013702 230001370202 #>    5:          0            1 23000137         7 2300013701 230001370103 #>   ---                                                                    #> 4413:          0            1 23421077         0 2342107701 234210770101 #> 4414:          0            1 23422853         2 2342285301 234228530101 #> 4415:        995          995 23422853         0 2342285302 234228530201 #> 4416:        995          995 23422853         3 2342285303 234228530301 #> 4417:        995          995 23422853         2 2342285304 234228530401 #>       travel_date begin_day end_day day_weight #>    1:  2023-04-25         1       1        861 #>    2:  2023-04-25         1       1        991 #>    3:  2023-04-26         1       1        489 #>    4:  2023-04-26         1       1        558 #>    5:  2023-04-27         1       1        119 #>   ---                                          #> 4413:  2023-06-07         1       1        574 #> 4414:  2023-06-05         1       1        262 #> 4415:  2023-06-05         1       1        737 #> 4416:  2023-06-05         1       1        367 #> 4417:  2023-06-05         1       1        169 #>  #> $trip #>           hh_id  person_id       day_id travel_date      trip_id speed_mph #>     1: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12  4.764584 #>     2: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12  7.425306 #>     3: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12  5.372348 #>     4: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12  3.232303 #>     5: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12  3.106531 #>    ---                                                                     #> 16996: 23422853 2342285303 234228530301  2023-06-05 2.342285e+12  8.094207 #> 16997: 23422853 2342285303 234228530301  2023-06-05 2.342285e+12  7.888320 #> 16998: 23422853 2342285303 234228530301  2023-06-05 2.342285e+12  6.378893 #> 16999: 23422853 2342285304 234228530401  2023-06-05 2.342285e+12  8.094207 #> 17000: 23422853 2342285304 234228530401  2023-06-05 2.342285e+12  7.888320 #>        mode_type d_purpose_category trip_weight #>     1:         1                 11         890 #>     2:        13                 11         663 #>     3:         1                 10         892 #>     4:         1                  1         146 #>     5:         1                 11         630 #>    ---                                          #> 16996:         8                  6         935 #> 16997:        10                  4         234 #> 16998:        10                  1         379 #> 16999:         8                  4         210 #> 17000:        10                  4         468 #>  #> $vehicle #>          hh_id vehicle_id fuel_type hh_weight #>    1: 23000185 2300018501         1       420 #>    2: 23000185 2300018502         1       420 #>    3: 23000738 2300073801         5       501 #>    4: 23000946 2300094601         1       519 #>    5: 23000946 2300094602         4       519 #>   ---                                         #> 1387: 23421077 2342107704         1       342 #> 1388: 23421077 2342107705         1       342 #> 1389: 23422853 2342285301         1       976 #> 1390: 23422853 2342285302         4       976 #> 1391: 23422853 2342285303         1       976 #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove outliers from a numeric variable — hts_remove_outliers","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"Remove outliers numeric variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"","code":"hts_remove_outliers(var_dt, numvar = NULL, threshold = 0.975)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"var_dt Dataset numeric variable remove outliers data.table format. numvar Numeric variable remove outliers . Default NULL. threshold Threshold define outlier . Default .975.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"List outliers removed dataset without outliers.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"","code":"require(data.table) hts_remove_outliers(var_dt = trip, numvar = 'speed_mph') #> $outlier_description #>    threshold num_removed min_outlier max_outlier #> 1:     0.975         418    123.5646    466317.9 #>  #> $dt #>           hh_id  person_id       day_id travel_date      trip_id speed_mph #>     1: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12  4.764584 #>     2: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12  7.425306 #>     3: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12  5.372348 #>     4: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12  3.232303 #>     5: 23000137 2300013701 230001370101  2023-04-25 2.300014e+12  3.106531 #>    ---                                                                     #> 16279: 23422853 2342285303 234228530301  2023-06-05 2.342285e+12  8.094207 #> 16280: 23422853 2342285303 234228530301  2023-06-05 2.342285e+12  7.888320 #> 16281: 23422853 2342285303 234228530301  2023-06-05 2.342285e+12  6.378893 #> 16282: 23422853 2342285304 234228530401  2023-06-05 2.342285e+12  8.094207 #> 16283: 23422853 2342285304 234228530401  2023-06-05 2.342285e+12  7.888320 #>        mode_type d_purpose_category trip_weight #>     1:         1                 11         890 #>     2:        13                 11         663 #>     3:         1                 10         892 #>     4:         1                  1         146 #>     5:         1                 11         630 #>    ---                                          #> 16279:         8                  6         935 #> 16280:        10                  4         234 #> 16281:        10                  1         379 #> 16282:         8                  4         210 #> 16283:        10                  4         468 #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Make household travel survey summaries — hts_summary","title":"Make household travel survey summaries — hts_summary","text":"Make household travel survey summaries","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make household travel survey summaries — hts_summary","text":"","code":"hts_summary(   prepped_dt,   summarize_var,   summarize_by = NULL,   summarize_vartype = \"categorical\",   id_cols = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   weighted = TRUE,   se = FALSE,   wtname = NULL,   strataname = NULL,   checkbox_valname = \"value\",   checkbox_yesval = 1 )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make household travel survey summaries — hts_summary","text":"prepped_dt prepared dataset data.table format variable summarize, variable summarize , weights, used. summarize_var Name variable summarize. Default NULL. summarize_by Name variable summarize summarize_var . Default NULL. summarize_vartype String; one either 'categorical' (variable summarized categorical), 'checkbox' (variable summarized derived multiple response, aka select---apply question) 'numeric', variable summarized numeric. id_cols names possible ids prepped_dt return unique counts weighted Whether data weighted. Default TRUE. se Whether calculate standard error. Default FALSE. set FALSE weighted FALSE. wtname Name weight column use. Default NULL. Must specified weighted = TRUE. strataname Name strata name bring . Default NULL. checkbox_valname Name column checkbox value. Default 'value'. Must provided summarize_var checkbox variable. checkbox_yesval Value checkbox_valname indicates selected. Default 1. Must provided summarize_var checkbox variable.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make household travel survey summaries — hts_summary","text":"list containing (applicable) categorical numeric summaries specified variable(s), well sample sizes whether summarized variable shared checkbox variable. access categorical/numeric df use output$summary. access weighted df use output$summary$wtd, output$summary$unwtd unweighted df. access weight name use output$summary$weight_name. access sample sizes use output$n_ls. access weighted unweighted sample sizes respectively, use output$n_ls$wtd output$n_ls$unwtd.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make household travel survey summaries — hts_summary","text":"","code":"require(data.table) require(stringr) require(dplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:data.table': #>  #>     between, first, last #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union require(srvyr) #> Loading required package: srvyr #>  #> Attaching package: 'srvyr' #> The following object is masked from 'package:stats': #>  #>     filter DT = hts_prep_data(summarize_var = 'age',                    summarize_by = 'employment',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person age broken down by person employment output = hts_summary(prepped_dt = DT,               summarize_var = 'age',               summarize_by = 'employment',               summarize_vartype = 'categorical',               wtname = 'person_weight')  DT = hts_prep_data(summarize_var = 'speed_mph',                    summarize_by = 'age',                     variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$num #> Creating a summary of trip speed_mph broken down by person age output = hts_summary(prepped_dt = DT,               summarize_var = 'speed_mph',               summarize_by = 'age',               summarize_vartype = 'numeric',               wtname = 'trip_weight')  DT = hts_prep_data(summarize_var = 'race',                    summarize_by = 'age',                     variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person race broken down by person age output = hts_summary(prepped_dt = DT,               summarize_var = 'race',               summarize_by = 'age',               summarize_vartype = 'checkbox',               wtname = 'person_weight')"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a categorical variable — hts_summary_cat","title":"Summarize a categorical variable — hts_summary_cat","text":"Summarize categorical variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a categorical variable — hts_summary_cat","text":"","code":"hts_summary_cat(   prepped_dt,   summarize_var = NULL,   summarize_by = NULL,   weighted = TRUE,   se = FALSE,   wtname = NULL,   strataname = NULL,   checkbox_valname = \"value\",   checkbox_yesval = 1,   summarize_vartype = \"categorical\" )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a categorical variable — hts_summary_cat","text":"prepped_dt Dataset containing summary variables key columns data.table format. summarize_var Name categorical variable summarize. Default NULL. summarize_by Name variable summarize summarize_var . Default NULL. weighted Whether data weighted. Default TRUE. se Whether calculate standard error. Default FALSE. wtname Name weight column use. Default NULL. strataname Name strata name bring . Default NULL. checkbox_valname Name column checkbox value. Default 'value'. Must provided summarize_var checkbox variable. checkbox_yesval Value checkbox_valname indicates selected. Default 1. Must provided summarize_var checkbox variable. summarize_vartype String; one either 'categorical' (variable summarized categorical) 'checkbox' (variable summarized derived multiple response, aka select---apply question).","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a categorical variable — hts_summary_cat","text":"List unweighted weighted categorical summaries including counts proportions.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a categorical variable — hts_summary_cat","text":"","code":"require(data.table) require(stringr) require(dplyr) require(srvyr) DT = hts_prep_data(summarize_var = 'age',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person age  hts_summary_cat(prepped_dt = DT,                 summarize_var = 'age',                 wtname = 'person_weight') #> $unwtd #>     age count        prop #>  1:   1    90 0.044334975 #>  2:   2   182 0.089655172 #>  3:   3    24 0.011822660 #>  4:   4   114 0.056157635 #>  5:   5   451 0.222167488 #>  6:   6   347 0.170935961 #>  7:   7   235 0.115763547 #>  8:   8   261 0.128571429 #>  9:   9   214 0.105418719 #> 10:  10    98 0.048275862 #> 11:  11    14 0.006896552 #>  #> $wtd #>     age count        prop    est #>  1:   1    90 0.048069348  48998 #>  2:   2   182 0.090921488  92678 #>  3:   3    24 0.012522086  12764 #>  4:   4   114 0.064091810  65330 #>  5:   5   451 0.215398712 219560 #>  6:   6   347 0.181303400 184806 #>  7:   7   235 0.114738369 116955 #>  8:   8   261 0.116686729 118941 #>  9:   9   214 0.100840856 102789 #> 10:  10    98 0.046158268  47050 #> 11:  11    14 0.009268933   9448 #>  #> $weight_name #> [1] \"person_weight\" #>                   DT = hts_prep_data(summarize_var = 'race',                    summarize_by = 'employment',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person race broken down by person employment hts_summary_cat(prepped_dt = DT,                 summarize_var = 'race',                 summarize_by = 'employment',                 wtname = 'person_weight',                 summarize_vartype = 'checkbox') #> $unwtd #>     employment                                      race count        prop #>  1:          1                 African American or Black    22 0.024070022 #>  2:          1          American Indian or Alaska Native    11 0.012035011 #>  3:          1                                     Asian   186 0.203501094 #>  4:          1 Native Hawaiian or other Pacific Islander    11 0.012035011 #>  5:          1                                     White   575 0.629102845 #>  6:          1                                Other race    17 0.018599562 #>  7:          1                      Prefer not to answer    92 0.100656455 #>  8:          2                 African American or Black     6 0.047244094 #>  9:          2                                     Asian    20 0.157480315 #> 10:          2 Native Hawaiian or other Pacific Islander     4 0.031496063 #> 11:          2                                     White    82 0.645669291 #> 12:          2                      Prefer not to answer    15 0.118110236 #> 13:          3                 African American or Black     1 0.008547009 #> 14:          3          American Indian or Alaska Native     4 0.034188034 #> 15:          3                                     Asian    16 0.136752137 #> 16:          3 Native Hawaiian or other Pacific Islander     1 0.008547009 #> 17:          3                                     White    80 0.683760684 #> 18:          3                                Other race     3 0.025641026 #> 19:          3                      Prefer not to answer    12 0.102564103 #> 20:          5                 African American or Black    13 0.027600849 #> 21:          5          American Indian or Alaska Native    10 0.021231423 #> 22:          5                                     Asian    55 0.116772824 #> 23:          5 Native Hawaiian or other Pacific Islander     5 0.010615711 #> 24:          5                                     White   326 0.692144374 #> 25:          5                                Other race     4 0.008492569 #> 26:          5                      Prefer not to answer    58 0.123142251 #> 27:          6                 African American or Black     8 0.097560976 #> 28:          6          American Indian or Alaska Native     1 0.012195122 #> 29:          6                                     Asian    11 0.134146341 #> 30:          6 Native Hawaiian or other Pacific Islander     1 0.012195122 #> 31:          6                                     White    49 0.597560976 #> 32:          6                                Other race     1 0.012195122 #> 33:          6                      Prefer not to answer    11 0.134146341 #> 34:          7                 African American or Black     2 0.100000000 #> 35:          7          American Indian or Alaska Native     2 0.100000000 #> 36:          7                                     Asian     3 0.150000000 #> 37:          7                                     White    10 0.500000000 #> 38:          7                                Other race     1 0.050000000 #> 39:          7                      Prefer not to answer     2 0.100000000 #> 40:          8                 African American or Black     1 0.055555556 #> 41:          8          American Indian or Alaska Native     1 0.055555556 #> 42:          8                                     Asian     4 0.222222222 #> 43:          8                                     White    11 0.611111111 #> 44:          8                      Prefer not to answer     1 0.055555556 #>     employment                                      race count        prop #>  #> $wtd #>     employment                                      race count        prop #>  1:          1                 African American or Black    22 0.021638708 #>  2:          1          American Indian or Alaska Native    11 0.013179012 #>  3:          1                                     Asian   186 0.203922848 #>  4:          1 Native Hawaiian or other Pacific Islander    11 0.012823843 #>  5:          1                                     White   575 0.636004431 #>  6:          1                                Other race    17 0.020433351 #>  7:          1                      Prefer not to answer    92 0.091997807 #>  8:          2                 African American or Black     6 0.041024015 #>  9:          2                                     Asian    20 0.172465721 #> 10:          2 Native Hawaiian or other Pacific Islander     4 0.035903939 #> 11:          2                                     White    82 0.642799398 #> 12:          2                      Prefer not to answer    15 0.107806927 #> 13:          3                 African American or Black     1 0.007079765 #> 14:          3          American Indian or Alaska Native     4 0.025402872 #> 15:          3                                     Asian    16 0.135779786 #> 16:          3 Native Hawaiian or other Pacific Islander     1 0.011968175 #> 17:          3                                     White    80 0.664081990 #> 18:          3                                Other race     3 0.025065741 #> 19:          3                      Prefer not to answer    12 0.130621671 #> 20:          5                 African American or Black    13 0.024707040 #> 21:          5          American Indian or Alaska Native    10 0.023532166 #> 22:          5                                     Asian    55 0.120088614 #> 23:          5 Native Hawaiian or other Pacific Islander     5 0.017011831 #> 24:          5                                     White   326 0.673532383 #> 25:          5                                Other race     4 0.009823856 #> 26:          5                      Prefer not to answer    58 0.131304110 #> 27:          6                 African American or Black     8 0.087900372 #> 28:          6          American Indian or Alaska Native     1 0.018215225 #> 29:          6                                     Asian    11 0.111809273 #> 30:          6 Native Hawaiian or other Pacific Islander     1 0.019054532 #> 31:          6                                     White    49 0.618886671 #> 32:          6                                Other race     1 0.006238091 #> 33:          6                      Prefer not to answer    11 0.137895835 #> 34:          7                 African American or Black     2 0.050441655 #> 35:          7          American Indian or Alaska Native     2 0.095536960 #> 36:          7                                     Asian     3 0.183054393 #> 37:          7                                     White    10 0.523128777 #> 38:          7                                Other race     1 0.001743375 #> 39:          7                      Prefer not to answer     2 0.146094840 #> 40:          8                 African American or Black     1 0.105333038 #> 41:          8          American Indian or Alaska Native     1 0.093383492 #> 42:          8                                     Asian     4 0.215866342 #> 43:          8                                     White    11 0.572914362 #> 44:          8                      Prefer not to answer     1 0.012502766 #>     employment                                      race count        prop #>        est #>  1:   9748 #>  2:   5937 #>  3:  91865 #>  4:   5777 #>  5: 286513 #>  6:   9205 #>  7:  41444 #>  8:   2588 #>  9:  10880 #> 10:   2265 #> 11:  40551 #> 12:   6801 #> 13:    420 #> 14:   1507 #> 15:   8055 #> 16:    710 #> 17:  39396 #> 18:   1487 #> 19:   7749 #> 20:   5699 #> 21:   5428 #> 22:  27700 #> 23:   3924 #> 24: 155359 #> 25:   2266 #> 26:  30287 #> 27:   3875 #> 28:    803 #> 29:   4929 #> 30:    840 #> 31:  27283 #> 32:    275 #> 33:   6079 #> 34:    434 #> 35:    822 #> 36:   1575 #> 37:   4501 #> 38:     15 #> 39:   1257 #> 40:    952 #> 41:    844 #> 42:   1951 #> 43:   5178 #> 44:    113 #>        est #>  #> $weight_name #> [1] \"person_weight\" #>                   DT = hts_prep_data(summarize_var = 'employment',                 summarize_by = c('race', 'income_detailed', 'gender'),                 variables_dt = variable_list,                 data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle))$cat #> Creating a summary of person employment broken down by person race and hh income_detailed and person gender  hts_summary_cat(prepped_dt = DT,                 summarize_var = 'employment',                 summarize_by = c('race', 'income_detailed', 'gender'),                 wtname = 'person_weight')$unwtd #>                           race income_detailed gender employment count #>   1: African American or Black               1      1          5     2 #>   2: African American or Black               2      1          1     1 #>   3: African American or Black               2      1          5     2 #>   4: African American or Black               2      1          6     2 #>   5: African American or Black               2      1          7     1 #>  ---                                                                   #> 392:      Prefer not to answer             999    999          2     2 #> 393:      Prefer not to answer             999    999          3     1 #> 394:      Prefer not to answer             999    999          5    19 #> 395:      Prefer not to answer             999    999          6     1 #> 396:      Prefer not to answer             999    999          7     1 #>            prop #>   1: 1.00000000 #>   2: 0.16666667 #>   3: 0.33333333 #>   4: 0.33333333 #>   5: 0.16666667 #>  ---            #> 392: 0.05405405 #> 393: 0.02702703 #> 394: 0.51351351 #> 395: 0.02702703 #> 396: 0.02702703"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a numeric variable — hts_summary_num","title":"Summarize a numeric variable — hts_summary_num","text":"Summarize numeric variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a numeric variable — hts_summary_num","text":"","code":"hts_summary_num(   prepped_dt,   summarize_var = NULL,   summarize_by = NULL,   weighted = TRUE,   se = FALSE,   wtname = NULL,   strataname = NULL )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a numeric variable — hts_summary_num","text":"prepped_dt prepared dataset data.table format variable summarize, variable summarize , weights, used. summarize_var Name variable summarize. Default NULL. summarize_by Name variable summarize summarize_var . Default NULL. weighted Whether data weighted. Default TRUE. se Whether calculate standard error. Default FALSE. set FALSE weighted FALSE. wtname Name weight column use. Default NULL. Must specified weighted = TRUE. strataname Name strata name bring . Default NULL.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a numeric variable — hts_summary_num","text":"List unweighted weighted numeric summaries including count, min, max, mean, se, median.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a numeric variable — hts_summary_num","text":"","code":"require(data.table) require(stringr) require(dplyr) require(srvyr) DT = hts_prep_data(summarize_var = 'speed_mph',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$num #> Creating a summary of trip speed_mph  hts_summary_num(prepped_dt = DT,                 summarize_var = 'speed_mph',                 wtname = 'trip_weight') #> $unwtd #>    count min      max     mean   median #> 1: 16283   0 123.3683 12.71216 9.213738 #>  #> $wtd #>    count min      max     mean   median #> 1: 16283   0 123.3683 12.77496 9.335348 #>  #> $weight_name #> [1] \"trip_weight\" #>  DT = hts_prep_data(summarize_var = 'speed_mph',                    summarize_by = 'age',                     variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$num #> Creating a summary of trip speed_mph broken down by person age hts_summary_num(prepped_dt = DT,                 summarize_var = 'speed_mph',                 summarize_by = 'age',                 wtname = 'trip_weight') #> $unwtd #>     age count         min       max      mean    median #>  1:   1   431 0.114271649 119.93525 12.881785 10.088685 #>  2:   2   855 0.000000000  99.06068 12.598717  9.111278 #>  3:   3    71 0.339308169  98.43097 13.007454  8.185791 #>  4:   4  1042 0.000000000 121.10244 13.917912 10.286320 #>  5:   5  4814 0.000000000 119.93525 11.756395  7.844880 #>  6:   6  3556 0.008117147 123.36831 12.788130  9.499362 #>  7:   7  1811 0.000000000 106.72662 13.441124 10.112949 #>  8:   8  1923 0.015928992 120.84837 13.803242 10.340619 #>  9:   9  1241 0.000000000 118.12607 12.298467  9.393039 #> 10:  10   511 0.024460902 122.43479 13.380015 12.028255 #> 11:  11    28 0.000000000  33.39149  6.683246  1.347399 #>  #> $wtd #>     age count         min       max      mean     median #>  1:   1   431 0.114271649 119.93525 13.472854 10.5119474 #>  2:   2   855 0.000000000  99.06068 13.063057  9.1689195 #>  3:   3    71 0.339308169  98.43097 14.671470  8.1857913 #>  4:   4  1042 0.000000000 121.10244 13.992131 10.3692066 #>  5:   5  4814 0.000000000 119.93525 11.800110  7.9223551 #>  6:   6  3556 0.008117147 123.36831 12.863970  9.6812125 #>  7:   7  1811 0.000000000 106.72662 13.225017 10.1207500 #>  8:   8  1923 0.015928992 120.84837 13.844358 10.3730573 #>  9:   9  1241 0.000000000 118.12607 12.211063  9.4153208 #> 10:  10   511 0.024460902 122.43479 13.446605 11.9591687 #> 11:  11    28 0.000000000  33.39149  7.170318  0.9284994 #>  #> $weight_name #> [1] \"trip_weight\" #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform travel survey data.table to a survey object — hts_to_so","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"Transform travel survey data.table survey object","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"","code":"hts_to_so(prepped_dt, weighted = TRUE, wtname = NULL, strataname = NULL)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"prepped_dt Dataframe data.table format transform survey object. weighted true creates weighted survey object. Default TRUE. wtname Name weight column dataframe. Defaults NULL, must exist weighted true. strataname Name strata name bring . Default NULL.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"Inputted dataframe transformed survey object.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"","code":"require(data.table) hts_to_so(prepped_dt = trip, wtname = 'trip_weight') #> Independent Sampling design (with replacement) #> Called via srvyr #> Sampling variables: #>  - ids: `1` #>  - weights: weight #> Data variables: hh_id (int), person_id (dbl), day_id (dbl), travel_date (date), #>   trip_id (dbl), speed_mph (dbl), mode_type (int), d_purpose_category (int), #>   weight (int)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":null,"dir":"Reference","previous_headings":"","what":"Add vehicle_id to trip table — hts_trip_vehid","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"Add vehicle_id trip table","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"","code":"hts_trip_vehid(   trip_table,   vehicle_table,   vehicle_mode_type = \"Vehicle\",   values_dt = value_labels,   ... )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"trip_table Dataset trips data.table format. vehicle_table Dataset vehicles data.table format. vehicle_mode_type Mode type label vehicle. Default 'Vehicle'. values_dt Dataset value labels data.table format. ... Additional arguments passed link{factorize_column}","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"Trip table vehicle_id attached.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"","code":"require(data.table) trip_ex = data.table(       hh_id = sample(1:10, size = 30, replace = TRUE),       trip_id = 1:30,       mode_type = sample(1:2, size = 30, replace = TRUE),       mode_1 = sample(1, size = 30, replace = TRUE)) vehicle_ex = data.table(       hh_id = sample(1:10, size = 30, replace = TRUE),       vehicle_id = 1:30) values_ex = data.table(       variable = c(rep('mode_type', 2), ('mode_1')),       value = c(1,2,1),       value_label = c('Vehicle', 'Walk', 'Car')       ) hts_trip_vehid(trip_table = trip_ex,                vehicle_table = vehicle_ex,                vehicle_mode_type = 'Vehicle',                values_dt = values_ex) #>     hh_id trip_id mode_type mode_1 vehicle_id #>  1:     3       1         2      1       <NA> #>  2:     4       2         1      1       <NA> #>  3:     3       3         1      1       <NA> #>  4:     3       4         1      1       <NA> #>  5:     9       5         1      1       <NA> #>  6:     5       6         1      1       <NA> #>  7:    10       7         2      1       <NA> #>  8:     8       8         1      1       <NA> #>  9:    10       9         2      1       <NA> #> 10:     1      10         2      1       <NA> #> 11:    10      11         1      1       <NA> #> 12:     8      12         1      1       <NA> #> 13:     1      13         2      1       <NA> #> 14:     2      14         1      1       <NA> #> 15:     1      15         1      1       <NA> #> 16:     3      16         1      1       <NA> #> 17:     4      17         2      1       <NA> #> 18:     5      18         2      1       <NA> #> 19:     7      19         2      1       <NA> #> 20:     3      20         2      1       <NA> #> 21:     2      21         2      1       <NA> #> 22:     7      22         2      1       <NA> #> 23:     6      23         1      1       <NA> #> 24:     4      24         2      1       <NA> #> 25:     8      25         1      1       <NA> #> 26:    10      26         1      1       <NA> #> 27:     6      27         1      1       <NA> #> 28:     4      28         1      1       <NA> #> 29:     9      29         2      1       <NA> #> 30:     7      30         2      1       <NA> #>     hh_id trip_id mode_type mode_1 vehicle_id"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Join spatial data to points — join_spatial","title":"Join spatial data to points — join_spatial","text":"Performs spatial join obtain geographic fields specified lon/lat columns.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join spatial data to points — join_spatial","text":"","code":"join_spatial(   x,   y,   id_col,   lon_col,   lat_col,   crs_lonlat = 4326,   crs_equal_area = 5070,   largest = FALSE )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join spatial data to points — join_spatial","text":"x data.table survey data y sf object geometry interest id_col character. column x unique identifier lon_col character. column x longitude lat_col character.  column x latitude crs_lonlat numeric.  EPSG code lonlat data (defaults WGS84) crs_equal_area numeric.  EPSG code equal area projection. Many spatial operations assume projected data (lon/lat).  Defaults US Albers Equal Area largest logical.  TRUE, return x features fields y largest overlap features x; see st_join. useful join returning one value y x.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join spatial data to points — join_spatial","text":"data.table returned columns x plus columns y.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Join spatial data to points — join_spatial","text":"Matt Landis","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join spatial data to points — join_spatial","text":"","code":"if (FALSE) { x = data.table(id = 1:3, lon=c(-82.33, -79.17, -76.17), lat = c(35.50, 36.27, 36.49)) nc = st_read(system.file('shape/nc.shp', package='sf'))[, c('FIPS', 'NAME', 'geometry')] z = join_spatial(x, nc, id_col='id', lon_col = 'lon', lat_col = 'lat') z}"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":null,"dir":"Reference","previous_headings":"","what":"Test person dataset — person","title":"Test person dataset — person","text":"dataset containing person level attributes almost 2,000 persons 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test person dataset — person","text":"","code":"person"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":"person","dir":"Reference","previous_headings":"","what":"person","title":"Test person dataset — person","text":"data frame 1,999 rows 19 columns: hh_id 8 digit household ID person_id 10 digit person ID ethnicity_1 Hispnic, Latino, Spanish origin, response codes ethnicity_2 Mexican, Mexican American, Chicano, response codes ethnicity_3 Puerto Rican, response codes ethnicity_4 Cuban, response codes ethnicity_997 Another Hispanic, Latino, Spanish origin, response codes ethnicity_999 Prefer answer, response codes race_1 African American Black, response codes race_2 Americian Indian Alaska Native, response codes race_3 Asian, response codes race_4 Native Hawaiian Pacific Islander, response codes race_5 White, response codes race_997 race, response codes race_999 Prefer answer, response codes age Age, response codes gender Gender, response codes employment Employment status, response codes education Highest level education completed, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test person dataset — person","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Test household travel survey dataset — test_data","title":"Test household travel survey dataset — test_data","text":"Test household travel survey dataset","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test household travel survey dataset — test_data","text":"","code":"test_data"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":"test-data","dir":"Reference","previous_headings":"","what":"test_data","title":"Test household travel survey dataset — test_data","text":"list containing following datasets:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test household travel survey dataset — test_data","text":"list export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":null,"dir":"Reference","previous_headings":"","what":"Test trip dataset — trip","title":"Test trip dataset — trip","text":"dataset containing attributes 20,000 trips 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test trip dataset — trip","text":"","code":"trip"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":"trip","dir":"Reference","previous_headings":"","what":"trip","title":"Test trip dataset — trip","text":"data frame 21,378 rows 7 columns: hh_id 8 digit household ID person_id 10 digit person ID day_id 12 digit day ID trip_id 13 digit trip ID travel_date Date trip mode_type Type transportation used trip, response codes d_purpose_category Purpose taking trip destination, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test trip dataset — trip","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/value_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"List of values and their labels — value_labels","title":"List of values and their labels — value_labels","text":"dataset containing values variables found variable_list variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/value_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of values and their labels — value_labels","text":"","code":"value_labels"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/value_labels.html","id":"value-labels","dir":"Reference","previous_headings":"","what":"value_labels","title":"List of values and their labels — value_labels","text":"data frame 210 rows 3 columns: variable Name variable value numeric value variable label numeric value variable represents","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/variable_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List of variables — variable_list","title":"List of variables — variable_list","text":"dataset containing information variables existing hh, person, day, trip, vehicle tables. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/variable_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of variables — variable_list","text":"","code":"variable_list"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/variable_list.html","id":"variable-list","dir":"Reference","previous_headings":"","what":"variable_list","title":"List of variables — variable_list","text":"data frame 41 rows 13 columns: order order variables presented source variable created variable Name variable is_checkbox variable 'Select Apply' question hh variable exists hh table person variable exists person table day variable exists day table trip variable exists trip table vehicle variable exists vehicle table data_type Data type variable description description variable logic Conditions variable value","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":null,"dir":"Reference","previous_headings":"","what":"Test vehicle dataset — vehicle","title":"Test vehicle dataset — vehicle","text":"dataset containing attributes 6,500 vehicles 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test vehicle dataset — vehicle","text":"","code":"vehicle"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":"vehicle","dir":"Reference","previous_headings":"","what":"vehicle","title":"Test vehicle dataset — vehicle","text":"data frame 1,366 rows 3 columns: hh_id 8 digit household ID vehicle_id 10 digit vehicle ID fuel_type Type fuel taken vehicle, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test vehicle dataset — vehicle","text":"Export tables compiled internal RSG database 11/22/2023","code":""}]
