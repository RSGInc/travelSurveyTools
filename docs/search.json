[{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"about-travelsurveytools","dir":"Articles","previous_headings":"","what":"About TravelSurveyTools","title":"Getting Started","text":"travelSurveyTools package provides tools R users aid use data household travel surveys. possible uses include creating custom cross tabs, labeling data, calculating trip rates.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"data-assumptions","dir":"Articles","previous_headings":"","what":"Data Assumptions","title":"Getting Started","text":"travelSurveyTools assumes data structure shown . reflect structure data","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"hts_data","dir":"Articles","previous_headings":"Data Assumptions","what":"hts_data","title":"Getting Started","text":"hts_data list five core tables:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"hh","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"hh","title":"Getting Started","text":"Household dataset hh_id: 8 digit household ID survey variables asked household level hh_weight: household weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"person","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"person","title":"Getting Started","text":"Person dataset hh_id: 8 digit household ID person_id: 10 digit person ID survey variables asked person level person_weight: person weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"day","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"day","title":"Getting Started","text":"Day dataset hh_id: 8 digit household ID person_id: 10 digit person ID day_id: 12 digit day ID survey variable asked day level day_weight: day weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"trip","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"trip","title":"Getting Started","text":"Trip dataset hh_id: 8 digit household ID person_id: 10 digit person ID day_id: 12 digit day ID trip_id: 13 digit trip ID survey variables asked trip level trip_weight: trip weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"vehicle","dir":"Articles","previous_headings":"Data Assumptions > hts_data","what":"vehicle","title":"Getting Started","text":"Vehicle dataset hh_id: 8 digit household ID vehicle_id: 10 digit vehicle ID survey responses asked vehicle level hh_weight: household weight","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"codebook","dir":"Articles","previous_headings":"Data Assumptions","what":"Codebook","title":"Getting Started","text":"addition data household travel survey. codebook also required. codebook assumed two parts:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"variable_list","dir":"Articles","previous_headings":"Data Assumptions > Codebook","what":"variable_list","title":"Getting Started","text":"dataset containing information variables existing hh, person, day, trip, vehicle tables. variables follows: variable: Name variable is_checkbox: variable ‘Select Apply’ question hh: variable exists hh table person: variable exists person table day: variable exists day table trip: variable exists trip table vehicle: variable exists vehicle table location: variable exists location table data_type: Data type variable description: description variable logic: Conditions variable value shared_name: shared name checkbox variable variable name non-checkbox variables","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"value_labels","dir":"Articles","previous_headings":"Data Assumptions > Codebook","what":"value_labels","title":"Getting Started","text":"dataset containing values variables found variable_list variables follows: variable: Name variable value: numeric value variable label: numeric value variable represents label_value: value concatenated label (e.g., 11 85 older) val_order: order variable label appear ","code":""},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"prepping-the-data","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Prepping the Data","title":"Getting Started","text":"order create summaries data first need prepare data. can using hts_prep_data. return categorical (cat) numeric (num) (applicable) prepped data table can used create summaries. Numeric variables automatically binned hts_prep_data create categorical summaries. can make categorical summary numeric variable using hts_summary. Additionally, numeric variables can create numeric summaries.","code":"library(travelSurveyTools) library(data.table) library(srvyr)  # Load data data(\"test_data\") data(\"variable_list\")  DT = hts_prep_data(summarize_var = 'speed_mph',                    variables_dt = variable_list,                    data = test_data) speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = FALSE)  speed_cat_summary$summary ## $unwtd ##     speed_mph count        prop ## 1:  1 or less   575 0.038244097 ## 2:        1-9  6537 0.434785500 ## 3:       9-17  3661 0.243498503 ## 4:      17-25  2249 0.149584303 ## 5:      25-33  1012 0.067309611 ## 6:      33-41   533 0.035450615 ## 7:      41-43    76 0.005054872 ## 8: 43 or more   392 0.026072498 speed_num_summary = hts_summary(prepped_dt = DT$num,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'numeric',                                 weighted = FALSE)  speed_num_summary$summary ## $unwtd ##    count min      max     mean   median ## 1: 15035   0 109.2184 12.89507 9.728796"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"using-weighted-data","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Using Weighted Data","title":"Getting Started","text":"Additionally, can use weighted data setting weighted = TRUE specifying name weight used (wtname).","code":"speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = TRUE,                                 wtname = 'trip_weight')  speed_cat_summary$summary ## $unwtd ##     speed_mph count        prop ## 1:  1 or less   575 0.038244097 ## 2:        1-9  6537 0.434785500 ## 3:       9-17  3661 0.243498503 ## 4:      17-25  2249 0.149584303 ## 5:      25-33  1012 0.067309611 ## 6:      33-41   533 0.035450615 ## 7:      41-43    76 0.005054872 ## 8: 43 or more   392 0.026072498 ##  ## $wtd ##     speed_mph count        prop     est ## 1:  1 or less   575 0.038596067  291500 ## 2:        1-9  6537 0.433679180 3275398 ## 3:       9-17  3661 0.243523176 1839229 ## 4:      17-25  2249 0.151377218 1143289 ## 5:      25-33  1012 0.067742784  511633 ## 6:      33-41   533 0.034100916  257550 ## 7:      41-43    76 0.005215169   39388 ## 8: 43 or more   392 0.025765490  194596 ##  ## $weight_name ## [1] \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"calculating-standard-errors","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Calculating Standard Errors","title":"Getting Started","text":"Additionally, specifying se = TRUE can calculate standard errors.","code":"speed_cat_summary = hts_summary(prepped_dt = DT$cat,                                  summarize_var = 'speed_mph',                                 summarize_by = NULL,                                 summarize_vartype = 'categorical',                                 weighted = TRUE,                                 wtname = 'trip_weight',                                 se = TRUE)  speed_cat_summary$summary ## $unwtd ##     speed_mph count        prop ## 1:  1 or less   575 0.038244097 ## 2:        1-9  6537 0.434785500 ## 3:       9-17  3661 0.243498503 ## 4:      17-25  2249 0.149584303 ## 5:      25-33  1012 0.067309611 ## 6:      33-41   533 0.035450615 ## 7:      41-43    76 0.005054872 ## 8: 43 or more   392 0.026072498 ##  ## $wtd ##     speed_mph count        prop      prop_se     est    est_se ## 1:  1 or less   575 0.038596067 0.0018091628  291500 13731.043 ## 2:        1-9  6537 0.433679180 0.0046545746 3275398 38298.012 ## 3:       9-17  3661 0.243523176 0.0040290132 1839229 31595.081 ## 4:      17-25  2249 0.151377218 0.0033752879 1143289 26070.445 ## 5:      25-33  1012 0.067742784 0.0023796356  511633 18152.124 ## 6:      33-41   533 0.034100916 0.0016840894  257550 12764.269 ## 7:      41-43    76 0.005215169 0.0006874633   39388  5196.226 ## 8: 43 or more   392 0.025765490 0.0014748922  194596 11170.619 ##  ## $weight_name ## [1] \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"summarizing-two-variables","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Summarizing Two Variables","title":"Getting Started","text":"want summarize variable another variable (e.g., mode type person’s race, mode_type person’s ethnicity) can use summarize_by argument. summarize_by can used unlimited amount variables. use one summarize_by variable pass list argument.","code":"DT = hts_prep_data(summarize_var = 'mode_type',                    summarize_by = 'race',                    variables_dt = variable_list,                    data = test_data)  mode_by_race_summary = hts_summary(prepped_dt = DT$cat,                                     summarize_var = 'mode_type',                                    summarize_by = 'race',                                    summarize_vartype = 'categorical',                                    weighted = TRUE,                                    wtname = 'trip_weight',                                    se = TRUE)   mode_by_race_summary$summary ## $unwtd ##                                          race mode_type count         prop ##  1:                 African American or Black         1   146 0.3435294118 ##  2:                 African American or Black         3     6 0.0141176471 ##  3:                 African American or Black         4     2 0.0047058824 ##  4:                 African American or Black         6     9 0.0211764706 ##  5:                 African American or Black         7     7 0.0164705882 ##  6:                 African American or Black         8   198 0.4658823529 ##  7:                 African American or Black        10     1 0.0023529412 ##  8:                 African American or Black        13    56 0.1317647059 ##  9:          American Indian or Alaska Native         1    15 0.1724137931 ## 10:          American Indian or Alaska Native         2     6 0.0689655172 ## 11:          American Indian or Alaska Native         3     1 0.0114942529 ## 12:          American Indian or Alaska Native         4     3 0.0344827586 ## 13:          American Indian or Alaska Native         5     1 0.0114942529 ## 14:          American Indian or Alaska Native         6     1 0.0114942529 ## 15:          American Indian or Alaska Native         8    58 0.6666666667 ## 16:          American Indian or Alaska Native        13     2 0.0229885057 ## 17:                                     Asian         1   738 0.2777568686 ## 18:                                     Asian         2    52 0.0195709447 ## 19:                                     Asian         3     4 0.0015054573 ## 20:                                     Asian         5     2 0.0007527286 ## 21:                                     Asian         6    17 0.0063981935 ## 22:                                     Asian         7     8 0.0030109146 ## 23:                                     Asian         8  1621 0.6100865638 ## 24:                                     Asian        11    36 0.0135491155 ## 25:                                     Asian        12     2 0.0007527286 ## 26:                                     Asian        13   170 0.0639819345 ## 27:                                     Asian        14     7 0.0026345502 ## 28: Native Hawaiian or other Pacific Islander         1     4 0.1538461538 ## 29: Native Hawaiian or other Pacific Islander         7     1 0.0384615385 ## 30: Native Hawaiian or other Pacific Islander         8    21 0.8076923077 ## 31:                                     White         1  2355 0.2651728409 ## 32:                                     White         2   238 0.0267987839 ## 33:                                     White         3     6 0.0006755996 ## 34:                                     White         4    12 0.0013511992 ## 35:                                     White         5     1 0.0001125999 ## 36:                                     White         6    31 0.0034905979 ## 37:                                     White         7    49 0.0055173967 ## 38:                                     White         8  5781 0.6509402094 ## 39:                                     White        11    29 0.0032653980 ## 40:                                     White        12     6 0.0006755996 ## 41:                                     White        13   351 0.0395225763 ## 42:                                     White        14    22 0.0024771985 ## 43:                               Two or more         1   298 0.3333333333 ## 44:                               Two or more         2    31 0.0346756152 ## 45:                               Two or more         4     6 0.0067114094 ## 46:                               Two or more         6    10 0.0111856823 ## 47:                               Two or more         7     3 0.0033557047 ## 48:                               Two or more         8   486 0.5436241611 ## 49:                               Two or more        11     2 0.0022371365 ## 50:                               Two or more        13    57 0.0637583893 ## 51:                               Two or more        14     1 0.0011185682 ## 52:                                Other race         1    68 0.2289562290 ## 53:                                Other race         2     2 0.0067340067 ## 54:                                Other race         3     1 0.0033670034 ## 55:                                Other race         5     1 0.0033670034 ## 56:                                Other race         6     2 0.0067340067 ## 57:                                Other race         7     2 0.0067340067 ## 58:                                Other race         8   207 0.6969696970 ## 59:                                Other race        10     1 0.0033670034 ## 60:                                Other race        11     3 0.0101010101 ## 61:                                Other race        13     9 0.0303030303 ## 62:                                Other race        14     1 0.0033670034 ## 63:                      Prefer not to answer         1   335 0.3199617956 ## 64:                      Prefer not to answer         2    30 0.0286532951 ## 65:                      Prefer not to answer         4     1 0.0009551098 ## 66:                      Prefer not to answer         6     7 0.0066857689 ## 67:                      Prefer not to answer         7     6 0.0057306590 ## 68:                      Prefer not to answer         8   602 0.5749761223 ## 69:                      Prefer not to answer        11    10 0.0095510984 ## 70:                      Prefer not to answer        12     2 0.0019102197 ## 71:                      Prefer not to answer        13    51 0.0487106017 ## 72:                      Prefer not to answer        14     3 0.0028653295 ##                                          race mode_type count         prop ##  ## $wtd ##                                          race mode_type count         prop ##  1:                 African American or Black         1   146 0.3206082080 ##  2:                 African American or Black         3     6 0.0107459127 ##  3:                 African American or Black         4     2 0.0041393818 ##  4:                 African American or Black         6     9 0.0137559316 ##  5:                 African American or Black         7     7 0.0145217657 ##  6:                 African American or Black         8   198 0.4948063845 ##  7:                 African American or Black        10     1 0.0037370765 ##  8:                 African American or Black        13    56 0.1376853391 ##  9:          American Indian or Alaska Native         1    15 0.1974696041 ## 10:          American Indian or Alaska Native         2     6 0.0400602723 ## 11:          American Indian or Alaska Native         3     1 0.0202899304 ## 12:          American Indian or Alaska Native         4     3 0.0235633378 ## 13:          American Indian or Alaska Native         5     1 0.0024680453 ## 14:          American Indian or Alaska Native         6     1 0.0193806505 ## 15:          American Indian or Alaska Native         8    58 0.6717759534 ## 16:          American Indian or Alaska Native        13     2 0.0249922062 ## 17:                                     Asian         1   738 0.2789376086 ## 18:                                     Asian         2    52 0.0189774065 ## 19:                                     Asian         3     4 0.0014666344 ## 20:                                     Asian         5     2 0.0007958073 ## 21:                                     Asian         6    17 0.0067669971 ## 22:                                     Asian         7     8 0.0022180211 ## 23:                                     Asian         8  1621 0.6087210541 ## 24:                                     Asian        11    36 0.0120379970 ## 25:                                     Asian        12     2 0.0003847280 ## 26:                                     Asian        13   170 0.0672235059 ## 27:                                     Asian        14     7 0.0024702400 ## 28: Native Hawaiian or other Pacific Islander         1     4 0.1349855482 ## 29: Native Hawaiian or other Pacific Islander         7     1 0.0455691532 ## 30: Native Hawaiian or other Pacific Islander         8    21 0.8194452986 ## 31:                                     White         1  2355 0.2655078324 ## 32:                                     White         2   238 0.0251267505 ## 33:                                     White         3     6 0.0010892466 ## 34:                                     White         4    12 0.0013090206 ## 35:                                     White         5     1 0.0001260008 ## 36:                                     White         6    31 0.0037900948 ## 37:                                     White         7    49 0.0057758941 ## 38:                                     White         8  5781 0.6496135155 ## 39:                                     White        11    29 0.0034543911 ## 40:                                     White        12     6 0.0007924845 ## 41:                                     White        13   351 0.0410129210 ## 42:                                     White        14    22 0.0024018481 ## 43:                               Two or more         1   298 0.3263455892 ## 44:                               Two or more         2    31 0.0334006119 ## 45:                               Two or more         4     6 0.0064789456 ## 46:                               Two or more         6    10 0.0098414086 ## 47:                               Two or more         7     3 0.0014165830 ## 48:                               Two or more         8   486 0.5492301036 ## 49:                               Two or more        11     2 0.0014363493 ## 50:                               Two or more        13    57 0.0710927016 ## 51:                               Two or more        14     1 0.0007577072 ## 52:                                Other race         1    68 0.2326643663 ## 53:                                Other race         2     2 0.0102063750 ## 54:                                Other race         3     1 0.0053014979 ## 55:                                Other race         5     1 0.0034902630 ## 56:                                Other race         6     2 0.0090561747 ## 57:                                Other race         7     2 0.0080117400 ## 58:                                Other race         8   207 0.6920503973 ## 59:                                Other race        10     1 0.0020359867 ## 60:                                Other race        11     3 0.0049114875 ## 61:                                Other race        13     9 0.0275320932 ## 62:                                Other race        14     1 0.0047396185 ## 63:                      Prefer not to answer         1   335 0.3192662664 ## 64:                      Prefer not to answer         2    30 0.0335535995 ## 65:                      Prefer not to answer         4     1 0.0004117006 ## 66:                      Prefer not to answer         6     7 0.0052765665 ## 67:                      Prefer not to answer         7     6 0.0064833403 ## 68:                      Prefer not to answer         8   602 0.5734252924 ## 69:                      Prefer not to answer        11    10 0.0074823752 ## 70:                      Prefer not to answer        12     2 0.0027478183 ## 71:                      Prefer not to answer        13    51 0.0507166046 ## 72:                      Prefer not to answer        14     3 0.0006364363 ##                                          race mode_type count         prop ##          prop_se     est     est_se ##  1: 0.0259537611   66145  6376.2732 ##  2: 0.0050918410    2217  1054.2330 ##  3: 0.0039870468     854   824.5438 ##  4: 0.0053457674    2838  1106.2381 ##  5: 0.0068402244    2996  1421.5977 ##  6: 0.0282676793  102084  8315.3979 ##  7: 0.0037292003     771   771.0000 ##  8: 0.0198052743   28406  4407.6486 ##  9: 0.0509371268    7601  2185.3628 ## 10: 0.0172849923    1542   662.1635 ## 11: 0.0200446356     781   781.0000 ## 12: 0.0191960318     907   747.4494 ## 13: 0.0024823352      95    95.0000 ## 14: 0.0191641795     746   746.0000 ## 15: 0.0591889530   25858  4113.2269 ## 16: 0.0181764211     962   706.5000 ## 17: 0.0100467368  370488 15423.1820 ## 18: 0.0029809671   25206  3990.0163 ## 19: 0.0008007467    1948  1064.1053 ## 20: 0.0007018961    1057   932.6670 ## 21: 0.0018869627    8988  2514.1670 ## 22: 0.0009453916    2946  1256.4991 ## 23: 0.0109229308  808510 22137.1754 ## 24: 0.0024093640   15989  3216.3137 ## 25: 0.0003721183     511   494.2912 ## 26: 0.0056638533   89287  7760.0861 ## 27: 0.0010544753    3281  1401.8417 ## 28: 0.0749889884    2195  1316.3052 ## 29: 0.0445310760     741   741.0000 ## 30: 0.0837539211   13325  3142.8635 ## 31: 0.0053989102 1186349 26346.1038 ## 32: 0.0018861324  112272  8480.5606 ## 33: 0.0004528082    4867  2024.1720 ## 34: 0.0004198524    5849  1876.4544 ## 35: 0.0001259987     563   563.0000 ## 36: 0.0007575376   16935  3388.4358 ## 37: 0.0009320051   25808  4171.0624 ## 38: 0.0058333760 2902620 36716.7654 ## 39: 0.0007141565   15435  3193.8863 ## 40: 0.0003794695    3541  1696.0896 ## 41: 0.0024371289  183255 11016.7078 ## 42: 0.0006122842   10732  2737.7953 ## 43: 0.0180401259  148592  9927.8437 ## 44: 0.0067877296   15208  3138.8343 ## 45: 0.0029437491    2950  1344.0455 ## 46: 0.0035068104    4481  1602.8031 ## 47: 0.0009070981     645   412.8242 ## 48: 0.0191501600  250076 12814.8919 ## 49: 0.0010191795     654   464.0056 ## 50: 0.0102582575   32370  4852.8413 ## 51: 0.0007577207     345   345.0000 ## 52: 0.0282510583   35197  4870.4252 ## 53: 0.0072147507    1544  1097.7284 ## 54: 0.0052853959     802   802.0000 ## 55: 0.0034859978     528   528.0000 ## 56: 0.0063777152    1370   969.2020 ## 57: 0.0059994472    1212   911.2351 ## 58: 0.0308378894  104692  8371.7820 ## 59: 0.0020364613     308   308.0000 ## 60: 0.0040889752     743   619.5944 ## 61: 0.0107440950    4165  1646.9495 ## 62: 0.0047278937     717   717.0000 ## 63: 0.0164453303  169055 10453.6018 ## 64: 0.0066740647   17767  3597.7574 ## 65: 0.0004118019     218   218.0000 ## 66: 0.0024616726    2794  1306.4509 ## 67: 0.0028226612    3433  1499.1887 ## 68: 0.0174747900  303635 13881.5190 ## 69: 0.0028594361    3962  1518.6785 ## 70: 0.0019719853    1455  1045.7311 ## 71: 0.0079047276   26855  4294.9876 ## 72: 0.0003924639     337   207.5863 ##          prop_se     est     est_se ##  ## $weight_name ## [1] \"trip_weight\" DT = hts_prep_data(summarize_var = 'mode_type',                    summarize_by = c('race', 'ethnicity'),                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))  mode_by_race_ethnicity_summary = hts_summary(prepped_dt = DT$cat,                                               summarize_var = 'mode_type',                                              summarize_by = c('race', 'ethnicity'),                                              summarize_vartype = 'categorical',                                              weighted = TRUE,                                              wtname = 'trip_weight',                                              se = TRUE)   head(mode_by_race_ethnicity_summary$summary$wtd, 10) ##                          race                                   ethnicity ##  1: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  2: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  3: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  4: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  5: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  6: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  7: African American or Black  Not of Hispanic, Latino, or Spanish origin ##  8: African American or Black          Mexican, Mexican American, Chicano ##  9: African American or Black          Mexican, Mexican American, Chicano ## 10: African American or Black Another Hispanic, Latino, or Spanish origin ##     mode_type count        prop     prop_se   est    est_se ##  1:         1    90 0.264970857 0.028499372 39323 4832.3611 ##  2:         3     2 0.005410869 0.003897870   803  579.0884 ##  3:         4     2 0.005754523 0.005537463   854  824.5438 ##  4:         6     4 0.008362252 0.005232930  1241  778.6512 ##  5:         7     5 0.014285233 0.007603062  2120 1135.6655 ##  6:         8   179 0.618166504 0.031974249 91739 7882.9544 ##  7:        13    24 0.083049762 0.018892303 12325 2933.8872 ##  8:         3     4 0.746962493 0.203291398  1414  881.0349 ##  9:         8     2 0.253037507 0.203291398   479  419.9015 ## 10:         1     2 0.182176268 0.159601009   740  697.3863"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"calculating-trip-rates","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Calculating trip rates","title":"Getting Started","text":"hts_summary can also used calculate trip rates.","code":"DT = hts_prep_triprate(summarize_by = 'employment',                        variables_dt = variable_list,                        trip_name = 'trip',                        day_name = 'day',                        hts_data = list('hh' = hh,                                        'person' = person,                                        'day' = day,                                        'trip' = trip,                                        'vehicle' = vehicle))  trip_rate_by_employment_summary = hts_summary(prepped_dt = DT$num,                                                summarize_var = 'num_trips_wtd',                                               summarize_by = 'employment',                                               summarize_vartype = 'numeric',                                               weighted = TRUE,                                               wtname = 'day_weight',                                               se = TRUE)  head(trip_rate_by_employment_summary$summary$wtd, 10) ##    employment count min      max     mean   mean_se   median ## 1:          1  2012   0 59.17021 3.817292 0.0871695 2.478363 ## 2:          2   307   0 54.24561 3.795345 0.2380826 2.414773 ## 3:          3   189   0 54.81752 4.128966 0.2921698 3.361946 ## 4:          5   899   0 57.84615 3.629484 0.1354622 2.154110 ## 5:          6   181   0 48.29293 3.411580 0.2988906 1.842215 ## 6:          7    37   0 44.70815 3.686618 0.7769508 2.448465 ## 7:          8    24   0 24.23790 2.513073 0.6037672 1.613707 ## 8:        995   568   0 58.38776 2.000315 0.1028051 1.146023"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"labeling-values","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Labeling Values","title":"Getting Started","text":"label values can use factorize_column.","code":"trip_rate_by_employment_summary$summary$wtd$employment =  factorize_column(   trip_rate_by_employment_summary$summary$wtd$employment,   'employment',   value_labels,   variable_colname = 'variable',   value_colname = 'value',   value_label_colname = 'label',   value_order_colname = 'val_order' )   trip_rate_by_employment_summary$summary$wtd ##                                                                             employment ## 1:                                           Employed full-time (35+ hours/week, paid) ## 2:                                 Employed part-time (fewer than 35 hours/week, paid) ## 3:                                                                       Self-employed ## 4: Not employed and not looking for work (e.g., retired, stay-at-home parent, student) ## 5:                                                     Unemployed and looking for work ## 6:                                                          Unpaid volunteer or intern ## 7:               Employed, but not currently working (e.g., on leave, furloughed 100%) ## 8:                                                                    Missing Response ##    count min      max     mean   mean_se   median ## 1:  2012   0 59.17021 3.817292 0.0871695 2.478363 ## 2:   307   0 54.24561 3.795345 0.2380826 2.414773 ## 3:   189   0 54.81752 4.128966 0.2921698 3.361946 ## 4:   899   0 57.84615 3.629484 0.1354622 2.154110 ## 5:   181   0 48.29293 3.411580 0.2988906 1.842215 ## 6:    37   0 44.70815 3.686618 0.7769508 2.448465 ## 7:    24   0 24.23790 2.513073 0.6037672 1.613707 ## 8:   568   0 58.38776 2.000315 0.1028051 1.146023"},{"path":"https://rsginc.github.io/travelSurveyTools/articles/getting_started.html","id":"creating-visuals-using-hts_summary-output","dir":"Articles","previous_headings":"Using travelSurveyTools","what":"Creating Visuals using hts_summary output","title":"Getting Started","text":"hts_summary creates outputs can easily used create visuals.","code":"library(ggplot2)  p = ggplot(   trip_rate_by_employment_summary$summary$wtd,    aes(x = mean, y = employment)) +   geom_bar(stat = 'identity') +    geom_errorbar(     aes(xmin = (mean - mean_se),          xmax = (mean + mean_se),         width = .2)   ) +    labs(x = 'Mean Trip Rate',        y = 'Employment')  +   scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 50),                    limits = rev)      print(p)"},{"path":"https://rsginc.github.io/travelSurveyTools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Clark. Author, maintainer.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Clark J (2024). travelSurveyTools: travelSurveyTools. R package version 0.0.0.9000.","code":"@Manual{,   title = {travelSurveyTools: travelSurveyTools},   author = {James Clark},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"NA","text":"project uses feature-branch naming convention workflow. main main branch (master), base work main. Contribute project making changes feature branch issuing pull-requests ’re ready integrate main branch.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"create-a-feature-branch","dir":"","previous_headings":"Contributing","what":"Create a feature branch","title":"NA","text":"Pull main branch; git pull, necessary git checkout main switch main Create feature branch check branch, e.g., git checkout -b crosstab-performance * can use initials prefix feature branch, e.g., aa-crosstab-performance.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"your-feature-branch-should-do-one-thing-only","dir":"","previous_headings":"Contributing","what":"Your feature branch should do one thing only","title":"NA","text":"example: debug error, create new function, generate new part dashboard, integrate new dataset, fix issue - please name branch issue number","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"save-and-share-your-work","dir":"","previous_headings":"Contributing","what":"Save and share your work","title":"NA","text":"Commit changes related feature push GitHub. Push changes feature branch time. Create pull request GitHub ’re ready work reviewed. can submit PR done, want guidance work--progress. Make changes respond comments pull-request reviews. New commits pushed branch update pull-request.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/CONTRIBUTING.html","id":"keep-it-clean","dir":"","previous_headings":"Contributing","what":"Keep it clean","title":"NA","text":"pull request approved approver merge branch main may delete branch GitHub. remove deleted feature branches local copy repository run git remote prune origin. attempt push additional commits merged pull-request. Instead, start new feature branch issue new pull request. Remember update branch main whenever start new feature, e.g., git checkout main; git pull origin main; git checkout -b -new-feature.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"travel-survey-tools","dir":"","previous_headings":"","what":"Travel Survey Tools","title":"travelSurveyTools","text":"travelSurveyTools R package empowers users household travel survey (HTS) data create meaningful summaries data. Currently, travelSurveyTools compatible RSG, Inc. HTS datasets, hope expand travel survey. like collaborate, please contact Suzanne Childress schildress@psrc.org. datasets usually contain six tables: household, person, day, trip, vehicle, location. future, may expand travelSurveyTools work types travel survey data types surveys. travelSurveyTools active development open-source; anyone can contribute 🤝. See CONTRIBUTING page learn .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"cloning-instructions","dir":"","previous_headings":"Travel Survey Tools","what":"Cloning instructions","title":"travelSurveyTools","text":"Set config - usethis::use_git_config(user.name = {“username”}, user.email = {your_email@email.com}) Go github page generate token - usethis::create_github_token() Paste PAT pop-follows - credentials::set_github_pat() Lastly, remotes::install_github() work - remotes::install_github(‘RSGInc/travelSurveyTools’)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"what-can-this-package-do","dir":"","previous_headings":"Travel Survey Tools","what":"What can this package do?","title":"travelSurveyTools","text":"things package enables include: * Cross tabs unlimited number variables * Summarizes numeric, categorical, date, date-time variables * Accepts weighted unweighted data * Numeric summaries return means, medians, summaries binned data * Ability use customized datasets (e.g., filtered, binned, renamed data) * Data labeling helper functions * Returns sample sizes/unweighted counts * Standard errors calculated survey statistics * Ability specify custom weights * Trip rate calculations","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/index.html","id":"dependency-tree","dir":"","previous_headings":"Travel Survey Tools","what":"Dependency Tree","title":"travelSurveyTools","text":"","code":"├─dplyr 1.1.4 │ ├─cli 3.6.2 │ ├─generics 0.1.3 │ ├─glue 1.6.2 │ ├─lifecycle 1.0.4 │ │ ├─cli │ │ ├─glue │ │ └─rlang 1.1.2 │ ├─magrittr 2.0.3 │ ├─pillar 1.9.0 │ │ ├─cli │ │ ├─fansi 1.0.6 │ │ ├─glue │ │ ├─lifecycle │ │ ├─rlang │ │ ├─utf8 1.2.4 │ │ └─vctrs 0.6.5 │ │   ├─cli │ │   ├─glue │ │   ├─lifecycle │ │   └─rlang │ ├─R6 2.5.1 │ ├─rlang │ ├─tibble 3.2.1 │ │ ├─fansi │ │ ├─lifecycle │ │ ├─magrittr │ │ ├─pillar │ │ ├─pkgconfig 2.0.3 │ │ ├─rlang │ │ └─vctrs │ ├─tidyselect 1.2.0 │ │ ├─cli │ │ ├─glue │ │ ├─lifecycle │ │ ├─rlang │ │ ├─vctrs │ │ └─withr 2.5.2 │ └─vctrs ├─srvyr 1.2.0 │ ├─dplyr │ ├─magrittr │ ├─rlang │ ├─survey 4.2-1 │ │ ├─Matrix 1.6-1.1 -> 1.6-4 │ │ │ └─lattice 0.21-9 -> 0.22-5 │ │ ├─survival 3.5-7  │ │ │ └─Matrix │ │ ├─lattice │ │ ├─minqa 1.2.6 │ │ │ └─Rcpp 1.0.11 │ │ ├─numDeriv 2016.8-1.1 │ │ └─mitools 2.4 │ │   └─DBI 1.2.0 │ ├─tibble │ ├─tidyr 1.3.0 │ │ ├─cli │ │ ├─dplyr │ │ ├─glue │ │ ├─lifecycle │ │ ├─magrittr │ │ ├─purrr 1.0.2 │ │ │ ├─cli │ │ │ ├─lifecycle │ │ │ ├─magrittr │ │ │ ├─rlang │ │ │ └─vctrs │ │ ├─rlang │ │ ├─stringr 1.5.1 │ │ │ ├─cli │ │ │ ├─glue │ │ │ ├─lifecycle │ │ │ ├─magrittr │ │ │ ├─rlang │ │ │ ├─stringi 1.8.3 │ │ │ └─vctrs │ │ ├─tibble │ │ ├─tidyselect │ │ └─vctrs │ ├─tidyselect │ └─vctrs └─stringr"},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":null,"dir":"Reference","previous_headings":"","what":"Test day dataset — day","title":"Test day dataset — day","text":"dataset containing information participant travel days 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test day dataset — day","text":"","code":"day"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":"day","dir":"Reference","previous_headings":"","what":"day","title":"Test day dataset — day","text":"data frame 5,602 rows 13 columns: hh_id 8 digit household ID person_id 10 digit person ID day_id 12 digit day ID delivery_2 Take-/prepared food delivered home, response codes delivery_3 Someone came work home (e.g., babysitter, housecleaning, lawn), response codes delivery_4 Groceries delivered home, response codes delivery_5 Received packages home (e.g., USPS, FedEx, UPS), response codes delivery_6 Received personal packages work, response codes delivery_7 Received packages another location (e.g., Amazon Locker, package pick-point), response codes delivery_8 item delivered home (e.g., appliance), response codes delivery_996 None , response codes begin_day Location beginning day, response codes end_day Location end day, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/day.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test day dataset — day","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Factorize a column. — factorize_column","title":"Factorize a column. — factorize_column","text":"Factorize column. function typically called directly, called part factorize_df function.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factorize a column. — factorize_column","text":"","code":"factorize_column(   x,   var_str,   vals_df,   variable_colname = \"variable\",   value_colname = \"value\",   value_label_colname = \"value_label\",   value_order_colname = \"value\",   extra_labels = NULL,   add_na = TRUE )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factorize a column. — factorize_column","text":"x vector (variable) 'factorized' labeled. X often single variable column within dataframe. var_str name vector variable factorized (e.g., \"sample_segment\"). vals_df dataframe variable labels (.e., factor levels labels) format specified . variable_colname name variable column vals_df. Default 'variable'. value_colname name value column vals_df. Default 'value', value_label_colname name value label column vals_df. Default 'value_label' value_order_colname name value order column vals_df (can value column ). Default 'value'. extra_labels Pass vector names variables values dataframe use labeling. Common uses include missing values, universal values (e.g., \"Total\" \"Subtotal\" row), similar variables (e.g., \"mode_1\" reuse mode_1 labels mode_2). Default NULL. add_na TRUE FALSE setting whether add NA explicit level factor. Default setting TRUE.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factorize a column. — factorize_column","text":"'factorized' version vector passed (.e., factor). returned invisibly.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factorize a column. — factorize_column","text":"function expects values dataframe (vals_df) columns variable name, value, value label, value order (can value ) \"factorize\" functions borrowed updated 'tmr.Rite..tester' package Matt Landis.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factorize a column. — factorize_column","text":"","code":"factored = factorize_column(   x = hh$income_detailed,   var_str = \"income_detailed\",   vals_df = value_labels,   extra_labels = \"Missing\",   value_label_colname = 'label' )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Factorize a dataframe — factorize_df","title":"Factorize a dataframe — factorize_df","text":"Factorize dataframe. function loops dataframe (calling factorize_column) labels variable provide labels.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factorize a dataframe — factorize_df","text":"","code":"factorize_df(df, vals_df, verbose = TRUE, ...)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factorize a dataframe — factorize_df","text":"df dataframe label vals_df dataframe variable labels (.e., factor levels labels) format specified . Passed factorize_column function. verbose Prints vars labeled unlabeled ... Additional arguments passed factorize_column","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factorize a dataframe — factorize_df","text":"factorized (.e. labeled) version dataframe passed.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Factorize a dataframe — factorize_df","text":"function expects values dataframe (vals_df) following format: variable (character/string names variable), value (integer values variable), val_order (sequential ordering value), label (strings names use levels factor). \"factorize\" functions borrowed updated 'tmr.Rite..tester' package Matt Landis.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/factorize_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factorize a dataframe — factorize_df","text":"","code":"hh_labeled = factorize_df(   df = hh,   vals_df = value_labels,   value_label_colname = 'label',   extra_labels = c(\"Missing\") ) #>  #>  Labeled vars:  #> income_detailed, income_followup, num_people, residence_type, sample_segment #>  #>  Unlabeled vars:  #> hh_id, hh_weight, num_trips"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get distance between points — get_distance_meters","title":"Get distance between points — get_distance_meters","text":"Function get haversine distance meters two points Based calculation geosphere package","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get distance between points — get_distance_meters","text":"","code":"get_distance_meters(location_1, location_2, radius = 6378137)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get distance between points — get_distance_meters","text":"location_1 matrix vector longitudes latitudes location_2 matrix vector longitudes latitudes radius Radius sphere use haversine calculation (Defaults meters)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get distance between points — get_distance_meters","text":"vector distances meters","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/get_distance_meters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get distance between points — get_distance_meters","text":"","code":"get_distance_meters(c(38.8734, -75.2394), c(40.3497, -76.2314)) #> [1] 117610.6"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":null,"dir":"Reference","previous_headings":"","what":"Test household dataset — hh","title":"Test household dataset — hh","text":"dataset containing household level attributes 1,000 households 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test household dataset — hh","text":"","code":"hh"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":"hh","dir":"Reference","previous_headings":"","what":"hh","title":"Test household dataset — hh","text":"data frame 1,000 rows 6 columns: hh_id 8 digit household ID sample_segment Sample segment income_detailed 2022 household income (detailed categories), response codes income_followup 2022 household income (broad categories), response codes num_people Household size, response codes residence_type Type residence, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hh.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test household dataset — hh","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin numeric variables — hts_bin_var","title":"Bin numeric variables — hts_bin_var","text":"Bin numeric variables","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin numeric variables — hts_bin_var","text":"","code":"hts_bin_var(prepped_dt, numvar, nbins = 7)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin numeric variables — hts_bin_var","text":"prepped_dt Dataset containing variable bin data.table format numvar Name numeric variable bin nbins Number bins variable. Defaults 7.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin numeric variables — hts_bin_var","text":"Inputted dataset specified variable binned data.table format.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_bin_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bin numeric variables — hts_bin_var","text":"","code":"require(data.table) #> Loading required package: data.table require(stringr) #> Loading required package: stringr hts_bin_var(prepped_dt = trip, numvar = 'speed_mph') #>           hh_id  person_id       day_id travel_date      trip_id mode_type #>     1: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12         8 #>     2: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12         8 #>     3: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12         1 #>     4: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12         1 #>     5: 23000173 2300017301 230001730103  2023-04-21 2.300017e+12         8 #>    ---                                                                     #> 16062: 23419141 2341914103 234191410301  2023-05-31 2.341914e+12         8 #> 16063: 23419141 2341914103 234191410301  2023-05-31 2.341914e+12         8 #> 16064: 23419141 2341914103 234191410301  2023-05-31 2.341914e+12         8 #> 16065: 23419703 2341970301 234197030101  2023-05-31 2.341970e+12         8 #> 16066: 23419703 2341970301 234197030101  2023-05-31 2.341970e+12         8 #>        d_purpose_category trip_weight speed_mph #>     1:                  9         356      1-23 #>     2:                  1         679     23-45 #>     3:                  9         758      1-23 #>     4:                  1         314      1-23 #>     5:                  3         883     23-45 #>    ---                                          #> 16062:                  1         950      1-23 #> 16063:                  6         123     23-45 #> 16064:                  1         720     23-45 #> 16065:                 13         523      1-23 #> 16066:                  1         298      1-23"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind a column from one table to another — hts_cbind_var","title":"Bind a column from one table to another — hts_cbind_var","text":"Bind column one table another","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind a column from one table to another — hts_cbind_var","text":"","code":"hts_cbind_var(   lhs_table,   rhs_var,   hts_data,   variable_list = variable_list,   return_weight_cols = FALSE,   cbind_ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   cbind_wts = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\") )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind a column from one table to another — hts_cbind_var","text":"lhs_table Table bind column data.table format rhs_var Variable bind lhs_table. hts_data List household, person, vehicle, day, trip tables data.table format. variable_list variable list descriptions table locations variables. return_weight_cols true binds weight variable along rhs_var lhs_table. Default FALSE. cbind_ids list unique identifiers table hts_data cbind_wts list weight table hts_data","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind a column from one table to another — hts_cbind_var","text":"Inputted table inputted variable binded.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_cbind_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind a column from one table to another — hts_cbind_var","text":"","code":"require(data.table) hts_cbind_var(lhs_table = trip,  rhs_var = 'speed_mph',  hts_data = test_data,   variable_list = variable_list) #> Joining speed_mph to table on hh_id, person_id, day_id, trip_id, speed_mph, trip_weight #>           hh_id  person_id       day_id      trip_id speed_mph trip_weight #>     1: 23000173 2300017301 230001730102 2.300017e+12 21.480572         356 #>     2: 23000173 2300017301 230001730102 2.300017e+12 23.720178         679 #>     3: 23000173 2300017301 230001730102 2.300017e+12  6.927242         758 #>     4: 23000173 2300017301 230001730102 2.300017e+12  6.146634         314 #>     5: 23000173 2300017301 230001730103 2.300017e+12 34.657421         883 #>    ---                                                                     #> 16062: 23419141 2341914103 234191410301 2.341914e+12  8.904454         950 #> 16063: 23419141 2341914103 234191410301 2.341914e+12 43.284089         123 #> 16064: 23419141 2341914103 234191410301 2.341914e+12 25.518845         720 #> 16065: 23419703 2341970301 234197030101 2.341970e+12 13.131100         523 #> 16066: 23419703 2341970301 234197030101 2.341970e+12 16.413875         298 #>        travel_date mode_type d_purpose_category #>     1:  2023-04-20         8                  9 #>     2:  2023-04-20         8                  1 #>     3:  2023-04-20         1                  9 #>     4:  2023-04-20         1                  1 #>     5:  2023-04-21         8                  3 #>    ---                                          #> 16062:  2023-05-31         8                  1 #> 16063:  2023-05-31         8                  6 #> 16064:  2023-05-31         8                  1 #> 16065:  2023-05-31         8                 13 #> 16066:  2023-05-31         8                  1 hts_cbind_var(lhs_table = trip,  rhs_var = 'speed_mph',   hts_data = test_data, variable_list = variable_list,  return_weight_cols = TRUE) #> Joining speed_mph to table on hh_id, person_id, day_id, trip_id, speed_mph, trip_weight #>           hh_id  person_id       day_id      trip_id speed_mph trip_weight #>     1: 23000173 2300017301 230001730102 2.300017e+12 21.480572         356 #>     2: 23000173 2300017301 230001730102 2.300017e+12 23.720178         679 #>     3: 23000173 2300017301 230001730102 2.300017e+12  6.927242         758 #>     4: 23000173 2300017301 230001730102 2.300017e+12  6.146634         314 #>     5: 23000173 2300017301 230001730103 2.300017e+12 34.657421         883 #>    ---                                                                     #> 16062: 23419141 2341914103 234191410301 2.341914e+12  8.904454         950 #> 16063: 23419141 2341914103 234191410301 2.341914e+12 43.284089         123 #> 16064: 23419141 2341914103 234191410301 2.341914e+12 25.518845         720 #> 16065: 23419703 2341970301 234197030101 2.341970e+12 13.131100         523 #> 16066: 23419703 2341970301 234197030101 2.341970e+12 16.413875         298 #>        travel_date mode_type d_purpose_category #>     1:  2023-04-20         8                  9 #>     2:  2023-04-20         8                  1 #>     3:  2023-04-20         1                  9 #>     4:  2023-04-20         1                  1 #>     5:  2023-04-21         8                  3 #>    ---                                          #> 16062:  2023-05-31         8                  1 #> 16063:  2023-05-31         8                  6 #> 16064:  2023-05-31         8                  1 #> 16065:  2023-05-31         8                 13 #> 16066:  2023-05-31         8                  1"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter datasets to only keep specified ids — hts_filter_data","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"Filter datasets keep specified ids","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"","code":"hts_filter_data(hts_data, ids, id_name)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"hts_data List containing household travel data tables. ids List ids keep tables id_name Name id used filtering (e.g., hh_id, person_id)","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"Inputted list tables filtered specified ids.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_filter_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter datasets to only keep specified ids — hts_filter_data","text":"","code":"require(data.table)  data(test_data)  hts_filter_data(hts_data = test_data,                 ids = hh[num_people > 5, hh_id],                 id_name = 'hh_id') #> $hh #>       hh_id sample_segment num_trips num_people income_detailed income_followup #> 1: 23016029              8        20          7               5             995 #> 2: 23121381             14       101          6               9             995 #> 3: 23122159             21         5          6               2             995 #> 4: 23150818             16         3          6               1             995 #> 5: 23233061             21        10          6               8             995 #> 6: 23233651             21        20          8               6             995 #> 7: 23240801             21         2          6               6             995 #> 8: 23411644             14        24          6               9             995 #> 9: 23416563             14        16          6               7             995 #>    residence_type hh_weight #> 1:              2       974 #> 2:              1       826 #> 3:              1       938 #> 4:              1       602 #> 5:              1        39 #> 6:              1       345 #> 7:              1       783 #> 8:              1       154 #> 9:              2       928 #>  #> $person #>     ethnicity_1 ethnicity_2 ethnicity_3 ethnicity_4 ethnicity_997 ethnicity_999 #>  1:           1           0           0           0             0             0 #>  2:           1           0           0           0             0             0 #>  3:         995         995         995         995           995           995 #>  4:         995         995         995         995           995           995 #>  5:         995         995         995         995           995           995 #>  6:           1           0           0           0             0             0 #>  7:         995         995         995         995           995           995 #>  8:           1           0           0           0             0             0 #>  9:           1           0           0           0             0             0 #> 10:         995         995         995         995           995           995 #> 11:         995         995         995         995           995           995 #> 12:         995         995         995         995           995           995 #> 13:         995         995         995         995           995           995 #> 14:           0           1           0           0             0             0 #> 15:         995         995         995         995           995           995 #> 16:         995         995         995         995           995           995 #> 17:         995         995         995         995           995           995 #> 18:         995         995         995         995           995           995 #> 19:         995         995         995         995           995           995 #> 20:           1           0           0           0             0             0 #> 21:         995         995         995         995           995           995 #> 22:         995         995         995         995           995           995 #> 23:         995         995         995         995           995           995 #> 24:         995         995         995         995           995           995 #> 25:         995         995         995         995           995           995 #> 26:           1           0           0           0             0             0 #> 27:           1           0           0           0             0             0 #> 28:           1           0           0           0             0             0 #> 29:         995         995         995         995           995           995 #> 30:         995         995         995         995           995           995 #> 31:         995         995         995         995           995           995 #> 32:           1           0           0           0             0             0 #> 33:           1           0           0           0             0             0 #> 34:           1           0           0           0             0             0 #> 35:           1           0           0           0             0             0 #> 36:         995         995         995         995           995           995 #> 37:         995         995         995         995           995           995 #> 38:         995         995         995         995           995           995 #> 39:         995         995         995         995           995           995 #> 40:           0           0           0           0             0             1 #> 41:         995         995         995         995           995           995 #> 42:           0           0           0           0             0             1 #> 43:         995         995         995         995           995           995 #> 44:         995         995         995         995           995           995 #> 45:         995         995         995         995           995           995 #> 46:           1           0           0           0             0             0 #> 47:           1           0           0           0             0             0 #> 48:         995         995         995         995           995           995 #> 49:         995         995         995         995           995           995 #> 50:         995         995         995         995           995           995 #> 51:         995         995         995         995           995           995 #> 52:           1           0           0           0             0             0 #> 53:           1           0           0           0             0             0 #> 54:         995         995         995         995           995           995 #> 55:         995         995         995         995           995           995 #> 56:         995         995         995         995           995           995 #> 57:         995         995         995         995           995           995 #>     ethnicity_1 ethnicity_2 ethnicity_3 ethnicity_4 ethnicity_997 ethnicity_999 #>     race_1 race_2 race_3 race_4 race_5 race_997 race_999    hh_id num_trips #>  1:      0      0      0      0      1        0        0 23016029         5 #>  2:      0      0      0      0      1        0        0 23016029         0 #>  3:    995    995    995    995    995      995      995 23016029         2 #>  4:    995    995    995    995    995      995      995 23016029         2 #>  5:    995    995    995    995    995      995      995 23016029         5 #>  6:      0      0      0      0      1        0        0 23016029         2 #>  7:    995    995    995    995    995      995      995 23016029         4 #>  8:      0      0      0      0      1        0        0 23121381        45 #>  9:      0      0      0      0      1        0        0 23121381        15 #> 10:    995    995    995    995    995      995      995 23121381         0 #> 11:    995    995    995    995    995      995      995 23121381        13 #> 12:    995    995    995    995    995      995      995 23121381        12 #> 13:    995    995    995    995    995      995      995 23121381        16 #> 14:      0      0      0      0      1        0        0 23122159         5 #> 15:    995    995    995    995    995      995      995 23122159         0 #> 16:    995    995    995    995    995      995      995 23122159         0 #> 17:    995    995    995    995    995      995      995 23122159         0 #> 18:    995    995    995    995    995      995      995 23122159         0 #> 19:    995    995    995    995    995      995      995 23122159         0 #> 20:      1      0      0      0      0        0        0 23150818         3 #> 21:    995    995    995    995    995      995      995 23150818         0 #> 22:    995    995    995    995    995      995      995 23150818         0 #> 23:    995    995    995    995    995      995      995 23150818         0 #> 24:    995    995    995    995    995      995      995 23150818         0 #> 25:    995    995    995    995    995      995      995 23150818         0 #> 26:      0      0      0      0      1        0        0 23233061         0 #> 27:      0      0      0      0      1        0        0 23233061         2 #> 28:      0      0      1      0      0        0        0 23233061         4 #> 29:    995    995    995    995    995      995      995 23233061         2 #> 30:    995    995    995    995    995      995      995 23233061         2 #> 31:    995    995    995    995    995      995      995 23233061         0 #> 32:      0      0      0      0      1        0        0 23233651         0 #> 33:      0      1      0      0      0        0        0 23233651         2 #> 34:      0      0      0      0      1        0        0 23233651         3 #> 35:      0      0      0      0      1        0        0 23233651         3 #> 36:    995    995    995    995    995      995      995 23233651         3 #> 37:    995    995    995    995    995      995      995 23233651         3 #> 38:    995    995    995    995    995      995      995 23233651         3 #> 39:    995    995    995    995    995      995      995 23233651         3 #> 40:      0      0      0      0      1        0        0 23240801         0 #> 41:    995    995    995    995    995      995      995 23240801         2 #> 42:      0      0      0      0      1        0        0 23240801         0 #> 43:    995    995    995    995    995      995      995 23240801         0 #> 44:    995    995    995    995    995      995      995 23240801         0 #> 45:    995    995    995    995    995      995      995 23240801         0 #> 46:      0      0      0      0      1        0        0 23411644         4 #> 47:      0      0      0      0      1        0        0 23411644         6 #> 48:    995    995    995    995    995      995      995 23411644         4 #> 49:    995    995    995    995    995      995      995 23411644         2 #> 50:    995    995    995    995    995      995      995 23411644         2 #> 51:    995    995    995    995    995      995      995 23411644         6 #> 52:      1      0      0      0      0        0        0 23416563         4 #> 53:      1      0      0      0      0        0        0 23416563         4 #> 54:    995    995    995    995    995      995      995 23416563         2 #> 55:    995    995    995    995    995      995      995 23416563         2 #> 56:    995    995    995    995    995      995      995 23416563         2 #> 57:    995    995    995    995    995      995      995 23416563         2 #>     race_1 race_2 race_3 race_4 race_5 race_997 race_999    hh_id num_trips #>      person_id age gender employment education person_weight #>  1: 2301602901   5      1          5         2           411 #>  2: 2301602902   6      2          1         2           578 #>  3: 2301602903   2      1        995       995            17 #>  4: 2301602904   2      1        995       995           490 #>  5: 2301602905   1      1        995       995           342 #>  6: 2301602906   7      1          1         2           754 #>  7: 2301602907   2      1        995       995           249 #>  8: 2312138101   6      1          5         6           186 #>  9: 2312138102   6      2          1         7           296 #> 10: 2312138103   3      1          2       995           369 #> 11: 2312138104   2      2        995       995           499 #> 12: 2312138105   2      1        995       995           226 #> 13: 2312138106   2      2        995       995           823 #> 14: 2312215901   5      1          1         3           859 #> 15: 2312215902   2    995        995       995           280 #> 16: 2312215903   2    995        995       995           685 #> 17: 2312215904   2    995        995       995           592 #> 18: 2312215905   5    995          1       995           240 #> 19: 2312215906   5    995          1       995           710 #> 20: 2315081801   4      2          8         7           231 #> 21: 2315081802   4    995          5       995           331 #> 22: 2315081803   4    995          5       995           214 #> 23: 2315081804   4    995          2       995           105 #> 24: 2315081805   4    995          2       995           317 #> 25: 2315081806   4    995          5       995           825 #> 26: 2323306101  10      1          5         6           114 #> 27: 2323306102   7      2          1         4           297 #> 28: 2323306103   6      1          1         2           861 #> 29: 2323306104   2      1        995       995           161 #> 30: 2323306105   2      2        995       995           817 #> 31: 2323306106  10    995          5       995           193 #> 32: 2323365101   7      1          1         3           207 #> 33: 2323365102   8      2          1         2           178 #> 34: 2323365103   5      2          6         2           211 #> 35: 2323365104   5      1          6         2           590 #> 36: 2323365105   2      2        995       995           626 #> 37: 2323365106   2      1        995       995           433 #> 38: 2323365107   2      1        995       995           447 #> 39: 2323365108   1      1        995       995           404 #> 40: 2324080101   8      2          1         6           801 #> 41: 2324080102   2    999        995       995           894 #> 42: 2324080103   7      1          5         3           330 #> 43: 2324080104   2    999        995       995           983 #> 44: 2324080105   2    999        995       995           327 #> 45: 2324080106   2    999        995       995            66 #> 46: 2341164401   6      1          1         5           950 #> 47: 2341164402   6      2          1         6           785 #> 48: 2341164403   2      1        995       995           203 #> 49: 2341164404   2      1        995       995           719 #> 50: 2341164405   2      2        995       995           991 #> 51: 2341164406   2      1        995       995           553 #> 52: 2341656301   6      1          1         5           812 #> 53: 2341656302   6      2          1         3           889 #> 54: 2341656303   2      1        995       995           258 #> 55: 2341656304   2      1        995       995            42 #> 56: 2341656305   2      2        995       995           955 #> 57: 2341656306   3      2          5       995           950 #>      person_id age gender employment education person_weight #>  #> $day #>     delivery_2 delivery_3 delivery_4 delivery_5 delivery_6 delivery_7 #>  1:          0          0          0          0          0          0 #>  2:        995        995        995        995        995        995 #>  3:        995        995        995        995        995        995 #>  4:        995        995        995        995        995        995 #>  5:        995        995        995        995        995        995 #>  6:        995        995        995        995        995        995 #>  7:        995        995        995        995        995        995 #>  8:          0          0          0          0          0          0 #>  9:          0          0          0          0          0          0 #> 10:        995        995        995        995        995        995 #> 11:        995        995        995        995        995        995 #> 12:        995        995        995        995        995        995 #> 13:        995        995        995        995        995        995 #> 14:          0          0          0          0          0          0 #> 15:          0          0          0          0          0          0 #> 16:        995        995        995        995        995        995 #> 17:        995        995        995        995        995        995 #> 18:        995        995        995        995        995        995 #> 19:        995        995        995        995        995        995 #> 20:          0          0          0          0          0          0 #> 21:          0          0          0          0          0          0 #> 22:        995        995        995        995        995        995 #> 23:        995        995        995        995        995        995 #> 24:        995        995        995        995        995        995 #> 25:        995        995        995        995        995        995 #> 26:          0          0          0          1          0          0 #> 27:          0          0          0          0          0          0 #> 28:        995        995        995        995        995        995 #> 29:        995        995        995        995        995        995 #> 30:        995        995        995        995        995        995 #> 31:        995        995        995        995        995        995 #> 32:          0          0          0          1          0          0 #> 33:          0          0          0          0          0          0 #> 34:        995        995        995        995        995        995 #> 35:        995        995        995        995        995        995 #> 36:        995        995        995        995        995        995 #> 37:        995        995        995        995        995        995 #> 38:          0          0          0          1          0          0 #> 39:          0          0          0          1          0          0 #> 40:        995        995        995        995        995        995 #> 41:        995        995        995        995        995        995 #> 42:        995        995        995        995        995        995 #> 43:        995        995        995        995        995        995 #> 44:          0          0          0          0          0          0 #> 45:          0          0          0          0          0          0 #> 46:        995        995        995        995        995        995 #> 47:        995        995        995        995        995        995 #> 48:        995        995        995        995        995        995 #> 49:        995        995        995        995        995        995 #> 50:          0          0          0          1          0          0 #> 51:          0          0          0          1          0          0 #> 52:          0          0          0          0          0          0 #> 53:        995        995        995        995        995        995 #> 54:        995        995        995        995        995        995 #> 55:        995        995        995        995        995        995 #> 56:        995        995        995        995        995        995 #> 57:          0          0          0          0          0          0 #> 58:        995        995        995        995        995        995 #> 59:        995        995        995        995        995        995 #> 60:        995        995        995        995        995        995 #> 61:        995        995        995        995        995        995 #> 62:        995        995        995        995        995        995 #> 63:        995        995        995        995        995        995 #> 64:        995        995        995        995        995        995 #> 65:          0          0          0          0          0          0 #> 66:        995        995        995        995        995        995 #> 67:        995        995        995        995        995        995 #> 68:        995        995        995        995        995        995 #> 69:        995        995        995        995        995        995 #> 70:        995        995        995        995        995        995 #> 71:          0          0          0          1          0          0 #> 72:        995        995        995        995        995        995 #> 73:        995        995        995        995        995        995 #> 74:        995        995        995        995        995        995 #> 75:        995        995        995        995        995        995 #> 76:        995        995        995        995        995        995 #> 77:          0          0          0          0          0          0 #> 78:        995        995        995        995        995        995 #> 79:        995        995        995        995        995        995 #> 80:        995        995        995        995        995        995 #> 81:        995        995        995        995        995        995 #> 82:        995        995        995        995        995        995 #>     delivery_2 delivery_3 delivery_4 delivery_5 delivery_6 delivery_7 #>     delivery_8 delivery_996    hh_id num_trips  person_id       day_id #>  1:          0            1 23016029         5 2301602901 230160290101 #>  2:        995          995 23016029         0 2301602902 230160290201 #>  3:        995          995 23016029         2 2301602903 230160290301 #>  4:        995          995 23016029         2 2301602904 230160290401 #>  5:        995          995 23016029         5 2301602905 230160290501 #>  6:        995          995 23016029         2 2301602906 230160290601 #>  7:        995          995 23016029         4 2301602907 230160290701 #>  8:          0            1 23121381        11 2312138101 231213810101 #>  9:          0            1 23121381         0 2312138102 231213810201 #> 10:        995          995 23121381        NA 2312138103 231213810301 #> 11:        995          995 23121381         3 2312138104 231213810401 #> 12:        995          995 23121381         4 2312138105 231213810501 #> 13:        995          995 23121381         3 2312138106 231213810601 #> 14:          0            1 23121381         5 2312138101 231213810102 #> 15:          0            1 23121381         0 2312138102 231213810202 #> 16:        995          995 23121381        NA 2312138103 231213810302 #> 17:        995          995 23121381        NA 2312138104 231213810402 #> 18:        995          995 23121381        NA 2312138105 231213810502 #> 19:        995          995 23121381        NA 2312138106 231213810602 #> 20:          0            1 23121381         2 2312138101 231213810103 #> 21:          0            1 23121381         4 2312138102 231213810203 #> 22:        995          995 23121381        NA 2312138103 231213810303 #> 23:        995          995 23121381         2 2312138104 231213810403 #> 24:        995          995 23121381         2 2312138105 231213810503 #> 25:        995          995 23121381         2 2312138106 231213810603 #> 26:          0            0 23121381         7 2312138101 231213810104 #> 27:          0            1 23121381         3 2312138102 231213810204 #> 28:        995          995 23121381        NA 2312138103 231213810304 #> 29:        995          995 23121381         4 2312138104 231213810404 #> 30:        995          995 23121381        NA 2312138105 231213810504 #> 31:        995          995 23121381         1 2312138106 231213810604 #> 32:          0            0 23121381        12 2312138101 231213810105 #> 33:          0            1 23121381         3 2312138102 231213810205 #> 34:        995          995 23121381         0 2312138103 231213810305 #> 35:        995          995 23121381         1 2312138104 231213810405 #> 36:        995          995 23121381         5 2312138105 231213810505 #> 37:        995          995 23121381         8 2312138106 231213810605 #> 38:          0            0 23121381         5 2312138101 231213810106 #> 39:          0            0 23121381         3 2312138102 231213810206 #> 40:        995          995 23121381        NA 2312138103 231213810306 #> 41:        995          995 23121381         1 2312138104 231213810406 #> 42:        995          995 23121381         1 2312138105 231213810506 #> 43:        995          995 23121381         1 2312138106 231213810606 #> 44:          0            1 23121381         3 2312138101 231213810107 #> 45:          0            1 23121381         2 2312138102 231213810207 #> 46:        995          995 23121381        NA 2312138103 231213810307 #> 47:        995          995 23121381         2 2312138104 231213810407 #> 48:        995          995 23121381        NA 2312138105 231213810507 #> 49:        995          995 23121381         1 2312138106 231213810607 #> 50:          0            0 23122159         5 2312215901 231221590101 #> 51:          0            0 23150818         3 2315081801 231508180101 #> 52:          0            1 23233061         0 2323306101 232330610101 #> 53:        995          995 23233061         2 2323306102 232330610201 #> 54:        995          995 23233061         4 2323306103 232330610301 #> 55:        995          995 23233061         2 2323306104 232330610401 #> 56:        995          995 23233061         2 2323306105 232330610501 #> 57:          0            1 23233651         0 2323365101 232336510101 #> 58:        995          995 23233651         2 2323365102 232336510201 #> 59:        995          995 23233651         3 2323365103 232336510301 #> 60:        995          995 23233651         3 2323365104 232336510401 #> 61:        995          995 23233651         3 2323365105 232336510501 #> 62:        995          995 23233651         3 2323365106 232336510601 #> 63:        995          995 23233651         3 2323365107 232336510701 #> 64:        995          995 23233651         3 2323365108 232336510801 #> 65:          0            1 23240801         0 2324080101 232408010101 #> 66:        995          995 23240801         2 2324080102 232408010201 #> 67:        995          995 23240801         0 2324080103 232408010301 #> 68:        995          995 23240801         0 2324080104 232408010401 #> 69:        995          995 23240801         0 2324080105 232408010501 #> 70:        995          995 23240801         0 2324080106 232408010601 #> 71:          0            0 23411644         4 2341164401 234116440101 #> 72:        995          995 23411644         6 2341164402 234116440201 #> 73:        995          995 23411644         4 2341164403 234116440301 #> 74:        995          995 23411644         2 2341164404 234116440401 #> 75:        995          995 23411644         2 2341164405 234116440501 #> 76:        995          995 23411644         6 2341164406 234116440601 #> 77:          0            1 23416563         4 2341656301 234165630101 #> 78:        995          995 23416563         4 2341656302 234165630201 #> 79:        995          995 23416563         2 2341656303 234165630301 #> 80:        995          995 23416563         2 2341656304 234165630401 #> 81:        995          995 23416563         2 2341656305 234165630501 #> 82:        995          995 23416563         2 2341656306 234165630601 #>     delivery_8 delivery_996    hh_id num_trips  person_id       day_id #>     travel_date begin_day end_day day_weight #>  1:  2023-04-27         1       1        504 #>  2:  2023-04-27         1       1        376 #>  3:  2023-04-27         1       1        115 #>  4:  2023-04-27         1       1        306 #>  5:  2023-04-27         1       1        358 #>  6:  2023-04-27         1       1        197 #>  7:  2023-04-27         1       1        546 #>  8:  2023-05-05         1       1        896 #>  9:  2023-05-05         1       1        662 #> 10:  2023-05-05       995     995        228 #> 11:  2023-05-05       995     995        580 #> 12:  2023-05-05       995     995        541 #> 13:  2023-05-05       995     995        909 #> 14:  2023-05-06         1       1        159 #> 15:  2023-05-06         1       1        464 #> 16:  2023-05-06       995     995        518 #> 17:  2023-05-06       995     995        838 #> 18:  2023-05-06       995     995        916 #> 19:  2023-05-06       995     995        368 #> 20:  2023-05-07         1       1        442 #> 21:  2023-05-07         1       1        362 #> 22:  2023-05-07       995     995        904 #> 23:  2023-05-07       995     995        243 #> 24:  2023-05-07       995     995        820 #> 25:  2023-05-07       995     995        827 #> 26:  2023-05-08         1       1        169 #> 27:  2023-05-08         1       1        169 #> 28:  2023-05-08       995     995        495 #> 29:  2023-05-08       995     995        813 #> 30:  2023-05-08       995     995        436 #> 31:  2023-05-08       995     995        177 #> 32:  2023-05-09         1       1        388 #> 33:  2023-05-09         1       1        688 #> 34:  2023-05-09         1       1        497 #> 35:  2023-05-09         1       1        934 #> 36:  2023-05-09         1       1        614 #> 37:  2023-05-09         1       1        414 #> 38:  2023-05-10         1       1        384 #> 39:  2023-05-10         1       1        620 #> 40:  2023-05-10         1     995        748 #> 41:  2023-05-10         1     995        695 #> 42:  2023-05-10         1     995        397 #> 43:  2023-05-10         1     995        544 #> 44:  2023-05-11         1       1         50 #> 45:  2023-05-11         1       1        385 #> 46:  2023-05-11       995     995        247 #> 47:  2023-05-11       995     995        740 #> 48:  2023-05-11       995     995        496 #> 49:  2023-05-11       995     995        713 #> 50:  2023-05-03         1       1        768 #> 51:  2023-05-24         1       1        659 #> 52:  2023-05-25         1       1        111 #> 53:  2023-05-25         1       1        695 #> 54:  2023-05-25         1       1        279 #> 55:  2023-05-25         1       1        661 #> 56:  2023-05-25         1       1        708 #> 57:  2023-05-29         1       1        631 #> 58:  2023-05-29         1       1        167 #> 59:  2023-05-29         1       1        641 #> 60:  2023-05-29         1       1        574 #> 61:  2023-05-29         1       1        543 #> 62:  2023-05-29         1       1         96 #> 63:  2023-05-29         1       1        982 #> 64:  2023-05-29         1       1        288 #> 65:  2023-05-25         1       1         66 #> 66:  2023-05-25         1       1        451 #> 67:  2023-05-25         1       1        711 #> 68:  2023-05-25         1       1        621 #> 69:  2023-05-25         1       1        466 #> 70:  2023-05-25         1       1        209 #> 71:  2023-05-31         1       3        923 #> 72:  2023-05-31         1       1        435 #> 73:  2023-05-31         1       1        468 #> 74:  2023-05-31         1       1        966 #> 75:  2023-05-31         1       1        350 #> 76:  2023-05-31         1       1        160 #> 77:  2023-06-05         1       1        438 #> 78:  2023-06-05         1       1        922 #> 79:  2023-06-05         1       1        554 #> 80:  2023-06-05         1       1        451 #> 81:  2023-06-05         1       1        971 #> 82:  2023-06-05         1       1         47 #>     travel_date begin_day end_day day_weight #>  #> $trip #>         hh_id  person_id       day_id travel_date      trip_id  speed_mph #>   1: 23016029 2301602901 230160290101  2023-04-27 2.301603e+12  5.9952706 #>   2: 23016029 2301602901 230160290101  2023-04-27 2.301603e+12 21.5112706 #>   3: 23016029 2301602901 230160290101  2023-04-27 2.301603e+12  3.5931191 #>   4: 23016029 2301602901 230160290101  2023-04-27 2.301603e+12 11.9905413 #>   5: 23016029 2301602901 230160290101  2023-04-27 2.301603e+12  5.9952706 #>  ---                                                                      #> 197: 23416563 2341656304 234165630401  2023-06-05 2.341656e+12  2.4496880 #> 198: 23416563 2341656305 234165630501  2023-06-05 2.341656e+12  1.5417278 #> 199: 23416563 2341656305 234165630501  2023-06-05 2.341656e+12  2.5695464 #> 200: 23416563 2341656306 234165630601  2023-06-05 2.341656e+12  0.8465739 #> 201: 23416563 2341656306 234165630601  2023-06-05 2.341656e+12  4.2869540 #>      mode_type d_purpose_category trip_weight #>   1:         8                  6         804 #>   2:         8                 10         523 #>   3:         8                  1         622 #>   4:         8                  6         633 #>   5:         8                  1         413 #>  ---                                          #> 197:        10                  1         649 #> 198:         1                  4         503 #> 199:         1                  1         338 #> 200:         8                  6         302 #> 201:         8                  1         599 #>  #> $vehicle #>        hh_id vehicle_id fuel_type hh_weight #>  1: 23016029 2301602901         1       974 #>  2: 23016029 2301602902         1       974 #>  3: 23016029 2301602903         1       974 #>  4: 23121381 2312138101         1       826 #>  5: 23121381 2312138102         1       826 #>  6: 23121381 2312138103         1       826 #>  7: 23122159 2312215901         1       938 #>  8: 23122159 2312215902         1       938 #>  9: 23122159 2312215903         1       938 #> 10: 23150818 2315081801         1       602 #> 11: 23150818 2315081802         1       602 #> 12: 23150818 2315081803         4       602 #> 13: 23233061 2323306101         1        39 #> 14: 23233061 2323306102         1        39 #> 15: 23233061 2323306103         5        39 #> 16: 23233061 2323306104         1        39 #> 17: 23233061 2323306105         1        39 #> 18: 23233651 2323365101         1       345 #> 19: 23233651 2323365102         1       345 #> 20: 23233651 2323365103         1       345 #> 21: 23240801 2324080101         1       783 #> 22: 23240801 2324080102         1       783 #> 23: 23240801 2324080103         1       783 #> 24: 23411644 2341164401         1       154 #> 25: 23411644 2341164402         1       154 #> 26: 23411644 2341164403         5       154 #> 27: 23416563 2341656301         1       928 #> 28: 23416563 2341656302         1       928 #>        hh_id vehicle_id fuel_type hh_weight #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Find table location of a variable — hts_find_var","title":"Find table location of a variable — hts_find_var","text":"Find table location variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find table location of a variable — hts_find_var","text":"","code":"hts_find_var(var, variables_dt = variable_list)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find table location of a variable — hts_find_var","text":"var searchable variable string format variables_dt codebook variable list data table format","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find table location of a variable — hts_find_var","text":"variable location string format","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_find_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find table location of a variable — hts_find_var","text":"","code":"hts_find_var('income_detailed') #> [1] \"hh\""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":null,"dir":"Reference","previous_headings":"","what":"Find key columns in table — hts_get_keycols","title":"Find key columns in table — hts_get_keycols","text":"Find key columns table","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find key columns in table — hts_get_keycols","text":"","code":"hts_get_keycols(dt, ids = TRUE, weights = TRUE, priority = FALSE)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find key columns in table — hts_get_keycols","text":"dt Dataset find key columns data.table format ids Boolean whether return id columns. Default TRUE. weights Boolean whether return weight columns. Default TRUE. priority Boolean whether return highest level weight/id. Default FALSE.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find key columns in table — hts_get_keycols","text":"List names key columns dataset.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_keycols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find key columns in table — hts_get_keycols","text":"","code":"require(data.table) hts_get_keycols(dt = trip) #> [1] \"hh_id\"       \"person_id\"   \"day_id\"      \"trip_id\"     \"trip_weight\" hts_get_keycols(dt = trip, priority = TRUE) #> [1] \"trip_id\"     \"trip_weight\""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get counts from dataset — hts_get_ns","title":"Get counts from dataset — hts_get_ns","text":"Get counts dataset","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get counts from dataset — hts_get_ns","text":"","code":"hts_get_ns(   prepped_dt,   weighted,   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   wt_col )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get counts from dataset — hts_get_ns","text":"prepped_dt Dataset pull counts . weighted Boolean whether pull weighted estimates. ids list possible ids return counts wt_col weight column return sum ","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get counts from dataset — hts_get_ns","text":"List unweighted counts, weighted counts, highest level unit.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_get_ns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get counts from dataset — hts_get_ns","text":"","code":"require(data.table)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Melts checkbox variables into a single variable — hts_melt_vars","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"Melts checkbox variables single variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"","code":"hts_melt_vars(   shared_name = NULL,   wide_dt = NULL,   shared_name_vars = NULL,   variables_dt = variable_list,   data = hts_data,   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   remove_missing = TRUE,   missing_values = c(\"Missing Response\", \"995\"),   checkbox_label_sep = \":\",   to_single_row = FALSE )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"shared_name Shared name checkbox variable melt (e.g., 'race_1', 'race_2' shared name 'race'). Defaults NULL. wide_dt Table containing checkbox variables melt data.table format. shared_name_vars List checkbox variables shared name. Defaults NULL. variables_dt List variable locations descriptions data.table format. data List containing household, person, day, trip, vehicle datasets data.table format. ids unique identifiers appearing wide_dt remove_missing Boolean remove rows missing values. Defaults TRUE. missing_values Missing values remove. Defaults 'Missing Response' 995. checkbox_label_sep Character use split description checkbox variable variable list. Defaults ':' to_single_row Boolean treating multiple checkbox selections 'Two '. Defaults FALSE.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"Inputted data table checkbox variables melted single variable, 'variable' column indicate original variable names 'value' column original value checkbox variable.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_melt_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Melts checkbox variables into a single variable — hts_melt_vars","text":"","code":"require(data.table) require(stringr) hts_melt_vars(shared_name = 'race',               wide_dt = person,               data = list('hh' = hh,                               'person' = person,                               'day' = day,                               'trip' = trip,                               'vehicle' = vehicle)) #>           hh_id  person_id variable value                      race #>     1: 23000173 2300017301   race_1     0 African American or Black #>     2: 23000173 2300017304   race_1     0 African American or Black #>     3: 23000738 2300073801   race_1     0 African American or Black #>     4: 23000858 2300085801   race_1     0 African American or Black #>     5: 23000858 2300085802   race_1     0 African American or Black #>    ---                                                              #> 11679: 23416563 2341656302 race_999     0      Prefer not to answer #> 11680: 23418712 2341871201 race_999     0      Prefer not to answer #> 11681: 23419141 2341914101 race_999     0      Prefer not to answer #> 11682: 23419141 2341914102 race_999     0      Prefer not to answer #> 11683: 23419703 2341970301 race_999     0      Prefer not to answer"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare variable to be summarized — hts_prep_byvar","title":"Prepare variable to be summarized — hts_prep_byvar","text":"Prepare variable summarized","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare variable to be summarized — hts_prep_byvar","text":"","code":"hts_prep_byvar(   summarize_by = NULL,   variables_dt = variables_list,   hts_data,   byvar_ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   byvar_wts = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\"),   ... )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare variable to be summarized — hts_prep_byvar","text":"summarize_by Name variable prepped. Default NULL. variables_dt List variable locations descriptions data.table format. hts_data List containing household, person, day, trip, vehicle datasets data.table format. byvar_ids unique identifiers table hts_data byvar_wts weight column table hts_data ... Additional parameters pass link{hts_melt_vars}","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare variable to be summarized — hts_prep_byvar","text":"Data table containing variable summarized key columns.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_byvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare variable to be summarized — hts_prep_byvar","text":"","code":"hts_prep_byvar(summarize_by = 'age',                variables_dt = variable_list,                hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #>          hh_id  person_id person_weight age #>    1: 23000173 2300017301           139   7 #>    2: 23000173 2300017302            17   3 #>    3: 23000173 2300017303           400   2 #>    4: 23000173 2300017304           747   6 #>    5: 23000738 2300073801           298   8 #>   ---                                       #> 2038: 23418712 2341871203           809   2 #> 2039: 23419141 2341914101           136   6 #> 2040: 23419141 2341914102           170   5 #> 2041: 23419141 2341914103           490   1 #> 2042: 23419703 2341970301           645   9 hts_prep_byvar(summarize_by = 'race',                variables_dt = variable_list,                hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #>          hh_id  person_id                      race #>    1: 23025240 2302524001 African American or Black #>    2: 23029096 2302909601 African American or Black #>    3: 23033218 2303321802 African American or Black #>    4: 23034871 2303487101 African American or Black #>    5: 23035194 2303519401 African American or Black #>   ---                                               #> 1665: 23411086 2341108601      Prefer not to answer #> 1666: 23411086 2341108602      Prefer not to answer #> 1667: 23413086 2341308603      Prefer not to answer #> 1668: 23413585 2341358501      Prefer not to answer #> 1669: 23413585 2341358502      Prefer not to answer"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare datasets to make summaries — hts_prep_data","title":"Prepare datasets to make summaries — hts_prep_data","text":"Prepare datasets make summaries","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare datasets to make summaries — hts_prep_data","text":"","code":"hts_prep_data(   summarize_var = NULL,   summarize_by = NULL,   variables_dt = variable_list,   data = hts_data,   id_cols = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   weighted = TRUE,   wt_cols = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\"),   remove_outliers = TRUE,   threshold = 0.975,   remove_missing = TRUE,   missing_values = c(\"Missing Response\", \"995\"),   not_imputable = -1,   strataname = NULL )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare datasets to make summaries — hts_prep_data","text":"summarize_var Name variable summarize. Default NULL summarize_by Name variable summarize summarize_var . Default NULL. variables_dt List variable locations descriptions data.table format. data List household, person, vehicle, day, trip tables data.table format. id_cols name unique identifier table hts_data weighted Whether data weighted. Default TRUE. wt_cols weight name table hts_data remove_outliers Whether remove outliers numeric variable. Default TRUE. threshold Threshold define outliers. Default 0.975. remove_missing Whether remove missing values summary. Default TRUE. missing_values Missing values remove. Default 995. not_imputable Value representing 'imputable' remove. Default -1. strataname Name strata name bring . Default NULL.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare datasets to make summaries — hts_prep_data","text":"List containing categorical numeric datasets summary variables key columns, either whether summarize variable shared breakdown outliers, depending summarize variable categorical numeric.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare datasets to make summaries — hts_prep_data","text":"","code":"require(data.table) require(stringr) hts_prep_data(summarize_var = 'age',               variables_dt = variable_list,               data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> Creating a summary of person age  #> $cat #>          hh_id  person_id age person_weight #>    1: 23000173 2300017301   7           139 #>    2: 23000173 2300017302   3            17 #>    3: 23000173 2300017303   2           400 #>    4: 23000173 2300017304   6           747 #>    5: 23000738 2300073801   8           298 #>   ---                                       #> 2038: 23418712 2341871203   2           809 #> 2039: 23419141 2341914101   6           136 #> 2040: 23419141 2341914102   5           170 #> 2041: 23419141 2341914103   1           490 #> 2042: 23419703 2341970301   9           645 #>  #> $num #> NULL #>  #> $var_is_shared #> [1] FALSE #>  hts_prep_data(summarize_var = 'speed_mph',               summarize_by = 'age',               variables_dt = variable_list,               data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> Creating a summary of trip speed_mph broken down by person age #> $cat #>           hh_id  person_id       day_id      trip_id person_weight trip_weight #>     1: 23000173 2300017301 230001730102 2.300017e+12           139         356 #>     2: 23000173 2300017301 230001730102 2.300017e+12           139         679 #>     3: 23000173 2300017301 230001730102 2.300017e+12           139         758 #>     4: 23000173 2300017301 230001730102 2.300017e+12           139         314 #>     5: 23000173 2300017301 230001730103 2.300017e+12           139         883 #>    ---                                                                         #> 15031: 23419141 2341914103 234191410301 2.341914e+12           490         950 #> 15032: 23419141 2341914103 234191410301 2.341914e+12           490         123 #> 15033: 23419141 2341914103 234191410301 2.341914e+12           490         720 #> 15034: 23419703 2341970301 234197030101 2.341970e+12           645         523 #> 15035: 23419703 2341970301 234197030101 2.341970e+12           645         298 #>         speed_mph age #>     1:      17-25   7 #>     2:      17-25   7 #>     3:        1-9   7 #>     4:        1-9   7 #>     5:      33-41   7 #>    ---                #> 15031:        1-9   1 #> 15032: 43 or more   1 #> 15033:      25-33   1 #> 15034:       9-17   9 #> 15035:       9-17   9 #>  #> $num #>           hh_id  person_id       day_id      trip_id person_weight trip_weight #>     1: 23000173 2300017301 230001730102 2.300017e+12           139         356 #>     2: 23000173 2300017301 230001730102 2.300017e+12           139         679 #>     3: 23000173 2300017301 230001730102 2.300017e+12           139         758 #>     4: 23000173 2300017301 230001730102 2.300017e+12           139         314 #>     5: 23000173 2300017301 230001730103 2.300017e+12           139         883 #>    ---                                                                         #> 15031: 23419141 2341914103 234191410301 2.341914e+12           490         950 #> 15032: 23419141 2341914103 234191410301 2.341914e+12           490         123 #> 15033: 23419141 2341914103 234191410301 2.341914e+12           490         720 #> 15034: 23419703 2341970301 234197030101 2.341970e+12           645         523 #> 15035: 23419703 2341970301 234197030101 2.341970e+12           645         298 #>        speed_mph age #>     1: 21.480572   7 #>     2: 23.720178   7 #>     3:  6.927242   7 #>     4:  6.146634   7 #>     5: 34.657421   7 #>    ---               #> 15031:  8.904454   1 #> 15032: 43.284089   1 #> 15033: 25.518845   1 #> 15034: 13.131100   9 #> 15035: 16.413875   9 #>  #> $outliers #>    threshold num_removed min_outlier max_outlier #> 1:     0.975         386    110.2297    228233.1 #>                                                            hts_prep_data(summarize_var = 'employment',               summarize_by = c('age', 'race'),               variables_dt = variable_list,               data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> Creating a summary of person employment broken down by person age and person race #> $cat #>          hh_id  person_id person_weight employment age #>    1: 23000173 2300017301           139          1   7 #>    2: 23000173 2300017304           747          3   6 #>    3: 23000738 2300073801           298          1   8 #>    4: 23000858 2300085801           865          1   6 #>    5: 23000858 2300085802            87          1   7 #>   ---                                                  #> 1665: 23416563 2341656302           889          1   6 #> 1666: 23418712 2341871201           476          1   6 #> 1667: 23419141 2341914101           136          1   6 #> 1668: 23419141 2341914102           170          5   5 #> 1669: 23419703 2341970301           645          5   9 #>                            race #>    1:                     White #>    2:                     White #>    3:                     White #>    4:      Prefer not to answer #>    5:                     White #>   ---                           #> 1665: African American or Black #> 1666:                     Asian #> 1667:                     White #> 1668:                     White #> 1669:                     White #>  #> $num #> NULL #>  #> $var_is_shared #> [1] FALSE #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare datasets for trip rate calculations — hts_prep_triprate","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"Prepare datasets trip rate calculations","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"","code":"hts_prep_triprate(   summarize_by = NULL,   variables_dt = variable_list,   trip_name = \"trip\",   day_name = \"day\",   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   wts = c(\"hh_weight\", \"person_weight\", \"day_weight\", \"trip_weight\", \"hh_weight\"),   remove_outliers = TRUE,   threshold = 0.975,   weighted = TRUE,   hts_data )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"summarize_by Name variable summarize trip rates . Default NULL. variables_dt List variable locations descriptions data.table format. trip_name Name trip dataset hts_data. day_name Name day dataset hts_data. ids name unique identifier table hts_data wts name weight column table hts_data remove_outliers Boolean whether remove outliers dataset. Default TRUE. threshold Threshold define outliers. Default 0.975. weighted Whether data weighted. Default TRUE. hts_data List containing household, person, day, trip, vehicle datasets data.table format.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"List binned number trips key columns summarize variable, unbinned number trips key columns summarize variable, breakdown outliers removed.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_prep_triprate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare datasets for trip rate calculations — hts_prep_triprate","text":"","code":"require(data.table) require(stringr) hts_prep_triprate(variables_dt = variable_list,                   trip_name = 'trip',                   day_name = 'day',                   hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> $cat #>          hh_id  person_id       day_id day_weight num_trips_wtd #>    1: 23000173 2300017301 230001730101        775     Exactly 0 #>    2: 23000173 2300017301 230001730102        244          7-14 #>    3: 23000173 2300017301 230001730103         77    36 or more #>    4: 23000173 2300017301 230001730104         91           0-7 #>    5: 23000173 2300017301 230001730106         55    36 or more #>   ---                                                           #> 4213: 23418712 2341871203 234187120301        119          7-14 #> 4214: 23419141 2341914101 234191410101        626          7-14 #> 4215: 23419141 2341914102 234191410201        595           0-7 #> 4216: 23419141 2341914103 234191410301         49    36 or more #> 4217: 23419703 2341970301 234197030101         69          7-14 #>  #> $num #>          hh_id  person_id       day_id day_weight num_trips_wtd #>    1: 23000173 2300017301 230001730101        775      0.000000 #>    2: 23000173 2300017301 230001730102        244      8.635246 #>    3: 23000173 2300017301 230001730103         77     39.935065 #>    4: 23000173 2300017301 230001730104         91      4.681319 #>    5: 23000173 2300017301 230001730106         55     51.763636 #>   ---                                                           #> 4213: 23418712 2341871203 234187120301        119     11.235294 #> 4214: 23419141 2341914101 234191410101        626      8.731629 #> 4215: 23419141 2341914102 234191410201        595      5.848739 #> 4216: 23419141 2341914103 234191410301         49     58.387755 #> 4217: 23419703 2341970301 234197030101         69     11.898551 #>  #> $outliers #>    threshold num_removed min_outlier max_outlier #> 1:     0.975         109     59.2663       469.7 #>  hts_prep_triprate(summarize_by = 'age',                   variables_dt = variable_list,                   trip_name = 'trip',                   day_name = 'day',                   hts_data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle)) #> $cat #>          hh_id  person_id       day_id day_weight person_weight age #>    1: 23000173 2300017301 230001730101        775           139   7 #>    2: 23000173 2300017301 230001730102        244           139   7 #>    3: 23000173 2300017301 230001730103         77           139   7 #>    4: 23000173 2300017301 230001730104         91           139   7 #>    5: 23000173 2300017301 230001730106         55           139   7 #>   ---                                                               #> 4213: 23418712 2341871203 234187120301        119           809   2 #> 4214: 23419141 2341914101 234191410101        626           136   6 #> 4215: 23419141 2341914102 234191410201        595           170   5 #> 4216: 23419141 2341914103 234191410301         49           490   1 #> 4217: 23419703 2341970301 234197030101         69           645   9 #>       num_trips_wtd #>    1:     Exactly 0 #>    2:          7-14 #>    3:    36 or more #>    4:           0-7 #>    5:    36 or more #>   ---               #> 4213:          7-14 #> 4214:          7-14 #> 4215:           0-7 #> 4216:    36 or more #> 4217:          7-14 #>  #> $num #>          hh_id  person_id       day_id day_weight person_weight age #>    1: 23000173 2300017301 230001730101        775           139   7 #>    2: 23000173 2300017301 230001730102        244           139   7 #>    3: 23000173 2300017301 230001730103         77           139   7 #>    4: 23000173 2300017301 230001730104         91           139   7 #>    5: 23000173 2300017301 230001730106         55           139   7 #>   ---                                                               #> 4213: 23418712 2341871203 234187120301        119           809   2 #> 4214: 23419141 2341914101 234191410101        626           136   6 #> 4215: 23419141 2341914102 234191410201        595           170   5 #> 4216: 23419141 2341914103 234191410301         49           490   1 #> 4217: 23419703 2341970301 234197030101         69           645   9 #>       num_trips_wtd #>    1:      0.000000 #>    2:      8.635246 #>    3:     39.935065 #>    4:      4.681319 #>    5:     51.763636 #>   ---               #> 4213:     11.235294 #> 4214:      8.731629 #> 4215:      5.848739 #> 4216:     58.387755 #> 4217:     11.898551 #>  #> $outliers #>    threshold num_removed min_outlier max_outlier #> 1:     0.975         109     59.2663       469.7 #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove missing data for summary variables — hts_remove_missing_data","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"Remove missing data summary variables","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"","code":"hts_remove_missing_data(   hts_data,   variables_dt,   summarize_var,   ids = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   summarize_by = NULL,   missing_values = c(\"Missing Response\", \"995\"),   not_imputable = -1 )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"hts_data List containing household, person, day, trip, vehicle datasets data.table format. variables_dt variable list descriptions table locations variables. summarize_var Variable summarized missing data removed. ids names unique identifiers table hts_data summarize_by Variable summarized missing data removed. Default NULL. missing_values Missing values removed. Defaults 995 'Missing Response'. not_imputable Value meaning not_imputable removed. Default -1.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"Inputted list datasets without missing values specified variables.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_missing_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove missing data for summary variables — hts_remove_missing_data","text":"","code":"require(data.table) hts_remove_missing_data(hts_data = list('hh' = hh,                                         'person' = person,                                         'day' = day,                                         'trip' = trip,                                         'vehicle' = vehicle),                         variables_dt = variable_list,                         summarize_var = 'speed_mph',                         summarize_by = 'mode_type') #> $hh #>          hh_id sample_segment num_trips num_people income_detailed #>    1: 23000173              8        66          4               8 #>    2: 23000738              4        16          1             999 #>    3: 23000858             16        10          2              10 #>    4: 23001054              8        75          2               8 #>    5: 23001072             16        27          1               8 #>   ---                                                              #>  996: 23415053              5         9          2               8 #>  997: 23416563             14        16          6               7 #>  998: 23418712              5         7          3             999 #>  999: 23419141             14        19          3              10 #> 1000: 23419703             14         2          1               2 #>       income_followup residence_type hh_weight #>    1:             995              1       190 #>    2:             999              1        54 #>    3:             995              2       912 #>    4:             995              1       182 #>    5:             995              2       958 #>   ---                                          #>  996:             995              4       232 #>  997:             995              2       928 #>  998:               6              1       314 #>  999:             995              1       811 #> 1000:             995              1       407 #>  #> $person #>       ethnicity_1 ethnicity_2 ethnicity_3 ethnicity_4 ethnicity_997 #>    1:           1           0           0           0             0 #>    2:         995         995         995         995           995 #>    3:         995         995         995         995           995 #>    4:           1           0           0           0             0 #>    5:           1           0           0           0             0 #>   ---                                                               #> 2038:         995         995         995         995           995 #> 2039:           1           0           0           0             0 #> 2040:           1           0           0           0             0 #> 2041:         995         995         995         995           995 #> 2042:           1           0           0           0             0 #>       ethnicity_999 race_1 race_2 race_3 race_4 race_5 race_997 race_999 #>    1:             0      0      0      0      0      1        0        0 #>    2:           995    995    995    995    995    995      995      995 #>    3:           995    995    995    995    995    995      995      995 #>    4:             0      0      0      0      0      1        0        0 #>    5:             0      0      0      0      0      1        0        0 #>   ---                                                                    #> 2038:           995    995    995    995    995    995      995      995 #> 2039:             0      0      0      0      0      1        0        0 #> 2040:             0      0      0      0      0      1        0        0 #> 2041:           995    995    995    995    995    995      995      995 #> 2042:             0      0      0      0      0      1        0        0 #>          hh_id num_trips  person_id age gender employment education #>    1: 23000173        21 2300017301   7      2          1         6 #>    2: 23000173         5 2300017302   3      2          5       995 #>    3: 23000173         2 2300017303   2      2        995       995 #>    4: 23000173        38 2300017304   6      1          3         6 #>    5: 23000738        16 2300073801   8      1          1         7 #>   ---                                                               #> 2038: 23418712         2 2341871203   2      1        995       995 #> 2039: 23419141         9 2341914101   6      2          1         6 #> 2040: 23419141         5 2341914102   5      1          5         2 #> 2041: 23419141         5 2341914103   1      1        995       995 #> 2042: 23419703         2 2341970301   9      2          5         6 #>       person_weight #>    1:           139 #>    2:            17 #>    3:           400 #>    4:           747 #>    5:           298 #>   ---               #> 2038:           809 #> 2039:           136 #> 2040:           170 #> 2041:           490 #> 2042:           645 #>  #> $day #>       delivery_2 delivery_3 delivery_4 delivery_5 delivery_6 delivery_7 #>    1:          0          0          0          0          0          0 #>    2:        995        995        995        995        995        995 #>    3:        995        995        995        995        995        995 #>    4:          0          0          0          0          0          0 #>    5:          0          0          0          0          0          0 #>   ---                                                                   #> 4322:        995        995        995        995        995        995 #> 4323:          1          1          0          0          0          0 #> 4324:        995        995        995        995        995        995 #> 4325:        995        995        995        995        995        995 #> 4326:          0          0          0          1          0          0 #>       delivery_8 delivery_996    hh_id num_trips  person_id       day_id #>    1:          0            1 23000173         0 2300017301 230001730101 #>    2:        995          995 23000173        NA 2300017302 230001730201 #>    3:        995          995 23000173        NA 2300017303 230001730301 #>    4:          0            1 23000173         3 2300017304 230001730401 #>    5:          0            1 23000173         4 2300017301 230001730102 #>   ---                                                                    #> 4322:        995          995 23418712         2 2341871203 234187120301 #> 4323:          0            0 23419141         9 2341914101 234191410101 #> 4324:        995          995 23419141         5 2341914102 234191410201 #> 4325:        995          995 23419141         5 2341914103 234191410301 #> 4326:          0            0 23419703         2 2341970301 234197030101 #>       travel_date begin_day end_day day_weight #>    1:  2023-04-19         1       1        775 #>    2:  2023-04-19       995     995         61 #>    3:  2023-04-19       995     995        818 #>    4:  2023-04-19         1       1        673 #>    5:  2023-04-20         1       1        244 #>   ---                                          #> 4322:  2023-05-31         1       1        119 #> 4323:  2023-05-31         1       1        626 #> 4324:  2023-05-31         1       1        595 #> 4325:  2023-05-31         1       1         49 #> 4326:  2023-05-31         1       1         69 #>  #> $trip #>           hh_id  person_id       day_id travel_date      trip_id speed_mph #>     1: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12 21.480572 #>     2: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12 23.720178 #>     3: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12  6.927242 #>     4: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12  6.146634 #>     5: 23000173 2300017301 230001730103  2023-04-21 2.300017e+12 34.657421 #>    ---                                                                     #> 15620: 23419141 2341914103 234191410301  2023-05-31 2.341914e+12  8.904454 #> 15621: 23419141 2341914103 234191410301  2023-05-31 2.341914e+12 43.284089 #> 15622: 23419141 2341914103 234191410301  2023-05-31 2.341914e+12 25.518845 #> 15623: 23419703 2341970301 234197030101  2023-05-31 2.341970e+12 13.131100 #> 15624: 23419703 2341970301 234197030101  2023-05-31 2.341970e+12 16.413875 #>        mode_type d_purpose_category trip_weight #>     1:         8                  9         356 #>     2:         8                  1         679 #>     3:         1                  9         758 #>     4:         1                  1         314 #>     5:         8                  3         883 #>    ---                                          #> 15620:         8                  1         950 #> 15621:         8                  6         123 #> 15622:         8                  1         720 #> 15623:         8                 13         523 #> 15624:         8                  1         298 #>  #> $vehicle #>          hh_id vehicle_id fuel_type hh_weight #>    1: 23000173 2300017301         1       190 #>    2: 23000173 2300017302         1       190 #>    3: 23000173 2300017303         1       190 #>    4: 23000738 2300073801         5        54 #>    5: 23000858 2300085801         1       912 #>   ---                                         #> 1453: 23418712 2341871202         1       314 #> 1454: 23419141 2341914101         2       811 #> 1455: 23419141 2341914102         1       811 #> 1456: 23419703 2341970301         1       407 #> 1457: 23419703 2341970302         1       407 #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove outliers from a numeric variable — hts_remove_outliers","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"Remove outliers numeric variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"","code":"hts_remove_outliers(var_dt, numvar = NULL, threshold = 0.975)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"var_dt Dataset numeric variable remove outliers data.table format. numvar Numeric variable remove outliers . Default NULL. threshold Threshold define outlier . Default .975.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"List outliers removed dataset without outliers.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_remove_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove outliers from a numeric variable — hts_remove_outliers","text":"","code":"require(data.table) hts_remove_outliers(var_dt = trip, numvar = 'speed_mph') #> $outlier_description #>    threshold num_removed min_outlier max_outlier #> 1:     0.975         386    110.2297    228233.1 #>  #> $dt #>           hh_id  person_id       day_id travel_date      trip_id speed_mph #>     1: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12 21.480572 #>     2: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12 23.720178 #>     3: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12  6.927242 #>     4: 23000173 2300017301 230001730102  2023-04-20 2.300017e+12  6.146634 #>     5: 23000173 2300017301 230001730103  2023-04-21 2.300017e+12 34.657421 #>    ---                                                                     #> 15031: 23419141 2341914103 234191410301  2023-05-31 2.341914e+12  8.904454 #> 15032: 23419141 2341914103 234191410301  2023-05-31 2.341914e+12 43.284089 #> 15033: 23419141 2341914103 234191410301  2023-05-31 2.341914e+12 25.518845 #> 15034: 23419703 2341970301 234197030101  2023-05-31 2.341970e+12 13.131100 #> 15035: 23419703 2341970301 234197030101  2023-05-31 2.341970e+12 16.413875 #>        mode_type d_purpose_category trip_weight #>     1:         8                  9         356 #>     2:         8                  1         679 #>     3:         1                  9         758 #>     4:         1                  1         314 #>     5:         8                  3         883 #>    ---                                          #> 15031:         8                  1         950 #> 15032:         8                  6         123 #> 15033:         8                  1         720 #> 15034:         8                 13         523 #> 15035:         8                  1         298 #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Make household travel survey summaries — hts_summary","title":"Make household travel survey summaries — hts_summary","text":"Make household travel survey summaries","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make household travel survey summaries — hts_summary","text":"","code":"hts_summary(   prepped_dt,   summarize_var,   summarize_by = NULL,   summarize_vartype = \"categorical\",   id_cols = c(\"hh_id\", \"person_id\", \"day_id\", \"trip_id\", \"vehicle_id\"),   weighted = TRUE,   se = FALSE,   wtname = NULL,   strataname = NULL,   checkbox_valname = NULL,   checkbox_yesval = NULL )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make household travel survey summaries — hts_summary","text":"prepped_dt prepared dataset data.table format variable summarize, variable summarize , weights, used. summarize_var Name variable summarize. Default NULL. summarize_by Name variable summarize summarize_var . Default NULL. summarize_vartype String; one either 'categorical' (variable summarized categorical), 'checkbox' (variable summarized derived multiple response, aka select---apply question) 'numeric', variable summarized numeric. id_cols names possible ids prepped_dt return unique counts weighted Whether data weighted. Default TRUE. se Whether calculate standard error. Default FALSE. set FALSE weighted FALSE. wtname Name weight column use. Default NULL. Must specified weighted = TRUE. strataname Name strata name bring . Default NULL. checkbox_valname Name column checkbox value. Default NULL. Must provided summarize_var checkbox variable. checkbox_yesval Value checkbox_valname indicates selected. Default NULL. Must provided summarize_var checkbox variable.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make household travel survey summaries — hts_summary","text":"list containing (applicable) categorical numeric summaries specified variable(s), well sample sizes whether summarized variable shared checkbox variable. access categorical/numeric df use output$summary. access weighted df use output$summary$wtd, output$summary$unwtd unweighted df. access weight name use output$summary$weight_name. access sample sizes use output$n_ls. access weighted unweighted sample sizes respectively, use output$n_ls$wtd output$n_ls$unwtd.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make household travel survey summaries — hts_summary","text":"","code":"require(data.table) require(stringr) require(dplyr) #> Loading required package: dplyr #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:data.table': #>  #>     between, first, last #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union require(srvyr) #> Loading required package: srvyr #>  #> Attaching package: 'srvyr' #> The following object is masked from 'package:stats': #>  #>     filter DT = hts_prep_data(summarize_var = 'age',                    summarize_by = 'employment',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person age broken down by person employment output = hts_summary(prepped_dt = DT,               summarize_var = 'age',               summarize_by = 'employment',               summarize_vartype = 'categorical',               wtname = 'person_weight')  DT = hts_prep_data(summarize_var = 'speed_mph',                    summarize_by = 'age',                     variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$num #> Creating a summary of trip speed_mph broken down by person age output = hts_summary(prepped_dt = DT,               summarize_var = 'speed_mph',               summarize_by = 'age',               summarize_vartype = 'numeric',               wtname = 'trip_weight')  DT = hts_prep_data(summarize_var = 'race',                    summarize_by = 'age',                     variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person race broken down by person age output = hts_summary(prepped_dt = DT,               summarize_var = 'race',               summarize_by = 'age',               summarize_vartype = 'categorical',               wtname = 'person_weight',               checkbox_valname = 'value',               checkbox_yesval = 1)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a categorical variable — hts_summary_cat","title":"Summarize a categorical variable — hts_summary_cat","text":"Summarize categorical variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a categorical variable — hts_summary_cat","text":"","code":"hts_summary_cat(   prepped_dt,   summarize_var = NULL,   summarize_by = NULL,   weighted = TRUE,   se = FALSE,   wtname = NULL,   strataname = NULL,   checkbox_valname = NULL,   checkbox_yesval = NULL )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a categorical variable — hts_summary_cat","text":"prepped_dt Dataset containing summary variables key columns data.table format. summarize_var Name categorical variable summarize. Default NULL. summarize_by Name variable summarize summarize_var . Default NULL. weighted Whether data weighted. Default TRUE. se Whether calculate standard error. Default FALSE. wtname Name weight column use. Default NULL. strataname Name strata name bring . Default NULL. checkbox_valname Name column checkbox value. Default NULL. Must provided summarize_var checkbox variable. checkbox_yesval Value checkbox_valname indicates selected. Default NULL. Must provided summarize_var checkbox variable.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a categorical variable — hts_summary_cat","text":"List unweighted weighted categorical summaries including counts proportions.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a categorical variable — hts_summary_cat","text":"","code":"require(data.table) require(stringr) require(dplyr) require(srvyr) DT = hts_prep_data(summarize_var = 'age',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person age  hts_summary_cat(prepped_dt = DT,                 summarize_var = 'age',                 wtname = 'person_weight') #> $unwtd #>     age count        prop #>  1:   1    80 0.039177277 #>  2:   2   187 0.091576885 #>  3:   3    30 0.014691479 #>  4:   4   118 0.057786484 #>  5:   5   454 0.222331048 #>  6:   6   364 0.178256611 #>  7:   7   232 0.113614104 #>  8:   8   252 0.123408423 #>  9:   9   217 0.106268364 #> 10:  10    96 0.047012733 #> 11:  11    12 0.005876592 #>  #> $wtd #>     age count        prop    est #>  1:   1    80 0.035449836  36529 #>  2:   2   187 0.094923344  97813 #>  3:   3    30 0.015961112  16447 #>  4:   4   118 0.056409774  58127 #>  5:   5   454 0.217321305 223937 #>  6:   6   364 0.183085511 188659 #>  7:   7   232 0.110731123 114102 #>  8:   8   252 0.124048709 127825 #>  9:   9   217 0.108907634 112223 #> 10:  10    96 0.046645032  48065 #> 11:  11    12 0.006516621   6715 #>  #> $weight_name #> [1] \"person_weight\" #>                   DT = hts_prep_data(summarize_var = 'race',                    summarize_by = 'employment',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$cat #> Creating a summary of person race broken down by person employment hts_summary_cat(prepped_dt = DT,                 summarize_var = 'race',                 summarize_by = 'employment',                 wtname = 'person_weight',                 checkbox_valname = 'value',                 checkbox_yesval = 1) #> $unwtd #>     employment                                      race count        prop #>  1:          1                 African American or Black    33 0.035143770 #>  2:          1          American Indian or Alaska Native    12 0.012779553 #>  3:          1                                     Asian   214 0.227902023 #>  4:          1 Native Hawaiian or other Pacific Islander    10 0.010649627 #>  5:          1                                     White   550 0.585729499 #>  6:          1                                Other race    21 0.022364217 #>  7:          1                      Prefer not to answer    99 0.105431310 #>  8:          2                 African American or Black     9 0.056962025 #>  9:          2          American Indian or Alaska Native     1 0.006329114 #> 10:          2                                     Asian    18 0.113924051 #> 11:          2 Native Hawaiian or other Pacific Islander     3 0.018987342 #> 12:          2                                     White   107 0.677215190 #> 13:          2                                Other race     1 0.006329114 #> 14:          2                      Prefer not to answer    19 0.120253165 #> 15:          3                 African American or Black     1 0.011111111 #> 16:          3          American Indian or Alaska Native     1 0.011111111 #> 17:          3                                     Asian    13 0.144444444 #> 18:          3                                     White    67 0.744444444 #> 19:          3                      Prefer not to answer     8 0.088888889 #> 20:          5                 African American or Black    12 0.025586354 #> 21:          5          American Indian or Alaska Native    11 0.023454158 #> 22:          5                                     Asian    70 0.149253731 #> 23:          5 Native Hawaiian or other Pacific Islander     4 0.008528785 #> 24:          5                                     White   314 0.669509595 #> 25:          5                                Other race     8 0.017057569 #> 26:          5                      Prefer not to answer    50 0.106609808 #> 27:          6                 African American or Black    10 0.126582278 #> 28:          6          American Indian or Alaska Native     3 0.037974684 #> 29:          6                                     Asian    13 0.164556962 #> 30:          6                                     White    43 0.544303797 #> 31:          6                                Other race     2 0.025316456 #> 32:          6                      Prefer not to answer     8 0.101265823 #> 33:          7                 African American or Black     3 0.157894737 #> 34:          7          American Indian or Alaska Native     2 0.105263158 #> 35:          7                                     Asian     3 0.157894737 #> 36:          7                                     White    10 0.526315789 #> 37:          7                                Other race     1 0.052631579 #> 38:          8                 African American or Black     2 0.153846154 #> 39:          8                                     Asian     1 0.076923077 #> 40:          8 Native Hawaiian or other Pacific Islander     1 0.076923077 #> 41:          8                                     White     5 0.384615385 #> 42:          8                                Other race     1 0.076923077 #> 43:          8                      Prefer not to answer     3 0.230769231 #>     employment                                      race count        prop #>  #> $wtd #>     employment                                      race count        prop #>  1:          1                 African American or Black    33 0.039852519 #>  2:          1          American Indian or Alaska Native    12 0.012715506 #>  3:          1                                     Asian   214 0.213507915 #>  4:          1 Native Hawaiian or other Pacific Islander    10 0.010313354 #>  5:          1                                     White   550 0.587831102 #>  6:          1                                Other race    21 0.021503343 #>  7:          1                      Prefer not to answer    99 0.114276260 #>  8:          2                 African American or Black     9 0.061423340 #>  9:          2          American Indian or Alaska Native     1 0.009333809 #> 10:          2                                     Asian    18 0.095426962 #> 11:          2 Native Hawaiian or other Pacific Islander     3 0.011330134 #> 12:          2                                     White   107 0.696809847 #> 13:          2                                Other race     1 0.001546821 #> 14:          2                      Prefer not to answer    19 0.124129087 #> 15:          3                 African American or Black     1 0.005067356 #> 16:          3          American Indian or Alaska Native     1 0.016223881 #> 17:          3                                     Asian    13 0.146035784 #> 18:          3                                     White    67 0.739646328 #> 19:          3                      Prefer not to answer     8 0.093026651 #> 20:          5                 African American or Black    12 0.030971790 #> 21:          5          American Indian or Alaska Native    11 0.027242159 #> 22:          5                                     Asian    70 0.135451519 #> 23:          5 Native Hawaiian or other Pacific Islander     4 0.011485094 #> 24:          5                                     White   314 0.670586812 #> 25:          5                                Other race     8 0.016741621 #> 26:          5                      Prefer not to answer    50 0.107521005 #> 27:          6                 African American or Black    10 0.108340051 #> 28:          6          American Indian or Alaska Native     3 0.026655918 #> 29:          6                                     Asian    13 0.188749902 #> 30:          6                                     White    43 0.553246821 #> 31:          6                                Other race     2 0.019894417 #> 32:          6                      Prefer not to answer     8 0.103112891 #> 33:          7                 African American or Black     3 0.158050047 #> 34:          7          American Indian or Alaska Native     2 0.105878187 #> 35:          7                                     Asian     3 0.093130312 #> 36:          7                                     White    10 0.610717658 #> 37:          7                                Other race     1 0.032223796 #> 38:          8                 African American or Black     2 0.107026524 #> 39:          8                                     Asian     1 0.080153560 #> 40:          8 Native Hawaiian or other Pacific Islander     1 0.103420195 #> 41:          8                                     White     5 0.413331782 #> 42:          8                                Other race     1 0.102838530 #> 43:          8                      Prefer not to answer     3 0.193229409 #>     employment                                      race count        prop #>        est #>  1:  18548 #>  2:   5918 #>  3:  99370 #>  4:   4800 #>  5: 273586 #>  6:  10008 #>  7:  53186 #>  8:   4646 #>  9:    706 #> 10:   7218 #> 11:    857 #> 12:  52706 #> 13:    117 #> 14:   9389 #> 15:    243 #> 16:    778 #> 17:   7003 #> 18:  35469 #> 19:   4461 #> 20:   7424 #> 21:   6530 #> 22:  32468 #> 23:   2753 #> 24: 160741 #> 25:   4013 #> 26:  25773 #> 27:   4166 #> 28:   1025 #> 29:   7258 #> 30:  21274 #> 31:    765 #> 32:   3965 #> 33:   1339 #> 34:    897 #> 35:    789 #> 36:   5174 #> 37:    273 #> 38:    920 #> 39:    689 #> 40:    889 #> 41:   3553 #> 42:    884 #> 43:   1661 #>        est #>  #> $weight_name #> [1] \"person_weight\" #>                   DT = hts_prep_data(summarize_var = 'employment',                 summarize_by = c('race', 'income_detailed', 'gender'),                 variables_dt = variable_list,                 data = list('hh' = hh,                             'person' = person,                             'day' = day,                             'trip' = trip,                             'vehicle' = vehicle))$cat #> Creating a summary of person employment broken down by person race and hh income_detailed and person gender  hts_summary_cat(prepped_dt = DT,                 summarize_var = 'employment',                 summarize_by = c('race', 'income_detailed', 'gender'),                 wtname = 'person_weight')$unwtd #>                           race income_detailed gender employment count #>   1: African American or Black               1      1          5     1 #>   2: African American or Black               1      2          6     1 #>   3: African American or Black               1      2          8     1 #>   4: African American or Black               1    999          6     1 #>   5: African American or Black               2      1          1     1 #>  ---                                                                   #> 393:      Prefer not to answer             999      2          8     1 #> 394:      Prefer not to answer             999    999          1    22 #> 395:      Prefer not to answer             999    999          3     4 #> 396:      Prefer not to answer             999    999          5     6 #> 397:      Prefer not to answer             999    999          8     1 #>            prop #>   1: 1.00000000 #>   2: 0.50000000 #>   3: 0.50000000 #>   4: 1.00000000 #>   5: 0.20000000 #>  ---            #> 393: 0.05882353 #> 394: 0.66666667 #> 395: 0.12121212 #> 396: 0.18181818 #> 397: 0.03030303"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a numeric variable — hts_summary_num","title":"Summarize a numeric variable — hts_summary_num","text":"Summarize numeric variable","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a numeric variable — hts_summary_num","text":"","code":"hts_summary_num(   prepped_dt,   summarize_var = NULL,   summarize_by = NULL,   weighted = TRUE,   se = FALSE,   wtname = NULL,   strataname = NULL )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a numeric variable — hts_summary_num","text":"prepped_dt prepared dataset data.table format variable summarize, variable summarize , weights, used. summarize_var Name variable summarize. Default NULL. summarize_by Name variable summarize summarize_var . Default NULL. weighted Whether data weighted. Default TRUE. se Whether calculate standard error. Default FALSE. set FALSE weighted FALSE. wtname Name weight column use. Default NULL. Must specified weighted = TRUE. strataname Name strata name bring . Default NULL.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a numeric variable — hts_summary_num","text":"List unweighted weighted numeric summaries including count, min, max, mean, se, median.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_summary_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a numeric variable — hts_summary_num","text":"","code":"require(data.table) require(stringr) require(dplyr) require(srvyr) DT = hts_prep_data(summarize_var = 'speed_mph',                    variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$num #> Creating a summary of trip speed_mph  hts_summary_num(prepped_dt = DT,                 summarize_var = 'speed_mph',                 wtname = 'trip_weight') #> $unwtd #>    count min      max     mean   median #> 1: 15035   0 109.2184 12.89507 9.728796 #>  #> $wtd #>    count min      max     mean   median #> 1: 15035   0 109.2184 12.84671 9.760141 #>  #> $weight_name #> [1] \"trip_weight\" #>  DT = hts_prep_data(summarize_var = 'speed_mph',                    summarize_by = 'age',                     variables_dt = variable_list,                    data = list('hh' = hh,                                'person' = person,                                'day' = day,                                'trip' = trip,                                'vehicle' = vehicle))$num #> Creating a summary of trip speed_mph broken down by person age hts_summary_num(prepped_dt = DT,                 summarize_var = 'speed_mph',                 summarize_by = 'age',                 wtname = 'trip_weight') #> $unwtd #>     age count        min       max     mean    median #>  1:   1   311 0.35959216 101.19362 14.55031 10.280068 #>  2:   2   844 0.00000000  82.89088 12.26536 10.190479 #>  3:   3    89 0.00000000  98.43097 12.02007  9.323293 #>  4:   4   984 0.00000000 109.21842 11.97881  7.763898 #>  5:   5  3704 0.00000000 108.02176 12.21873  8.234977 #>  6:   6  3685 0.00000000 101.19362 12.50943  9.558940 #>  7:   7  1940 0.01815516 106.72662 13.84846 10.808561 #>  8:   8  1644 0.02554711 104.77523 14.14443 11.208044 #>  9:   9  1379 0.00000000 105.10755 13.40606 11.036031 #> 10:  10   433 0.07317172  76.07189 13.43742 11.760465 #> 11:  11    22 0.15677999  88.79454 16.50646 11.099190 #>  #> $wtd #>     age count        min       max     mean    median #>  1:   1   311 0.35959216 101.19362 14.06340  9.556707 #>  2:   2   844 0.00000000  82.89088 12.69728 10.496980 #>  3:   3    89 0.00000000  98.43097 13.16383 12.224664 #>  4:   4   984 0.00000000 109.21842 11.79167  7.763898 #>  5:   5  3704 0.00000000 108.02176 12.04057  8.095823 #>  6:   6  3685 0.00000000 101.19362 12.47361  9.474190 #>  7:   7  1940 0.01815516 106.72662 13.84666 10.899718 #>  8:   8  1644 0.02554711 104.77523 14.20364 11.197504 #>  9:   9  1379 0.00000000 105.10755 13.34549 11.127732 #> 10:  10   433 0.07317172  76.07189 13.44185 12.035237 #> 11:  11    22 0.15677999  88.79454 14.11659 11.099190 #>  #> $weight_name #> [1] \"trip_weight\" #>"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform travel survey data.table to a survey object — hts_to_so","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"Transform travel survey data.table survey object","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"","code":"hts_to_so(prepped_dt, weighted = TRUE, wtname = NULL, strataname = NULL)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"prepped_dt Dataframe data.table format transform survey object. weighted true creates weighted survey object. Default TRUE. wtname Name weight column dataframe. Defaults NULL, must exist weighted true. strataname Name strata name bring . Default NULL.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"Inputted dataframe transformed survey object.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_to_so.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform travel survey data.table to a survey object — hts_to_so","text":"","code":"require(data.table) hts_to_so(prepped_dt = trip, wtname = 'trip_weight') #> Independent Sampling design (with replacement) #> Called via srvyr #> Sampling variables: #>  - ids: `1` #>  - weights: weight #> Data variables: hh_id (int), person_id (dbl), day_id (dbl), travel_date (date), #>   trip_id (dbl), speed_mph (dbl), mode_type (int), d_purpose_category (int), #>   weight (int)"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":null,"dir":"Reference","previous_headings":"","what":"Add vehicle_id to trip table — hts_trip_vehid","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"Add vehicle_id trip table","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"","code":"hts_trip_vehid(   trip_table,   vehicle_table,   vehicle_mode_type = \"Vehicle\",   values_dt = value_labels,   ... )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"trip_table Dataset trips data.table format. vehicle_table Dataset vehicles data.table format. vehicle_mode_type Mode type label vehicle. Default 'Vehicle'. values_dt Dataset value labels data.table format. ... Additional arguments passed link{factorize_column}","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"Trip table vehicle_id attached.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/hts_trip_vehid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add vehicle_id to trip table — hts_trip_vehid","text":"","code":"require(data.table) trip_ex = data.table(       hh_id = sample(1:10, size = 30, replace = TRUE),       trip_id = 1:30,       mode_type = sample(1:2, size = 30, replace = TRUE),       mode_1 = sample(1, size = 30, replace = TRUE)) vehicle_ex = data.table(       hh_id = sample(1:10, size = 30, replace = TRUE),       vehicle_id = 1:30) values_ex = data.table(       variable = c(rep('mode_type', 2), ('mode_1')),       value = c(1,2,1),       value_label = c('Vehicle', 'Walk', 'Car')       ) hts_trip_vehid(trip_table = trip_ex,                vehicle_table = vehicle_ex,                vehicle_mode_type = 'Vehicle',                values_dt = values_ex) #>     hh_id trip_id mode_type mode_1 vehicle_id #>  1:     7       1         2      1       <NA> #>  2:     5       2         2      1       <NA> #>  3:     6       3         1      1       <NA> #>  4:     4       4         1      1       <NA> #>  5:     6       5         2      1       <NA> #>  6:     9       6         2      1       <NA> #>  7:     5       7         1      1       <NA> #>  8:     5       8         2      1       <NA> #>  9:     8       9         1      1       <NA> #> 10:     2      10         1      1       <NA> #> 11:     7      11         1      1       <NA> #> 12:     5      12         2      1       <NA> #> 13:     5      13         1      1       <NA> #> 14:     2      14         2      1       <NA> #> 15:     6      15         1      1       <NA> #> 16:     4      16         2      1       <NA> #> 17:     2      17         2      1       <NA> #> 18:     3      18         1      1       <NA> #> 19:     9      19         2      1       <NA> #> 20:     6      20         2      1       <NA> #> 21:     7      21         2      1       <NA> #> 22:     5      22         1      1       <NA> #> 23:     6      23         2      1       <NA> #> 24:     9      24         1      1       <NA> #> 25:     6      25         2      1       <NA> #> 26:    10      26         1      1       <NA> #> 27:     5      27         2      1       <NA> #> 28:     2      28         1      1       <NA> #> 29:     1      29         2      1       <NA> #> 30:     4      30         2      1       <NA> #>     hh_id trip_id mode_type mode_1 vehicle_id"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Join spatial data to points — join_spatial","title":"Join spatial data to points — join_spatial","text":"Performs spatial join obtain geographic fields specified lon/lat columns.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join spatial data to points — join_spatial","text":"","code":"join_spatial(   x,   y,   id_col,   lon_col,   lat_col,   crs_lonlat = 4326,   crs_equal_area = 5070,   largest = FALSE )"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join spatial data to points — join_spatial","text":"x data.table survey data y sf object geometry interest id_col character. column x unique identifier lon_col character. column x longitude lat_col character.  column x latitude crs_lonlat numeric.  EPSG code lonlat data (defaults WGS84) crs_equal_area numeric.  EPSG code equal area projection. Many spatial operations assume projected data (lon/lat).  Defaults US Albers Equal Area largest logical.  TRUE, return x features fields y largest overlap features x; see st_join. useful join returning one value y x.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join spatial data to points — join_spatial","text":"data.table returned columns x plus columns y.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Join spatial data to points — join_spatial","text":"Matt Landis","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/join_spatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join spatial data to points — join_spatial","text":"","code":"if (FALSE) { x = data.table(id = 1:3, lon=c(-82.33, -79.17, -76.17), lat = c(35.50, 36.27, 36.49)) nc = st_read(system.file('shape/nc.shp', package='sf'))[, c('FIPS', 'NAME', 'geometry')] z = join_spatial(x, nc, id_col='id', lon_col = 'lon', lat_col = 'lat') z}"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":null,"dir":"Reference","previous_headings":"","what":"Test person dataset — person","title":"Test person dataset — person","text":"dataset containing person level attributes almost 2,000 persons 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test person dataset — person","text":"","code":"person"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":"person","dir":"Reference","previous_headings":"","what":"person","title":"Test person dataset — person","text":"data frame 1,999 rows 19 columns: hh_id 8 digit household ID person_id 10 digit person ID ethnicity_1 Hispnic, Latino, Spanish origin, response codes ethnicity_2 Mexican, Mexican American, Chicano, response codes ethnicity_3 Puerto Rican, response codes ethnicity_4 Cuban, response codes ethnicity_997 Another Hispanic, Latino, Spanish origin, response codes ethnicity_999 Prefer answer, response codes race_1 African American Black, response codes race_2 Americian Indian Alaska Native, response codes race_3 Asian, response codes race_4 Native Hawaiian Pacific Islander, response codes race_5 White, response codes race_997 race, response codes race_999 Prefer answer, response codes age Age, response codes gender Gender, response codes employment Employment status, response codes education Highest level education completed, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/person.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test person dataset — person","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Test household travel survey dataset — test_data","title":"Test household travel survey dataset — test_data","text":"Test household travel survey dataset","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test household travel survey dataset — test_data","text":"","code":"test_data"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":"test-data","dir":"Reference","previous_headings":"","what":"test_data","title":"Test household travel survey dataset — test_data","text":"list containing following datasets:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/test_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test household travel survey dataset — test_data","text":"list export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":null,"dir":"Reference","previous_headings":"","what":"Test trip dataset — trip","title":"Test trip dataset — trip","text":"dataset containing attributes 20,000 trips 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test trip dataset — trip","text":"","code":"trip"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":"trip","dir":"Reference","previous_headings":"","what":"trip","title":"Test trip dataset — trip","text":"data frame 21,378 rows 7 columns: hh_id 8 digit household ID person_id 10 digit person ID day_id 12 digit day ID trip_id 13 digit trip ID travel_date Date trip mode_type Type transportation used trip, response codes d_purpose_category Purpose taking trip destination, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/trip.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test trip dataset — trip","text":"Export tables compiled internal RSG database 11/22/2023","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/value_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"List of values and their labels — value_labels","title":"List of values and their labels — value_labels","text":"dataset containing values variables found variable_list variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/value_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of values and their labels — value_labels","text":"","code":"value_labels"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/value_labels.html","id":"value-labels","dir":"Reference","previous_headings":"","what":"value_labels","title":"List of values and their labels — value_labels","text":"data frame 210 rows 3 columns: variable Name variable value numeric value variable label numeric value variable represents","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/variable_list.html","id":null,"dir":"Reference","previous_headings":"","what":"List of variables — variable_list","title":"List of variables — variable_list","text":"dataset containing information variables existing hh, person, day, trip, vehicle tables. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/variable_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of variables — variable_list","text":"","code":"variable_list"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/variable_list.html","id":"variable-list","dir":"Reference","previous_headings":"","what":"variable_list","title":"List of variables — variable_list","text":"data frame 41 rows 13 columns: order order variables presented source variable created variable Name variable is_checkbox variable 'Select Apply' question hh variable exists hh table person variable exists person table day variable exists day table trip variable exists trip table vehicle variable exists vehicle table data_type Data type variable description description variable logic Conditions variable value","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":null,"dir":"Reference","previous_headings":"","what":"Test vehicle dataset — vehicle","title":"Test vehicle dataset — vehicle","text":"dataset containing attributes 6,500 vehicles 2023 Puget Sound Regional Council Household Travel Survey. variables follows:","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test vehicle dataset — vehicle","text":"","code":"vehicle"},{"path":[]},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":"vehicle","dir":"Reference","previous_headings":"","what":"vehicle","title":"Test vehicle dataset — vehicle","text":"data frame 1,366 rows 3 columns: hh_id 8 digit household ID vehicle_id 10 digit vehicle ID fuel_type Type fuel taken vehicle, response codes","code":""},{"path":"https://rsginc.github.io/travelSurveyTools/reference/vehicle.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test vehicle dataset — vehicle","text":"Export tables compiled internal RSG database 11/22/2023","code":""}]
